created_on,name,schema_name,is_builtin,is_aggregate,is_ansi,min_num_arguments,max_num_arguments,arguments,description,catalog_name,is_table_function,valid_for_clustering,is_secure,is_external_function,language,is_memoizable
2012-08-01T00:00:00-07:00,ABS,,Y,N,Y,1,1,"ABS(NUMBER) RETURN NUMBER, ABS(FLOAT) RETURN FLOAT",returns absolute value of x,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,ACOS,,Y,N,N,1,1,ACOS(FLOAT) RETURN FLOAT,Compute the arccosine of the input expression (returned as radians).,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,ACOSH,,Y,N,N,1,1,ACOSH(FLOAT) RETURN FLOAT,Compute the inverse hyperbolic cosine of the input expression.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ADD_MONTHS,,Y,N,N,2,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ANY_VALUE,,Y,Y,N,1,1,ANY_VALUE(ANY) RETURN ANY,Returns the first non-null value of a column,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,APPROXIMATE_COUNT_DISTINCT,,Y,Y,N,1,-1,APPROXIMATE_COUNT_DISTINCT(ANY) RETURN NUMBER,approximate distinct row count,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,APPROXIMATE_JACCARD_INDEX,,Y,Y,N,1,1,APPROXIMATE_JACCARD_INDEX(VARIANT) RETURN FLOAT,Similarity approximation of inputs,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,APPROXIMATE_SIMILARITY,,Y,Y,N,1,1,APPROXIMATE_SIMILARITY(VARIANT) RETURN FLOAT,Similarity approximation of inputs,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,APPROX_COUNT_DISTINCT,,Y,Y,N,1,-1,APPROX_COUNT_DISTINCT(ANY) RETURN NUMBER,approximate distinct row count,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,APPROX_PERCENTILE,,Y,Y,N,2,2,"APPROX_PERCENTILE(FLOAT, FLOAT) RETURN FLOAT",percentile approximation of inputs,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,APPROX_PERCENTILE_ACCUMULATE,,Y,Y,N,1,1,APPROX_PERCENTILE_ACCUMULATE(FLOAT) RETURN OBJECT,tdigest state in JSON format,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,APPROX_PERCENTILE_COMBINE,,Y,Y,N,1,1,APPROX_PERCENTILE_COMBINE(OBJECT) RETURN OBJECT,A tdigest state in JSON format,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,APPROX_PERCENTILE_ESTIMATE,,Y,N,N,2,2,"APPROX_PERCENTILE_ESTIMATE(OBJECT, FLOAT) RETURN FLOAT",ESTIMATED PERCENTILE VALUE,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,APPROX_TOP_K,,Y,Y,N,1,3,"APPROX_TOP_K(ANY [, NUMBER] [, NUMBER]) RETURN ARRAY",Array containing top k items and their frequencies,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,APPROX_TOP_K_ACCUMULATE,,Y,Y,N,2,2,"APPROX_TOP_K_ACCUMULATE(ANY, NUMBER) RETURN OBJECT",An internal state,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,APPROX_TOP_K_COMBINE,,Y,Y,N,1,2,"APPROX_TOP_K_COMBINE(OBJECT [, NUMBER]) RETURN OBJECT",A state created by combining information from combining  all input,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,APPROX_TOP_K_ESTIMATE,,Y,N,N,1,2,"APPROX_TOP_K_ESTIMATE(OBJECT [, NUMBER]) RETURN ARRAY",Array containing most common k items and their frequencies,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAYAGG,,Y,Y,N,1,1,ARRAYAGG(ANY) RETURN ARRAY,output array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAYS_OVERLAP,,Y,N,N,2,2,"ARRAYS_OVERLAP(ARRAY, ARRAY) RETURN BOOLEAN, ARRAYS_OVERLAP(ARRAY(ANY), ARRAY(ANY)) RETURN BOOLEAN",Returns true if two arrays have elements in common,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAYS_TO_OBJECT,,Y,N,N,2,2,"ARRAYS_TO_OBJECT(ARRAY, ARRAY) RETURN OBJECT",the resulting object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_AGG,,Y,Y,N,1,1,ARRAY_AGG(ANY) RETURN ARRAY,output array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_APPEND,,Y,N,N,2,2,"ARRAY_APPEND(ARRAY, ANY) RETURN ARRAY, ARRAY_APPEND(ARRAY(ANY), ANY) RETURN ARRAY(ANY)",the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_CAT,,Y,N,N,2,2,"ARRAY_CAT(ARRAY, ARRAY) RETURN ARRAY, ARRAY_CAT(VARIANT, VARIANT) RETURN ARRAY, ARRAY_CAT(ARRAY, VARIANT) RETURN ARRAY, ARRAY_CAT(VARIANT, ARRAY) RETURN ARRAY, ARRAY_CAT(ARRAY(ANY), ARRAY(ANY)) RETURN ARRAY(ANY)",Concatenate two arrays,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_COMPACT,,Y,N,N,1,1,"ARRAY_COMPACT(ARRAY) RETURN ARRAY, ARRAY_COMPACT(VARIANT) RETURN ARRAY, ARRAY_COMPACT(ARRAY(ANY)) RETURN ARRAY(ANY)",Compact array by removing nulls,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_CONSTRUCT,,Y,N,N,0,-1,ARRAY_CONSTRUCT(ANY) RETURN ARRAY,the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_CONSTRUCT_COMPACT,,Y,N,N,0,-1,ARRAY_CONSTRUCT_COMPACT(ANY) RETURN ARRAY,the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_CONTAINS,,Y,N,N,2,2,"ARRAY_CONTAINS(VARIANT, ARRAY) RETURN BOOLEAN, ARRAY_CONTAINS(ANY, ARRAY(ANY)) RETURN BOOLEAN",Returns true if array contains value,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_DISTINCT,,Y,N,N,1,1,"ARRAY_DISTINCT(ARRAY) RETURN ARRAY, ARRAY_DISTINCT(ARRAY(ANY)) RETURN ARRAY(ANY)",the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_EXCEPT,,Y,N,N,2,2,"ARRAY_EXCEPT(ARRAY, ARRAY) RETURN ARRAY, ARRAY_EXCEPT(ARRAY(ANY), ARRAY(ANY)) RETURN ARRAY(ANY)",the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_FLATTEN,,Y,N,N,1,1,ARRAY_FLATTEN(ARRAY) RETURN ARRAY,the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_GENERATE_RANGE,,Y,N,N,2,3,"ARRAY_GENERATE_RANGE(NUMBER, NUMBER [, NUMBER]) RETURN ARRAY",the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_INSERT,,Y,N,N,3,3,"ARRAY_INSERT(ARRAY, NUMBER, ANY) RETURN ARRAY, ARRAY_INSERT(ARRAY(ANY), NUMBER, ANY) RETURN ARRAY(ANY)",the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_INTERSECTION,,Y,N,N,2,2,"ARRAY_INTERSECTION(ARRAY, ARRAY) RETURN ARRAY, ARRAY_INTERSECTION(ARRAY(ANY), ARRAY(ANY)) RETURN ARRAY(ANY)",the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_MAX,,Y,N,N,1,1,"ARRAY_MAX(ARRAY) RETURN VARIANT, ARRAY_MAX(ARRAY(ANY)) RETURN ANY","the maximum defined element in the array, or NULL",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_MIN,,Y,N,N,1,1,"ARRAY_MIN(ARRAY) RETURN VARIANT, ARRAY_MIN(ARRAY(ANY)) RETURN ANY","the minimum defined element in the array, or NULL",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_POSITION,,Y,N,N,2,2,"ARRAY_POSITION(VARIANT, ARRAY) RETURN NUMBER, ARRAY_POSITION(ANY, ARRAY(ANY)) RETURN NUMBER",Returns the first index position of the element in the array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_PREPEND,,Y,N,N,2,2,"ARRAY_PREPEND(ARRAY, ANY) RETURN ARRAY, ARRAY_PREPEND(ARRAY(ANY), ANY) RETURN ARRAY(ANY)",the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_REMOVE,,Y,N,N,2,2,"ARRAY_REMOVE(ARRAY, VARIANT) RETURN ARRAY, ARRAY_REMOVE(ARRAY(ANY), ANY) RETURN ARRAY(ANY)",the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_REMOVE_AT,,Y,N,N,2,2,"ARRAY_REMOVE_AT(ARRAY, NUMBER) RETURN ARRAY, ARRAY_REMOVE_AT(ARRAY(ANY), NUMBER) RETURN ARRAY(ANY)",the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_SIZE,,Y,N,N,1,1,"ARRAY_SIZE(ARRAY) RETURN NUMBER, ARRAY_SIZE(ARRAY(ANY)) RETURN NUMBER, ARRAY_SIZE(VARIANT) RETURN NUMBER",Returns array size,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_SLICE,,Y,N,N,3,3,"ARRAY_SLICE(ARRAY, NUMBER, NUMBER) RETURN ARRAY, ARRAY_SLICE(ARRAY(ANY), NUMBER, NUMBER) RETURN ARRAY(ANY)",the resulting array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_SORT,,Y,N,N,1,3,"ARRAY_SORT(ARRAY [, BOOLEAN] [, BOOLEAN]) RETURN ARRAY",the sorted array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_TO_STRING,,Y,N,N,2,2,"ARRAY_TO_STRING(ARRAY, VARCHAR) RETURN VARCHAR, ARRAY_TO_STRING(VARIANT, VARCHAR) RETURN VARCHAR",Convert array to a string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_UNION_AGG,,Y,Y,N,1,1,"ARRAY_UNION_AGG(ARRAY) RETURN ARRAY, ARRAY_UNION_AGG(ARRAY(ANY)) RETURN ARRAY(ANY)",output array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ARRAY_UNIQUE_AGG,,Y,Y,N,1,1,ARRAY_UNIQUE_AGG(ANY) RETURN ARRAY,output array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ASCII,,Y,N,N,1,1,ASCII(VARCHAR) RETURN NUMBER,Returns the ascii code of the first character of the string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ASIN,,Y,N,N,1,1,ASIN(FLOAT) RETURN FLOAT,Compute the arcsine of the input expression (returned as radians).,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,ASINH,,Y,N,N,1,1,ASINH(FLOAT) RETURN FLOAT,Compute the inverse hyperbolic sine of the input expression.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_ARRAY,,Y,N,N,1,1,AS_ARRAY(VARIANT) RETURN ARRAY,Use VARIANT value as ARRAY,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_BINARY,,Y,N,N,1,1,AS_BINARY(VARIANT) RETURN BINARY,Use VARIANT value as binary string,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_BOOLEAN,,Y,N,N,1,1,AS_BOOLEAN(VARIANT) RETURN BOOLEAN,Use VARIANT value as Boolean,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_CHAR,,Y,N,N,1,1,AS_CHAR(VARIANT) RETURN VARCHAR,Use VARIANT value as text string,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_DATE,,Y,N,N,1,1,AS_DATE(VARIANT) RETURN DATE,Use VARIANT value as DATE,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_DECIMAL,,Y,N,N,1,3,"AS_DECIMAL(VARIANT [, NUMBER] [, NUMBER]) RETURN NUMBER",Use VARIANT value as decimal fixed-point,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_DOUBLE,,Y,N,N,1,1,AS_DOUBLE(VARIANT) RETURN FLOAT,Use VARIANT value as real,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_INTEGER,,Y,N,N,1,2,"AS_INTEGER(VARIANT [, NUMBER]) RETURN NUMBER",Use VARIANT value as integer,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_NUMBER,,Y,N,N,1,3,"AS_NUMBER(VARIANT [, NUMBER] [, NUMBER]) RETURN NUMBER",Use VARIANT value as as decimal fixed-point,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_OBJECT,,Y,N,N,1,1,AS_OBJECT(VARIANT) RETURN OBJECT,Use VARIANT value as OBJECT,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_REAL,,Y,N,N,1,1,AS_REAL(VARIANT) RETURN FLOAT,Use VARIANT value as real,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_TIME,,Y,N,N,1,1,AS_TIME(VARIANT) RETURN TIME,Use VARIANT value as TIME,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_TIMESTAMP_LTZ,,Y,N,N,1,3,"AS_TIMESTAMP_LTZ(VARIANT [, NUMBER]) RETURN TIMESTAMP_LTZ",Use VARIANT value as TIMESTAMP_LTZ,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_TIMESTAMP_NTZ,,Y,N,N,1,3,"AS_TIMESTAMP_NTZ(VARIANT [, NUMBER]) RETURN TIMESTAMP_NTZ",Use VARIANT value as TIMESTAMP_NTZ,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_TIMESTAMP_TZ,,Y,N,N,1,3,"AS_TIMESTAMP_TZ(VARIANT [, NUMBER]) RETURN TIMESTAMP_TZ",Use VARIANT value as TIMESTAMP_TZ,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,AS_VARCHAR,,Y,N,N,1,1,AS_VARCHAR(VARIANT) RETURN VARCHAR,Use VARIANT value as text sting,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,ATAN,,Y,N,N,1,1,ATAN(FLOAT) RETURN FLOAT,Compute the arctangent of the input expression (returned as radians).,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,ATAN2,,Y,N,N,2,2,"ATAN2(FLOAT, FLOAT) RETURN FLOAT","Compute the angle (in radians) between the x-axis and point (x, y).",,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,ATANH,,Y,N,N,1,1,ATANH(FLOAT) RETURN FLOAT,Compute the inverse hyperbolic tangent of the input expression (as radians).,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,AVG,,Y,Y,Y,1,1,"AVG(NUMBER) RETURN NUMBER, AVG(FLOAT) RETURN FLOAT",Returns the average of the values in a group. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BASE64_DECODE_BINARY,,Y,N,N,1,2,"BASE64_DECODE_BINARY(VARCHAR [, VARCHAR]) RETURN BINARY",return decoded binary,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BASE64_DECODE_STRING,,Y,N,N,1,2,"BASE64_DECODE_STRING(VARCHAR [, VARCHAR]) RETURN VARCHAR",return decoded string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BASE64_ENCODE,,Y,N,N,1,3,"BASE64_ENCODE(VARCHAR [, NUMBER] [, VARCHAR]) RETURN VARCHAR, BASE64_ENCODE(BINARY [, NUMBER] [, VARCHAR]) RETURN VARCHAR",return encoded string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BINARY_AS_STRING,,Y,N,N,1,1,BINARY_AS_STRING(BINARY) RETURN VARCHAR,Returns the input interpreted as a string.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BITAND,,Y,N,N,2,2,"BITAND(NUMBER, NUMBER) RETURN NUMBER",returns result of bitwise AND of integers x and y,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BITANDAGG,,Y,Y,N,1,1,BITANDAGG(NUMBER) RETURN NUMBER,Returns the bitwise AND of a column. Null values are ignored.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BITAND_AGG,,Y,Y,N,1,1,BITAND_AGG(NUMBER) RETURN NUMBER,Returns the bitwise AND of a column. Null values are ignored.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BITCOUNT,,Y,N,N,1,1,BITCOUNT(NUMBER) RETURN NUMBER,returns the number of bits set in integer x,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BITMAP_BIT_POSITION,,Y,N,N,1,2,BITMAP_BIT_POSITION(NUMBER) RETURN NUMBER,relative position in bitmap,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BITMAP_BUCKET_NUMBER,,Y,N,N,1,2,BITMAP_BUCKET_NUMBER(NUMBER) RETURN NUMBER,bucket index of the destination bitmap,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BITMAP_CONSTRUCT_AGG,,Y,Y,N,1,2,BITMAP_CONSTRUCT_AGG(NUMBER) RETURN BINARY,bitmap,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BITMAP_COUNT,,Y,N,N,1,2,BITMAP_COUNT(BINARY) RETURN NUMBER,number of set bits in the bitmap,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BITMAP_OR_AGG,,Y,Y,N,1,2,BITMAP_OR_AGG(BINARY) RETURN BINARY,destination bitmap,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BITNOT,,Y,N,N,1,1,BITNOT(NUMBER) RETURN NUMBER,returns result of bitwise negation of integer x,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BITOR,,Y,N,N,2,2,"BITOR(NUMBER, NUMBER) RETURN NUMBER",returns result of bitwise OR of integers x and y,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BITORAGG,,Y,Y,N,1,1,BITORAGG(NUMBER) RETURN NUMBER,Returns the bitwise OR of a column. Null values are ignored.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BITOR_AGG,,Y,Y,N,1,1,BITOR_AGG(NUMBER) RETURN NUMBER,Returns the bitwise OR of a column. Null values are ignored.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BITSHIFTLEFT,,Y,N,N,2,2,"BITSHIFTLEFT(NUMBER, NUMBER) RETURN NUMBER",returns result of arg1 bit-shifted left by arg2 bits,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BITSHIFTRIGHT,,Y,N,N,2,2,"BITSHIFTRIGHT(NUMBER, NUMBER) RETURN NUMBER",returns result of arg1 bit-shifted right by arg2 bits,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BITXOR,,Y,N,N,2,2,"BITXOR(NUMBER, NUMBER) RETURN NUMBER",returns result of bitwise XOR of integers x and y,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BITXORAGG,,Y,Y,N,1,1,BITXORAGG(NUMBER) RETURN NUMBER,Returns the bitwise XOR of a column. Null values are ignored.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BITXOR_AGG,,Y,Y,N,1,1,BITXOR_AGG(NUMBER) RETURN NUMBER,Returns the bitwise XOR of a column. Null values are ignored.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_AND,,Y,N,N,2,2,"BIT_AND(NUMBER, NUMBER) RETURN NUMBER",returns result of bitwise AND of integers x and y,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_ANDAGG,,Y,Y,N,1,1,BIT_ANDAGG(NUMBER) RETURN NUMBER,Returns the bitwise AND of a column. Null values are ignored.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_AND_AGG,,Y,Y,N,1,1,BIT_AND_AGG(NUMBER) RETURN NUMBER,Returns the bitwise AND of a column. Null values are ignored.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_LENGTH,,Y,N,N,1,1,"BIT_LENGTH(VARCHAR) RETURN NUMBER, BIT_LENGTH(BINARY) RETURN NUMBER",Returns the length of the object in bits,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_NOT,,Y,N,N,1,1,BIT_NOT(NUMBER) RETURN NUMBER,returns result of bitwise negation of integer x,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_OR,,Y,N,N,2,2,"BIT_OR(NUMBER, NUMBER) RETURN NUMBER",returns result of bitwise OR of integers x and y,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_ORAGG,,Y,Y,N,1,1,BIT_ORAGG(NUMBER) RETURN NUMBER,Returns the bitwise OR of a column. Null values are ignored.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_OR_AGG,,Y,Y,N,1,1,BIT_OR_AGG(NUMBER) RETURN NUMBER,Returns the bitwise OR of a column. Null values are ignored.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_SHIFTLEFT,,Y,N,N,2,2,"BIT_SHIFTLEFT(NUMBER, NUMBER) RETURN NUMBER",returns result of arg1 bit-shifted left by arg2 bits,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_SHIFTRIGHT,,Y,N,N,2,2,"BIT_SHIFTRIGHT(NUMBER, NUMBER) RETURN NUMBER",returns result of arg1 bit-shifted right by arg2 bits,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_XOR,,Y,N,N,2,2,"BIT_XOR(NUMBER, NUMBER) RETURN NUMBER",returns result of bitwise XOR of integers x and y,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_XORAGG,,Y,Y,N,1,1,BIT_XORAGG(NUMBER) RETURN NUMBER,Returns the bitwise XOR of a column. Null values are ignored.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BIT_XOR_AGG,,Y,Y,N,1,1,BIT_XOR_AGG(NUMBER) RETURN NUMBER,Returns the bitwise XOR of a column. Null values are ignored.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,BOOLAND,,Y,N,N,2,2,"BOOLAND(NUMBER, NUMBER) RETURN BOOLEAN",returns result of logical (Boolean) AND of x and y,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BOOLAND_AGG,,Y,Y,N,1,1,BOOLAND_AGG(NUMBER) RETURN BOOLEAN,Returns the logical (boolean) AND of a column. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BOOLNOT,,Y,N,N,1,1,BOOLNOT(NUMBER) RETURN BOOLEAN,returns result of logical (Boolean) NOT of x,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BOOLOR,,Y,N,N,2,2,"BOOLOR(NUMBER, NUMBER) RETURN BOOLEAN",returns result of logical (Boolean) OR of x and y,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BOOLOR_AGG,,Y,Y,N,1,1,BOOLOR_AGG(NUMBER) RETURN BOOLEAN,Returns the logical (boolean) OR of a column. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BOOLXOR,,Y,N,N,2,2,"BOOLXOR(NUMBER, NUMBER) RETURN BOOLEAN",returns result of logical (Boolean) XOR of x and y,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,BOOLXOR_AGG,,Y,Y,N,1,1,BOOLXOR_AGG(NUMBER) RETURN BOOLEAN,Returns the logical (boolean) XOR of a column. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CBRT,,Y,N,N,1,1,CBRT(FLOAT) RETURN FLOAT,Compute the cubic root of the input expression.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CEIL,,Y,N,Y,1,2,"CEIL(NUMBER [, NUMBER]) RETURN NUMBER, CEIL(FLOAT [, FLOAT]) RETURN FLOAT",round to the nearest integer not smaller than input,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,CHAR,,Y,N,N,1,1,CHAR(NUMBER) RETURN VARCHAR,Convert an ASCII or Unicode code into a single character,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CHARINDEX,,Y,N,Y,2,3,"CHARINDEX(VARCHAR, VARCHAR [, NUMBER]) RETURN NUMBER, CHARINDEX(BINARY, BINARY [, NUMBER]) RETURN NUMBER","Returns the position of the needle in the haystack, optionally from a given index",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CHECK_JSON,,Y,N,N,1,1,CHECK_JSON(VARCHAR) RETURN VARCHAR,Checks JSON for errors,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CHECK_XML,,Y,N,N,1,2,"CHECK_XML(VARCHAR) RETURN VARCHAR, CHECK_XML(VARCHAR, BOOLEAN) RETURN VARCHAR",Checks XML for errors,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CHR,,Y,N,N,1,1,CHR(NUMBER) RETURN VARCHAR,Convert an ASCII or Unicode code into a single character,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,COALESCE,,Y,N,Y,2,-1,"COALESCE(ANY, ANY) RETURN ANY",returns the first non-null expression among its arguments,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,COMPRESS,,Y,N,N,2,2,"COMPRESS(VARCHAR, VARCHAR) RETURN BINARY, COMPRESS(BINARY, VARCHAR) RETURN BINARY",compressed data (return),,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CONCAT,,Y,N,Y,1,-1,"CONCAT(VARCHAR) RETURN VARCHAR, CONCAT(BINARY) RETURN BINARY","Returns concatenation of the input strings, or null if any one of them is null.",,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,CONCAT_WS,,Y,N,Y,2,-1,"CONCAT_WS(VARCHAR, VARCHAR) RETURN VARCHAR, CONCAT_WS(BINARY, BINARY) RETURN BINARY","Returns concatenation of the input strings with separator, or null if any one of them is null.",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CONDITIONAL_CHANGE_EVENT,,Y,N,N,1,1,CONDITIONAL_CHANGE_EVENT(ANY) RETURN NUMBER,Returns the event window number of this row in the window based on whether the argument expression on the current row differs from that on the previous row ,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,CONDITIONAL_TRUE_EVENT,,Y,N,N,1,1,CONDITIONAL_TRUE_EVENT(BOOLEAN) RETURN NUMBER,Returns the event window number of this row in the window based on the result of the boolean argument expression ,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,CONTAINS,,Y,N,N,2,2,"CONTAINS(VARCHAR, VARCHAR) RETURN BOOLEAN, CONTAINS(BINARY, BINARY) RETURN BOOLEAN",returns TRUE if arg1 constains arg2,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,CORR,,Y,Y,Y,2,2,"CORR(FLOAT, FLOAT) RETURN FLOAT",Returns the correlation coefficient for non-null pairs in a group.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,COS,,Y,N,N,1,1,COS(FLOAT) RETURN FLOAT,Compute the cosine of the input expression (as radians).,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,COSH,,Y,N,N,1,1,COSH(FLOAT) RETURN FLOAT,Compute the hyperbolic cosine of the input expression.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,COT,,Y,N,N,1,1,COT(FLOAT) RETURN FLOAT,Compute the cotangent of the input expression (as radians).,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,COUNT,,Y,Y,Y,1,-1,COUNT(ANY) RETURN NUMBER,Return number of non-null values of a given expression,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,COUNT_IF,,Y,Y,N,1,1,"COUNT_IF(BOOLEAN) RETURN NUMBER, COUNT_IF(BOOLEAN) RETURN FLOAT",Returns a conditional count,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,COUNT_INTERNAL,,Y,Y,N,2,-1,COUNT_INTERNAL(ANY) RETURN NUMBER,Return number of non-null values of a given expression,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,COVAR_POP,,Y,Y,Y,2,2,"COVAR_POP(FLOAT, FLOAT) RETURN FLOAT",Returns the population covariance for non-null pairs in a group.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,COVAR_SAMP,,Y,Y,Y,2,2,"COVAR_SAMP(FLOAT, FLOAT) RETURN FLOAT",Returns the sample covariance for non-null pairs in a group.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CUME_DIST,,Y,N,N,0,0,CUME_DIST() RETURN FLOAT,Returns the cumulative distribution of a row in the window,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_CLIENT,,Y,N,Y,0,0,CURRENT_CLIENT() RETURN VARCHAR,Returns the current client version.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_DATABASE,,Y,N,Y,0,0,CURRENT_DATABASE() RETURN VARCHAR,Returns the current database.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_DATE,,Y,N,Y,0,0,CURRENT_DATE() RETURN DATE,Returns the current date.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_IP_ADDRESS,,Y,N,Y,0,0,CURRENT_IP_ADDRESS() RETURN VARCHAR,Returns the Client Internet Protocol address (IP address) of the current request.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_ORGANIZATION_NAME,,Y,N,N,0,0,CURRENT_ORGANIZATION_NAME() RETURN VARCHAR,Returns the name of the organization the current account belongs to.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_REGION,,Y,N,Y,0,0,CURRENT_REGION() RETURN VARCHAR,Returns the current region name.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_ROLE,,Y,N,Y,0,0,CURRENT_ROLE() RETURN VARCHAR,Returns the currently active role name.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_ROLE_TYPE,,Y,N,Y,0,0,CURRENT_ROLE_TYPE() RETURN VARCHAR,Returns if the current role is of type account or database,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_SCHEMA,,Y,N,Y,0,0,CURRENT_SCHEMA() RETURN VARCHAR,Returns the current schema.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_SCHEMAS,,Y,N,N,0,0,CURRENT_SCHEMAS() RETURN VARCHAR,Returns active search path schemas,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_SECONDARY_ROLES,,Y,N,Y,0,0,CURRENT_SECONDARY_ROLES() RETURN VARCHAR,Returns the currently active secondary roles' names.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_SESSION,,Y,N,N,0,0,CURRENT_SESSION() RETURN VARCHAR,Returns the current session.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_STATEMENT,,Y,N,N,0,0,CURRENT_STATEMENT() RETURN VARCHAR,Returns the text of the currently executing statement.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_TIME,,Y,N,Y,0,1,CURRENT_TIME( [NUMBER]) RETURN TIME,Returns the current time.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_TIMESTAMP,,Y,N,Y,0,1,CURRENT_TIMESTAMP( [NUMBER]) RETURN TIMESTAMP_LTZ,Returns the current timestamp.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_TRANSACTION,,Y,N,N,0,0,CURRENT_TRANSACTION() RETURN NUMBER,Returns the transaction id of an open transaction in the current session or scope.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_USER,,Y,N,Y,0,0,CURRENT_USER() RETURN VARCHAR,Returns the current user name.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_VERSION,,Y,N,N,0,0,CURRENT_VERSION() RETURN VARCHAR,Returns the current software version (major.minor.patch).,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,CURRENT_WAREHOUSE,,Y,N,Y,0,0,CURRENT_WAREHOUSE() RETURN VARCHAR,Returns the warehouse currently in use.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DATE,,Y,N,N,1,1,DATE(TIMESTAMP_LTZ) RETURN DATE,Converts the timestamp argument to a date,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DATE,,Y,N,N,1,1,DATE(TIMESTAMP_NTZ) RETURN DATE,Converts the timestamp argument to a date,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DATE,,Y,N,N,1,1,DATE(TIMESTAMP_TZ) RETURN DATE,Converts the timestamp argument to a date,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DATE,,Y,N,N,1,1,DATE(VARCHAR) RETURN DATE,Converts the string argument to a date,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DATE,,Y,N,N,2,2,"DATE(VARCHAR, VARCHAR) RETURN DATE",Converts the string argument to a date according to a format argument,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DATEADD,,Y,N,N,3,3,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DATEDIFF,,Y,N,N,3,3,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DATEFROMPARTS,,Y,N,Y,3,3,"DATEFROMPARTS(NUMBER, NUMBER, NUMBER) RETURN DATE",Construct a date from individual components,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DATE_FROM_PARTS,,Y,N,Y,3,3,"DATE_FROM_PARTS(NUMBER, NUMBER, NUMBER) RETURN DATE",Construct a date from individual components,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DATE_PART,,Y,N,N,2,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DATE_TRUNC,,Y,N,N,2,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DAY,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DAYOFMONTH,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DAYOFWEEK,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DAYOFWEEKISO,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DAYOFYEAR,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DECODE,,Y,N,Y,3,-1,"DECODE(ANY, ANY, ANY) RETURN ANY",compare an expression to search values and returns the matching one,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DECOMPRESS_BINARY,,Y,N,N,2,2,"DECOMPRESS_BINARY(BINARY, VARCHAR) RETURN BINARY",decompressed binary (return),,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DECOMPRESS_STRING,,Y,N,N,2,2,"DECOMPRESS_STRING(BINARY, VARCHAR) RETURN VARCHAR",decompressed string (return),,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DECRYPT,,Y,N,N,2,4,"DECRYPT(BINARY, VARCHAR [, BINARY] [, VARCHAR]) RETURN BINARY, DECRYPT(BINARY, VARCHAR [, VARCHAR] [, VARCHAR]) RETURN BINARY",decrypted binary string (return),,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DECRYPT_RAW,,Y,N,N,2,6,"DECRYPT_RAW(BINARY, BINARY [, BINARY] [, BINARY] [, VARCHAR] [, BINARY]) RETURN BINARY",decrypted binary string (return),,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DEGREES,,Y,N,N,1,1,DEGREES(FLOAT) RETURN FLOAT,convert r (radians) to degrees.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,DENSE_RANK,,Y,N,N,0,0,DENSE_RANK() RETURN NUMBER,Returns the dense rank of a row in the window,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,DIV,,Y,N,N,2,-1,"DIV(NUMBER, NUMBER) RETURN NUMBER, DIV(FLOAT, FLOAT) RETURN FLOAT",Divides two numbers,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,DIV0,,Y,N,N,2,-1,"DIV0(NUMBER, NUMBER) RETURN NUMBER, DIV0(FLOAT, FLOAT) RETURN FLOAT",Divides two numbers; returns 0 if divisor is 0,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,DIV0NULL,,Y,N,N,2,2,"DIV0NULL(NUMBER, NUMBER) RETURN NUMBER, DIV0NULL(FLOAT, FLOAT) RETURN FLOAT",Divides two numbers; returns 0 if divisor is 0 or null,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,EDITDISTANCE,,Y,N,Y,2,3,"EDITDISTANCE(VARCHAR, VARCHAR [, NUMBER]) RETURN NUMBER",Returns the Levenshtein edit distance between two strings.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,ENCRYPT,,Y,N,N,2,4,"ENCRYPT(BINARY, VARCHAR [, BINARY] [, VARCHAR]) RETURN BINARY, ENCRYPT(VARCHAR, VARCHAR [, BINARY] [, VARCHAR]) RETURN BINARY, ENCRYPT(BINARY, VARCHAR [, VARCHAR] [, VARCHAR]) RETURN BINARY, ENCRYPT(VARCHAR, VARCHAR [, VARCHAR] [, VARCHAR]) RETURN BINARY",encrypted binary string including IV/nonce and AEAD tag (return),,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ENCRYPT_RAW,,Y,N,N,2,6,"ENCRYPT_RAW(BINARY, BINARY [, BINARY] [, BINARY] [, VARCHAR]) RETURN VARIANT",variant containing the encrypted binary string and additional data (return),,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ENDSWITH,,Y,N,N,2,2,"ENDSWITH(VARCHAR, VARCHAR) RETURN BOOLEAN, ENDSWITH(BINARY, BINARY) RETURN BOOLEAN",returns TRUE if arg1 ends with arg2,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,EQUAL_NULL,,Y,N,N,2,2,"EQUAL_NULL(ANY, ANY) RETURN BOOLEAN, EQUAL_NULL(ROW(ANY), ROW(ANY)) RETURN BOOLEAN","Checks if two values are equal, with NULL=NULL semantic",,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,EXP,,Y,N,Y,1,1,EXP(FLOAT) RETURN FLOAT,returns e raised to the x'th power,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,EXTRACT,,Y,N,N,2,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,FACTORIAL,,Y,N,N,1,1,FACTORIAL(NUMBER) RETURN NUMBER,Factorial of f,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,FIRST_VALUE,,Y,Y,N,1,1,FIRST_VALUE(ANY) RETURN ANY,Returns the first value of a column,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,FLOOR,,Y,N,Y,1,2,"FLOOR(NUMBER [, NUMBER]) RETURN NUMBER, FLOOR(FLOAT [, FLOAT]) RETURN FLOAT",round to the nearest integer not greater than input,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,GENERATE_COLUMN_DESCRIPTION,,Y,N,N,2,2,"GENERATE_COLUMN_DESCRIPTION(ARRAY, VARCHAR) RETURN VARCHAR",parse the result from INFER_SCHEMA and generate a copy-able column description,,N,N,,N,JAVASCRIPT,N
2012-08-01T00:00:00-07:00,GETBIT,,Y,N,N,2,2,"GETBIT(NUMBER, NUMBER) RETURN NUMBER",returns result of the bit of base in specific bit index,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,GETDATE,,Y,N,N,0,0,GETDATE() RETURN TIMESTAMP_LTZ,Returns the current timestamp,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,GET_DDL,,Y,N,N,2,3,"GET_DDL(VARCHAR, VARCHAR [, BOOLEAN]) RETURN VARCHAR, GET_DDL(VARCHAR, NUMBER [, BOOLEAN]) RETURN VARCHAR",DDL used to create the object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,GET_IGNORE_CASE,,Y,N,N,2,2,"GET_IGNORE_CASE(VARIANT, VARCHAR) RETURN VARIANT, GET_IGNORE_CASE(VARIANT, VARCHAR) RETURN OBJECT, GET_IGNORE_CASE(OBJECT(placeholder ANY), VARCHAR) RETURN ANY, GET_IGNORE_CASE(map(ANY, ANY), ANY) RETURN ANY",Get VARIANT element value from an array or object with path name,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,GET_PATH,,Y,N,N,2,2,"GET_PATH(VARIANT, VARCHAR) RETURN VARIANT, GET_PATH(OBJECT, VARCHAR) RETURN VARIANT, GET_PATH(ARRAY, VARCHAR) RETURN VARIANT, GET_PATH(ARRAY(ANY), VARCHAR) RETURN ANY, GET_PATH(OBJECT(placeholder ANY), VARCHAR) RETURN ANY, GET_PATH(map(ANY, ANY), VARCHAR) RETURN ANY",Get VARIANT element value from an array or object with path name,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,GET_QUERY_STATS,,Y,N,N,1,2,"GET_QUERY_STATS(VARCHAR [, NUMBER]) RETURN VARIANT",Returns query stats,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,GREATEST,,Y,N,N,1,-1,GREATEST(ANY) RETURN ANY,returns the largest value from a list of expressions,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,GREATEST_IGNORE_NULLS,,Y,N,N,1,-1,GREATEST_IGNORE_NULLS(ANY) RETURN ANY,returns the largest value from a list of expressions,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,GROUPING_ID,,Y,N,N,1,-1,GROUPING_ID(ANY) RETURN NUMBER,Returns grouping bit-vector,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_CELL_TO_BOUNDARY,,Y,N,N,1,1,H3_CELL_TO_BOUNDARY(NUMBER) RETURN GEOGRAPHY,Returns a polygon containing the h3 integer cell boundaries,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_CELL_TO_BOUNDARY,,Y,N,N,1,1,H3_CELL_TO_BOUNDARY(VARCHAR) RETURN GEOGRAPHY,Returns a polygon containing the h3 string cell boundaries,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_CELL_TO_CHILDREN,,Y,N,N,2,2,"H3_CELL_TO_CHILDREN(NUMBER, NUMBER) RETURN ARRAY",Returns the H3 children cells as integers for a given H3 index,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_CELL_TO_CHILDREN_STRING,,Y,N,N,2,2,"H3_CELL_TO_CHILDREN_STRING(VARCHAR, NUMBER) RETURN ARRAY",Returns the H3 children cells as strings for a given H3 index,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_CELL_TO_PARENT,,Y,N,N,2,2,"H3_CELL_TO_PARENT(NUMBER, NUMBER) RETURN NUMBER",Returns the H3 parent cell as an integer for a given H3 index,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_CELL_TO_PARENT,,Y,N,N,2,2,"H3_CELL_TO_PARENT(VARCHAR, NUMBER) RETURN VARCHAR",Returns the H3 parent cell as a string for a given H3 index,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_CELL_TO_POINT,,Y,N,N,1,1,H3_CELL_TO_POINT(NUMBER) RETURN GEOGRAPHY,Returns a point (geography) corresponding to the center of the h3 integer cell passed,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_CELL_TO_POINT,,Y,N,N,1,1,H3_CELL_TO_POINT(VARCHAR) RETURN GEOGRAPHY,Returns a point (geography) corresponding to the center of the h3 string cell passed,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_COVERAGE,,Y,N,N,2,2,"H3_COVERAGE(GEOGRAPHY, NUMBER) RETURN ARRAY",Returns the full spherical based covering of H3 cells as integers for any geography type,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_COVERAGE_STRINGS,,Y,N,N,2,2,"H3_COVERAGE_STRINGS(GEOGRAPHY, NUMBER) RETURN ARRAY",Returns the full spherical based covering of H3 cells as strings for any geography type,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_GET_RESOLUTION,,Y,N,N,1,1,H3_GET_RESOLUTION(NUMBER) RETURN NUMBER,Returns the cell resolution for a given H3 integer cell,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_GET_RESOLUTION,,Y,N,N,1,1,H3_GET_RESOLUTION(VARCHAR) RETURN NUMBER,Returns the cell resolution for a given H3 string cell,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_GRID_DISK,,Y,N,N,2,2,"H3_GRID_DISK(NUMBER, NUMBER) RETURN ARRAY",Returns all H3 cells that are at most k steps away from the input cell,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_GRID_DISK,,Y,N,N,2,2,"H3_GRID_DISK(VARCHAR, NUMBER) RETURN ARRAY",Returns all H3 cells that are at most k steps away from the input cell,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_GRID_DISTANCE,,Y,N,N,2,2,"H3_GRID_DISTANCE(NUMBER, NUMBER) RETURN NUMBER",Returns the number of H3 cells that are betweem two input cells,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_GRID_DISTANCE,,Y,N,N,2,2,"H3_GRID_DISTANCE(VARCHAR, VARCHAR) RETURN NUMBER",Returns the number of H3 cells that are betweem two input cells,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_GRID_PATH,,Y,N,N,2,2,"H3_GRID_PATH(NUMBER, NUMBER) RETURN ARRAY",Returns all H3 cells that are along the straight line connecting both cells,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_GRID_PATH,,Y,N,N,2,2,"H3_GRID_PATH(VARCHAR, VARCHAR) RETURN ARRAY",Returns all H3 cells that are along the straight line connecting both cells,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_INT_TO_STRING,,Y,N,N,1,1,H3_INT_TO_STRING(NUMBER) RETURN VARCHAR,Returns the H3 cell formatted as a string given its integer representation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_LATLNG_TO_CELL,,Y,N,N,3,3,"H3_LATLNG_TO_CELL(FLOAT, FLOAT, NUMBER) RETURN NUMBER",Returns an H3 index as an integer that corresponds to a given point (lat/lng) and resolution,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_LATLNG_TO_CELL_STRING,,Y,N,N,3,3,"H3_LATLNG_TO_CELL_STRING(FLOAT, FLOAT, NUMBER) RETURN VARCHAR",Returns an H3 index as a string that corresponds to a given point (lat/lng) and resolution,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_POINT_TO_CELL,,Y,N,N,2,2,"H3_POINT_TO_CELL(GEOGRAPHY, NUMBER) RETURN NUMBER",Returns an H3 integer cell that corresponds to a given point (geography) and resolution,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_POINT_TO_CELL_STRING,,Y,N,N,2,2,"H3_POINT_TO_CELL_STRING(GEOGRAPHY, NUMBER) RETURN VARCHAR",Returns an H3 string cell that corresponds to a given point (geography) and resolution,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_POLYGON_TO_CELLS,,Y,N,N,2,2,"H3_POLYGON_TO_CELLS(GEOGRAPHY, NUMBER) RETURN ARRAY",Returns the planar centroid based covering of H3 cells as integers for a polygon/multipolygon,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_POLYGON_TO_CELLS_STRINGS,,Y,N,N,2,2,"H3_POLYGON_TO_CELLS_STRINGS(GEOGRAPHY, NUMBER) RETURN ARRAY",Returns the planar centroid based covering of H3 cells as strings for a polygon/multipolygon,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,H3_STRING_TO_INT,,Y,N,N,1,1,H3_STRING_TO_INT(VARCHAR) RETURN NUMBER,Returns the H3 cell formatted as an integer given its string representation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HASH,,Y,N,N,1,-1,HASH(ANY) RETURN NUMBER,hash value,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HASH_AGG,,Y,Y,N,1,-1,HASH_AGG(ANY) RETURN NUMBER,aggregate hash value,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HAVERSINE,,Y,N,N,4,4,"HAVERSINE(FLOAT, FLOAT, FLOAT, FLOAT) RETURN FLOAT","Calculate great circle distance (in km) from two (lat, lon) locations (degrees).",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HEX_DECODE_BINARY,,Y,N,N,1,1,HEX_DECODE_BINARY(VARCHAR) RETURN BINARY,return decoded binary,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HEX_DECODE_STRING,,Y,N,N,1,1,HEX_DECODE_STRING(VARCHAR) RETURN VARCHAR,return decoded string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HEX_ENCODE,,Y,N,N,1,2,"HEX_ENCODE(VARCHAR [, NUMBER]) RETURN VARCHAR, HEX_ENCODE(BINARY [, NUMBER]) RETURN VARCHAR",return encoded string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HLL,,Y,Y,N,1,-1,HLL(ANY) RETURN NUMBER,approximate distinct row count,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HLL_ACCUMULATE,,Y,Y,N,1,-1,HLL_ACCUMULATE(ANY) RETURN BINARY,HyperLogLog state,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HLL_COMBINE,,Y,Y,N,1,1,HLL_COMBINE(BINARY) RETURN BINARY,combined HyperLogLog state,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HLL_ESTIMATE,,Y,N,N,1,1,HLL_ESTIMATE(BINARY) RETURN NUMBER,approximate distinct row count,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HLL_EXPORT,,Y,N,N,1,1,HLL_EXPORT(BINARY) RETURN OBJECT,HyperLogLog state as a compound OBJECT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HLL_IMPORT,,Y,N,N,1,1,HLL_IMPORT(OBJECT) RETURN BINARY,HyperLogLog state in binary format,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,HOUR,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ILIKE,,Y,N,N,2,3,"ILIKE(VARCHAR, VARCHAR [, VARCHAR]) RETURN BOOLEAN",returns TRUE if subject ILIKE pattern,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ILIKE_ANY,,Y,N,N,3,-1,"ILIKE_ANY(VARCHAR, VARCHAR, VARCHAR) RETURN BOOLEAN",returns TRUE if subject ILIKE any of the patterns,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,INITCAP,,Y,N,N,1,2,"INITCAP(VARCHAR [, VARCHAR]) RETURN VARCHAR",return string with all the initial letter of each word is LOWERcase.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,INSERT,,Y,N,N,4,4,"INSERT(VARCHAR, NUMBER, NUMBER, VARCHAR) RETURN VARCHAR",Returns the first string with a substring at the given position and length replaced with the second string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,INVOKER_ROLE,,Y,N,Y,0,0,INVOKER_ROLE() RETURN VARCHAR,Returns the invoker role,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,INVOKER_SHARE,,Y,N,Y,0,0,INVOKER_SHARE() RETURN VARCHAR,Returns the invoker role,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_APPLICATION_ROLE_IN_SESSION,,Y,N,Y,1,1,IS_APPLICATION_ROLE_IN_SESSION(VARCHAR) RETURN BOOLEAN,Returns true if the specified application role is in the current role hierarchy,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_ARRAY,,Y,N,N,1,1,IS_ARRAY(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is an array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_BINARY,,Y,N,N,1,1,IS_BINARY(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is a binary string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_BOOLEAN,,Y,N,N,1,1,IS_BOOLEAN(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is Boolean,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_CHAR,,Y,N,N,1,1,IS_CHAR(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is a text string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_DATABASE_ROLE_IN_SESSION,,Y,N,Y,1,1,IS_DATABASE_ROLE_IN_SESSION(VARCHAR) RETURN BOOLEAN,Return true if the db role is in current role hierarchy,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_DATE,,Y,N,N,1,1,IS_DATE(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is a DATE,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_DATE_VALUE,,Y,N,N,1,1,IS_DATE_VALUE(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is a DATE,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_DECIMAL,,Y,N,N,1,1,IS_DECIMAL(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is a decimal fixed-point number,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_DOUBLE,,Y,N,N,1,1,IS_DOUBLE(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is a real number,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_GRANTED_TO_INVOKER_ROLE,,Y,N,Y,1,1,IS_GRANTED_TO_INVOKER_ROLE(VARCHAR) RETURN BOOLEAN,Returns true if the arg is in invoker_role's hierarchy,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_INTEGER,,Y,N,N,1,1,IS_INTEGER(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is integer,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_NULL_VALUE,,Y,N,N,1,1,IS_NULL_VALUE(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is null,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_OBJECT,,Y,N,N,1,1,IS_OBJECT(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is an object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_REAL,,Y,N,N,1,1,IS_REAL(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is a real number,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_ROLE_IN_SESSION,,Y,N,Y,1,1,IS_ROLE_IN_SESSION(VARCHAR) RETURN BOOLEAN,Return true if in current hierarchy,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_TIME,,Y,N,N,1,1,IS_TIME(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is a TIME,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_TIMESTAMP_LTZ,,Y,N,N,1,1,IS_TIMESTAMP_LTZ(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is a TIMESTAMP_LTZ,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_TIMESTAMP_NTZ,,Y,N,N,1,1,IS_TIMESTAMP_NTZ(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is a TIMESTAMP_NTZ,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_TIMESTAMP_TZ,,Y,N,N,1,1,IS_TIMESTAMP_TZ(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is a TIMESTAMP_TZ,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,IS_VARCHAR,,Y,N,N,1,1,IS_VARCHAR(VARIANT) RETURN BOOLEAN,Returns true if VARIANT value is a text string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,JAROWINKLER_SIMILARITY,,Y,N,Y,2,2,"JAROWINKLER_SIMILARITY(VARCHAR, VARCHAR) RETURN NUMBER",Returns the Jaro-Winkler similarity metric between two strings.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,JSON_EXTRACT_PATH_TEXT,,Y,N,N,2,2,"JSON_EXTRACT_PATH_TEXT(VARCHAR, VARCHAR) RETURN VARCHAR",Parses the first argument as a JSON and returns the value of the element pointed to by the second argument,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,KURTOSIS,,Y,Y,Y,1,1,"KURTOSIS(NUMBER) RETURN FLOAT, KURTOSIS(FLOAT) RETURN FLOAT",Returns the sample kurtosis of the values in a group. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LAG,,Y,N,N,1,3,"LAG(ANY [, NUMBER] [, ANY]) RETURN ANY",Returns the value of an expression at the specified offset row,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,LAST_DAY,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LAST_QUERY_ID,,Y,N,N,0,1,LAST_QUERY_ID( [NUMBER]) RETURN VARCHAR,Returns the id of the last executed statement in the current session.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LAST_TRANSACTION,,Y,N,N,0,0,LAST_TRANSACTION() RETURN NUMBER,Returns the transaction id of the last committed or rolled back transaction in the current session.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LAST_VALUE,,Y,Y,N,1,1,LAST_VALUE(ANY) RETURN ANY,Returns the last value of a column,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,LEAD,,Y,N,N,1,3,"LEAD(ANY [, NUMBER] [, ANY]) RETURN ANY",Returns the value of an expression at the specified offset row,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,LEAST,,Y,N,N,1,-1,LEAST(ANY) RETURN ANY,returns the smallest value from a list of expressions,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,LEAST_IGNORE_NULLS,,Y,N,N,1,-1,LEAST_IGNORE_NULLS(ANY) RETURN ANY,returns the smallest value from a list of expressions,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,LEFT,,Y,N,N,2,2,"LEFT(VARCHAR, NUMBER) RETURN VARCHAR",Returns leftmost N characters of the input string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LEN,,Y,N,N,1,1,LEN(VARCHAR) RETURN NUMBER,Returns length of string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LEN,,Y,N,N,1,1,LEN(BINARY) RETURN NUMBER,Returns length of binary input,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LENGTH,,Y,N,N,1,1,"LENGTH(VARCHAR) RETURN NUMBER, LENGTH(BINARY) RETURN NUMBER",Returns the length of the string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LIKE,,Y,N,Y,2,3,"LIKE(VARCHAR, VARCHAR [, VARCHAR]) RETURN BOOLEAN, LIKE(ROW(ANY), ROW(ANY) [, VARCHAR]) RETURN BOOLEAN",returns TRUE if subject LIKE pattern,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LIKE_ALL,,Y,N,N,3,-1,"LIKE_ALL(VARCHAR, VARCHAR, VARCHAR) RETURN BOOLEAN",returns TRUE if subject LIKE all of the patterns,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LIKE_ANY,,Y,N,N,3,-1,"LIKE_ANY(VARCHAR, VARCHAR, VARCHAR) RETURN BOOLEAN",returns TRUE if subject LIKE any of the patterns,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LISTAGG,,Y,Y,N,1,2,"LISTAGG(VARCHAR [, VARCHAR]) RETURN VARCHAR",output string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LN,,Y,N,Y,1,1,LN(FLOAT) RETURN FLOAT,returns the natural logarithm of a,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LOCALTIME,,Y,N,Y,0,1,LOCALTIME( [NUMBER]) RETURN TIME,Returns the current time.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LOCALTIMESTAMP,,Y,N,Y,0,1,LOCALTIMESTAMP( [NUMBER]) RETURN TIMESTAMP_LTZ,Returns the current timestamp.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LOG,,Y,N,Y,2,2,"LOG(FLOAT, FLOAT) RETURN FLOAT",returns the logarithm base b of a,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LOWER,,Y,N,N,1,1,LOWER(VARCHAR) RETURN VARCHAR,return string with all characters in lowercase,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,LPAD,,Y,N,N,2,3,"LPAD(VARCHAR, NUMBER [, VARCHAR]) RETURN VARCHAR, LPAD(BINARY, NUMBER, BINARY) RETURN BINARY",padded result string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,LTRIM,,Y,N,N,1,2,"LTRIM(VARCHAR [, VARCHAR]) RETURN VARCHAR",return string trimmed from left,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,MAX,,Y,Y,Y,1,1,MAX(ANY) RETURN ANY,Returns the maximum of a column,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,MD5,,Y,N,N,1,1,"MD5(VARCHAR) RETURN VARCHAR, MD5(BINARY) RETURN VARCHAR",Hex-encoded MD5 digest,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,MD5_BINARY,,Y,N,N,1,1,"MD5_BINARY(VARCHAR) RETURN BINARY, MD5_BINARY(BINARY) RETURN BINARY",Binary MD5 digest,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,MD5_HEX,,Y,N,N,1,1,"MD5_HEX(VARCHAR) RETURN VARCHAR, MD5_HEX(BINARY) RETURN VARCHAR",Hex-encoded MD5 digest,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,MD5_NUMBER,,Y,N,N,1,1,"MD5_NUMBER(VARCHAR) RETURN NUMBER, MD5_NUMBER(BINARY) RETURN NUMBER",Integral MD5 digest,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,MD5_NUMBER_LOWER64,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,MD5_NUMBER_UPPER64,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,MEDIAN,,Y,Y,N,1,1,MEDIAN( [NUMBER]) RETURN NUMBER,value of sort key at specified percentile,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,MIN,,Y,Y,Y,1,1,MIN(ANY) RETURN ANY,Returns the minimum of a column,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,MINHASH,,Y,Y,N,2,-1,"MINHASH(NUMBER, ANY) RETURN VARIANT",Minhash state including an array of k (first input arg) minimum hash values,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,MINHASH_COMBINE,,Y,Y,N,1,1,MINHASH_COMBINE(VARIANT) RETURN VARIANT,Combined result of two (or more) minhash states,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,MINUTE,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,MOD,,Y,N,N,2,2,"MOD(NUMBER, NUMBER) RETURN NUMBER, MOD(FLOAT, FLOAT) RETURN FLOAT",Computes modulo of two numbers,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,MODE,,Y,Y,N,1,1,MODE(ANY) RETURN ANY,Returns the most frequent item of a column,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,MONTH,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,MONTHS_BETWEEN,,Y,N,N,2,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,NEGATE,,Y,N,Y,1,1,"NEGATE(NUMBER) RETURN NUMBER, NEGATE(FLOAT) RETURN FLOAT",returns the negative value of its input argument.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,NORMAL,,Y,N,N,2,3,"NORMAL(FLOAT, FLOAT, NUMBER) RETURN FLOAT",Returns a normal distribution,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,NORMALIZE,,Y,N,N,3,3,"NORMALIZE(NUMBER, NUMBER, NUMBER) RETURN FLOAT, NORMALIZE(FLOAT, FLOAT, FLOAT) RETURN FLOAT, NORMALIZE(VARCHAR, NUMBER, NUMBER) RETURN FLOAT, NORMALIZE(TIME, TIME, TIME) RETURN FLOAT, NORMALIZE(TIMESTAMP_LTZ, TIMESTAMP_LTZ, TIMESTAMP_LTZ) RETURN FLOAT, NORMALIZE(DATE, DATE, DATE) RETURN FLOAT",normalized value,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,NOT,,Y,N,Y,1,1,NOT(BOOLEAN) RETURN BOOLEAN,"returns TRUE if input is FALSE, FALSE otherwise",,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,NTH_VALUE,,Y,N,N,2,2,"NTH_VALUE(ANY, NUMBER) RETURN ANY",Returns the first value of a column,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,NTILE,,Y,N,N,1,1,NTILE(NUMBER) RETURN NUMBER,Number of groups (ntiles) per window,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,NULLIFZERO,,Y,N,N,1,1,"NULLIFZERO(NUMBER) RETURN NUMBER, NULLIFZERO(FLOAT) RETURN FLOAT","Returns the 1st input, with values equal to 0 replaced with NULL",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,NVL,,Y,N,Y,2,2,"NVL(ANY, ANY) RETURN ANY","Returns second expression if the first expression is NULL, the first expression otherwise.",,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,NVL2,,Y,N,N,3,3,"NVL2(ANY, ANY, ANY) RETURN ANY",Returns second expression if the first expression is NOT NULL. Returns the third expression otherwise.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,OBJECTAGG,,Y,Y,N,2,2,"OBJECTAGG(VARCHAR, VARIANT) RETURN OBJECT",output object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,OBJECT_AGG,,Y,Y,N,2,2,"OBJECT_AGG(VARCHAR, VARIANT) RETURN OBJECT",output object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,OBJECT_CONSTRUCT_KEEP_NULL,,Y,N,N,0,-1,OBJECT_CONSTRUCT_KEEP_NULL(ANY) RETURN OBJECT,the resulting object with null value,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,OBJECT_DELETE,,Y,N,N,2,-1,"OBJECT_DELETE(OBJECT, VARCHAR) RETURN OBJECT, OBJECT_DELETE(OBJECT(placeholder ANY), VARCHAR) RETURN OBJECT(placeholder ANY)",the resulting OBJECT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,OBJECT_INSERT,,Y,N,N,3,4,"OBJECT_INSERT(OBJECT, VARCHAR, ANY [, BOOLEAN]) RETURN OBJECT, OBJECT_INSERT(OBJECT(placeholder ANY), VARCHAR, ANY [, BOOLEAN]) RETURN OBJECT(placeholder ANY)",the resulting OBJECT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,OBJECT_KEYS,,Y,N,N,1,1,"OBJECT_KEYS(OBJECT) RETURN ARRAY, OBJECT_KEYS(OBJECT(placeholder ANY)) RETURN ARRAY(VARCHAR NOT NULL)",the resulting ARRAY,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,OBJECT_PICK,,Y,N,N,2,-1,"OBJECT_PICK(OBJECT, VARCHAR) RETURN OBJECT, OBJECT_PICK(OBJECT, ARRAY) RETURN OBJECT, OBJECT_PICK(OBJECT(placeholder ANY), VARCHAR) RETURN OBJECT(placeholder ANY)",the resulting OBJECT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,OCTET_LENGTH,,Y,N,N,1,1,"OCTET_LENGTH(VARCHAR) RETURN NUMBER, OCTET_LENGTH(BINARY) RETURN NUMBER",Returns the length of the string in bytes,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,PARSE_IP,,Y,N,N,2,3,"PARSE_IP(VARCHAR, VARCHAR [, NUMBER]) RETURN OBJECT",Returns an object with all the components of the IP,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,PARSE_JSON,,Y,N,N,1,1,PARSE_JSON(VARCHAR) RETURN VARIANT,Parses string as a JSON document,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,PARSE_URL,,Y,N,N,1,2,"PARSE_URL(VARCHAR [, NUMBER]) RETURN OBJECT",Returns an object with all the components of the URL,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,PARSE_XML,,Y,N,N,1,2,"PARSE_XML(VARCHAR) RETURN OBJECT, PARSE_XML(VARCHAR, BOOLEAN) RETURN OBJECT",Parses string as an XML document,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,PERCENTILE_CONT,,Y,Y,N,1,1,PERCENTILE_CONT( [NUMBER]) RETURN FLOAT,value of sort key at specified percentile,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,PERCENTILE_DISC,,Y,Y,N,1,1,PERCENTILE_DISC( [NUMBER]) RETURN NUMBER,value of sort key at specified percentile,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,PERCENT_RANK,,Y,N,N,0,0,PERCENT_RANK() RETURN FLOAT,Returns the percent rank of a row in the window,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,PI,,Y,N,N,0,0,PI() RETURN FLOAT,Returns the constant pi.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,POSITION,,Y,N,Y,2,3,"POSITION(VARCHAR, VARCHAR [, NUMBER]) RETURN NUMBER, POSITION(BINARY, BINARY [, NUMBER]) RETURN NUMBER","Returns the position of the needle in the haystack, optionally from a given index",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,POW,,Y,N,Y,2,2,"POW(FLOAT, FLOAT) RETURN FLOAT",returns x raised to the y'th power,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,POWER,,Y,N,Y,2,2,"POWER(FLOAT, FLOAT) RETURN FLOAT",returns x raised to the y'th power,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,PROJECTION_CONSTRAINT,,Y,N,Y,1,1,PROJECTION_CONSTRAINT(BOOLEAN) RETURN BOOLEAN,Returns the projection constraint,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,QUARTER,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,RADIANS,,Y,N,N,1,1,RADIANS(FLOAT) RETURN FLOAT,convert d (degrees) to radians.,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,RANDOM,,Y,N,N,0,1,RANDOM( [NUMBER]) RETURN NUMBER,returns a random number sequence,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,RANDSTR,,Y,N,N,2,2,"RANDSTR(NUMBER, NUMBER) RETURN VARCHAR",Returns a random string of alphanumeric characters,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,RANK,,Y,N,N,0,0,RANK() RETURN NUMBER,Returns the rank of a row in the window,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,RATIO_TO_REPORT,,Y,N,N,1,2,"RATIO_TO_REPORT(NUMBER [, NUMBER]) RETURN NUMBER, RATIO_TO_REPORT(FLOAT [, NUMBER]) RETURN FLOAT",Returns a cumulative ratio_to_report of a column,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,REGEXP,,Y,N,N,2,3,"REGEXP(VARCHAR, VARCHAR [, VARCHAR]) RETURN BOOLEAN",returns TRUE if subject RLIKE pattern,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGEXP_COUNT,,Y,N,N,2,4,"REGEXP_COUNT(VARCHAR, VARCHAR [, NUMBER] [, VARCHAR]) RETURN NUMBER",returns number of matches of regular expression pattern in subject,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGEXP_EXTRACT_ALL,,Y,N,N,2,6,"REGEXP_EXTRACT_ALL(VARCHAR, VARCHAR [, NUMBER] [, NUMBER] [, VARCHAR] [, NUMBER]) RETURN ARRAY",returns all substring in subject which matches the regular expression pattern,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGEXP_INSTR,,Y,N,N,2,7,"REGEXP_INSTR(VARCHAR, VARCHAR [, NUMBER] [, NUMBER] [, NUMBER] [, VARCHAR] [, NUMBER]) RETURN NUMBER",returns position at which the subject matches the regular expression pattern,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,REGEXP_LIKE,,Y,N,N,2,3,"REGEXP_LIKE(VARCHAR, VARCHAR [, VARCHAR]) RETURN BOOLEAN",returns TRUE if subject RLIKE pattern,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGEXP_REPLACE,,Y,N,N,2,6,"REGEXP_REPLACE(VARCHAR, VARCHAR [, VARCHAR] [, NUMBER] [, NUMBER] [, VARCHAR]) RETURN VARCHAR",replaces substring in subject matching a regular expression pattern,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,REGEXP_SUBSTR,,Y,N,N,2,6,"REGEXP_SUBSTR(VARCHAR, VARCHAR [, NUMBER] [, NUMBER] [, VARCHAR] [, NUMBER]) RETURN VARCHAR",returns substring in subject which matches the regular expression pattern,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,REGEXP_SUBSTR_ALL,,Y,N,N,2,6,"REGEXP_SUBSTR_ALL(VARCHAR, VARCHAR [, NUMBER] [, NUMBER] [, VARCHAR] [, NUMBER]) RETURN ARRAY",returns all substring in subject which matches the regular expression pattern,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGR_AVGX,,Y,Y,Y,2,2,"REGR_AVGX(FLOAT, FLOAT) RETURN FLOAT",Returns the average of the independent variable (2nd parameter) for non-null pairs.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGR_AVGY,,Y,Y,Y,2,2,"REGR_AVGY(FLOAT, FLOAT) RETURN FLOAT",Returns the average of the dependent variable (1st parameter) for non-null pairs.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGR_COUNT,,Y,Y,Y,2,2,"REGR_COUNT(FLOAT, FLOAT) RETURN FLOAT",Returns the number of non-null number pairs.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGR_INTERCEPT,,Y,Y,Y,2,2,"REGR_INTERCEPT(FLOAT, FLOAT) RETURN FLOAT",Returns the intercept of the univariate linear regression line for non-null pairs.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGR_R2,,Y,Y,Y,2,2,"REGR_R2(FLOAT, FLOAT) RETURN FLOAT",Returns the coefficient of determination for non-null pairs.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGR_SLOPE,,Y,Y,Y,2,2,"REGR_SLOPE(FLOAT, FLOAT) RETURN FLOAT",Returns the slope of the linear regression line for non-null pairs.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGR_SXX,,Y,Y,Y,2,2,"REGR_SXX(FLOAT, FLOAT) RETURN FLOAT","Returns REGR_COUNT(expr1, expr2) * VAR_POP(expr2) for non-null pairs.",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGR_SXY,,Y,Y,Y,2,2,"REGR_SXY(FLOAT, FLOAT) RETURN FLOAT","Returns REGR_COUNT(expr1, expr2) * COVAR_POP(expr1, expr2) for non-null pairs.",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGR_SYY,,Y,Y,Y,2,2,"REGR_SYY(FLOAT, FLOAT) RETURN FLOAT","Returns REGR_COUNT(expr1, expr2) * VAR_POP(expr1) for non-null pairs.",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGR_VALX,,Y,N,N,2,2,"REGR_VALX(FLOAT, FLOAT) RETURN FLOAT",Returns the value of the dependent variable (2nd param) if both values are not-null.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REGR_VALY,,Y,N,N,2,2,"REGR_VALY(FLOAT, FLOAT) RETURN FLOAT",Returns the value of the independent variable (1st param) if both values are not-null.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REPEAT,,Y,N,N,2,2,"REPEAT(VARCHAR, NUMBER) RETURN VARCHAR",Returns the input string repeated N times,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,REPLACE,,Y,N,N,2,3,"REPLACE(VARCHAR, VARCHAR [, VARCHAR]) RETURN VARCHAR",replaces all occurrences of searched substring in subject with a replacement,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,REVERSE,,Y,N,N,1,1,"REVERSE(VARCHAR) RETURN VARCHAR, REVERSE(BINARY) RETURN BINARY",return string with character order reversed,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,RIGHT,,Y,N,N,2,2,"RIGHT(VARCHAR, NUMBER) RETURN VARCHAR",Returns rightmost N characters of the input string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,RLIKE,,Y,N,N,2,3,"RLIKE(VARCHAR, VARCHAR [, VARCHAR]) RETURN BOOLEAN",returns TRUE if subject RLIKE pattern,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ROUND,,Y,N,Y,1,3,"ROUND(NUMBER [, NUMBER]) RETURN NUMBER, ROUND(NUMBER [, NUMBER] [, VARCHAR]) RETURN NUMBER, ROUND(FLOAT [, FLOAT]) RETURN FLOAT, ROUND(FLOAT [, FLOAT] [, VARCHAR]) RETURN FLOAT","round to the nearest integer, with .5 rounded away from 0",,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,ROW_NUMBER,,Y,N,N,0,0,ROW_NUMBER() RETURN NUMBER,Returns the position of this row in the window,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,RPAD,,Y,N,N,2,3,"RPAD(VARCHAR, NUMBER [, VARCHAR]) RETURN VARCHAR, RPAD(BINARY, NUMBER, BINARY) RETURN BINARY",padded result string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,RTRIM,,Y,N,N,1,2,"RTRIM(VARCHAR [, VARCHAR]) RETURN VARCHAR",return string trimmed from right,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,RTRIMMED_LENGTH,,Y,N,N,1,1,RTRIMMED_LENGTH(VARCHAR) RETURN VARCHAR,Returns the length of the input string without trailing blanks,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SECOND,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SEQ1,,Y,N,N,0,1,SEQ1( [NUMBER]) RETURN NUMBER,returns a sequence of 1-byte integers,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,SEQ2,,Y,N,N,0,1,SEQ2( [NUMBER]) RETURN NUMBER,returns a sequence of 2-byte integers,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,SEQ4,,Y,N,N,0,1,SEQ4( [NUMBER]) RETURN NUMBER,returns a sequence of 4-byte integers,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,SEQ8,,Y,N,N,0,1,SEQ8( [NUMBER]) RETURN NUMBER,returns a sequence of 8-byte integers,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,SHA1,,Y,N,N,1,1,"SHA1(VARCHAR) RETURN VARCHAR, SHA1(BINARY) RETURN VARCHAR",Hex-encoded SHA1 digest,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SHA1_BINARY,,Y,N,N,1,1,"SHA1_BINARY(VARCHAR) RETURN BINARY, SHA1_BINARY(BINARY) RETURN BINARY",Binary SHA1 digest,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SHA1_HEX,,Y,N,N,1,1,"SHA1_HEX(VARCHAR) RETURN VARCHAR, SHA1_HEX(BINARY) RETURN VARCHAR",Hex-encoded SHA1 digest,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SHA2,,Y,N,N,1,2,"SHA2(VARCHAR [, NUMBER]) RETURN VARCHAR, SHA2(BINARY [, NUMBER]) RETURN VARCHAR",Hex-encoded SHA2 digest,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SHA2_BINARY,,Y,N,N,1,2,"SHA2_BINARY(VARCHAR [, NUMBER]) RETURN BINARY, SHA2_BINARY(BINARY [, NUMBER]) RETURN BINARY",Binary SHA2 digest,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SHA2_HEX,,Y,N,N,1,2,"SHA2_HEX(VARCHAR [, NUMBER]) RETURN VARCHAR, SHA2_HEX(BINARY [, NUMBER]) RETURN VARCHAR",Hex-encoded SHA2 digest,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SHARED_RESULT_GENERATE_TOKEN,,Y,N,N,1,1,SHARED_RESULT_GENERATE_TOKEN(VARCHAR) RETURN VARCHAR,ResultShare token string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SHARED_RESULT_READABLE,,Y,N,N,1,1,SHARED_RESULT_READABLE(VARCHAR) RETURN BOOLEAN,readable to current user,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SIGN,,Y,N,N,1,1,"SIGN(NUMBER) RETURN NUMBER, SIGN(FLOAT) RETURN FLOAT",returns sign of x,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SIN,,Y,N,N,1,1,SIN(FLOAT) RETURN FLOAT,Compute the sine of the input expression (as radians).,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,SINH,,Y,N,N,1,1,SINH(FLOAT) RETURN FLOAT,Compute the hyperbolic sine of the input expression.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SKEW,,Y,Y,Y,1,1,"SKEW(NUMBER) RETURN FLOAT, SKEW(FLOAT) RETURN FLOAT",Returns the sample skew of the values in a group. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SOUNDEX,,Y,N,N,1,1,SOUNDEX(VARCHAR) RETURN VARCHAR,soundex encoding of string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SOUNDEX_P123,,Y,N,N,1,1,SOUNDEX_P123(VARCHAR) RETURN VARCHAR,soundex_p123 encoding of string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SPACE,,Y,N,N,1,1,SPACE(NUMBER) RETURN VARCHAR,N spaces,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SPLIT,,Y,N,N,2,2,"SPLIT(VARCHAR, VARCHAR) RETURN ARRAY",return split string as array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SPLIT_PART,,Y,N,Y,3,3,"SPLIT_PART(VARCHAR, VARCHAR, NUMBER) RETURN VARCHAR",Splits a string with a delimiter and returns the requested part,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,SQRT,,Y,N,Y,1,1,SQRT(FLOAT) RETURN FLOAT,Compute the square root of the input expression.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SQUARE,,Y,N,Y,1,1,SQUARE(FLOAT) RETURN FLOAT,Compute the square of the input expression.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,STARTSWITH,,Y,N,N,2,2,"STARTSWITH(VARCHAR, VARCHAR) RETURN BOOLEAN, STARTSWITH(BINARY, BINARY) RETURN BOOLEAN",returns TRUE if arg1 starts with arg2,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,STDDEV,,Y,Y,Y,1,1,"STDDEV(NUMBER) RETURN FLOAT, STDDEV(FLOAT) RETURN FLOAT",Returns the sample standard deviation of the values in a group. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,STDDEV_POP,,Y,Y,Y,1,1,"STDDEV_POP(NUMBER) RETURN FLOAT, STDDEV_POP(FLOAT) RETURN FLOAT",Returns the population standard deviation of the values in a group. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,STDDEV_SAMP,,Y,Y,Y,1,1,"STDDEV_SAMP(NUMBER) RETURN FLOAT, STDDEV_SAMP(FLOAT) RETURN FLOAT",Returns the sample standard deviation of the values in a group. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,STRING_AS_BINARY,,Y,N,N,1,1,STRING_AS_BINARY(VARCHAR) RETURN BINARY,Returns the input interpreted as a binary.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,STRIP_NULL_VALUE,,Y,N,N,1,1,STRIP_NULL_VALUE(VARIANT) RETURN VARIANT,Converts null values to SQL NULLs,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,STRTOK,,Y,N,N,1,3,"STRTOK(VARCHAR [, VARCHAR] [, NUMBER]) RETURN VARCHAR",Tokenizes a string with a delimiter and returns the requested part,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,STRTOK_TO_ARRAY,,Y,N,N,1,2,"STRTOK_TO_ARRAY(VARCHAR [, VARCHAR]) RETURN ARRAY",Return tokenized string as array,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_AREA,,Y,N,N,1,1,ST_AREA(GEOGRAPHY) RETURN FLOAT,Area of the object in square meters,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_AREA,,Y,N,N,1,1,ST_AREA(GEOMETRY) RETURN FLOAT,Area of the object in the same units as the input coordinates,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASBINARY,,Y,N,N,1,1,ST_ASBINARY(GEOGRAPHY) RETURN BINARY,Return the WKB representation of the GEOGRAPHY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASBINARY,,Y,N,N,1,1,ST_ASBINARY(GEOMETRY) RETURN BINARY,Return the WKB representation of the GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASEWKB,,Y,N,N,1,1,ST_ASEWKB(GEOGRAPHY) RETURN BINARY,Return the EWKB representation of the GEOGRAPHY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASEWKB,,Y,N,N,1,1,ST_ASEWKB(GEOMETRY) RETURN BINARY,Return the EWKB representation of the GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASEWKT,,Y,N,N,1,1,ST_ASEWKT(GEOGRAPHY) RETURN VARCHAR,Return the WKB representation of the GEOGRAPHY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASEWKT,,Y,N,N,1,1,ST_ASEWKT(GEOMETRY) RETURN VARCHAR,Return the WKB representation of the GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASGEOJSON,,Y,N,N,1,1,ST_ASGEOJSON(GEOGRAPHY) RETURN OBJECT,Return the GeoJSON representation of the GEOGRAPHY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASGEOJSON,,Y,N,N,1,1,ST_ASGEOJSON(GEOMETRY) RETURN OBJECT,Return the GeoJSON representation of the GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASTEXT,,Y,N,N,1,1,ST_ASTEXT(GEOGRAPHY) RETURN VARCHAR,Return the WKT representation of the GEOGRAPHY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASTEXT,,Y,N,N,1,1,ST_ASTEXT(GEOMETRY) RETURN VARCHAR,Return the WKT representation of the GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASWKB,,Y,N,N,1,1,ST_ASWKB(GEOGRAPHY) RETURN BINARY,Return the WKB representation of the GEOGRAPHY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASWKB,,Y,N,N,1,1,ST_ASWKB(GEOMETRY) RETURN BINARY,Return the WKB representation of the GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASWKT,,Y,N,N,1,1,ST_ASWKT(GEOGRAPHY) RETURN VARCHAR,Return the WKB representation of the GEOGRAPHY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ASWKT,,Y,N,N,1,1,ST_ASWKT(GEOMETRY) RETURN VARCHAR,Return the WKB representation of the GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_AZIMUTH,,Y,N,N,2,2,"ST_AZIMUTH(GEOGRAPHY, GEOGRAPHY) RETURN FLOAT",Returns the azimuth in radians of the segment defined by the given point,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_AZIMUTH,,Y,N,N,2,2,"ST_AZIMUTH(GEOMETRY, GEOMETRY) RETURN FLOAT",Returns the azimuth in radians of the segment defined by the given point,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_BUFFER,,Y,N,N,2,2,"ST_BUFFER(GEOMETRY, FLOAT) RETURN GEOMETRY",Returns the geometry generated by the buffer operation upon the given input geometry using the diven distance,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_CENTROID,,Y,N,N,1,1,ST_CENTROID(GEOGRAPHY) RETURN GEOGRAPHY,The centroid of geography,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_CENTROID,,Y,N,N,1,1,ST_CENTROID(GEOMETRY) RETURN GEOMETRY,The centroid of geometry,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_COLLECT,,Y,Y,N,1,1,ST_COLLECT(GEOGRAPHY) RETURN GEOGRAPHY,Aggregates all geographies into a GeometryCollection or Multi* geography if they are all of the same single element type (e.g. Point),,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_COLLECT,,Y,N,N,2,2,"ST_COLLECT(GEOGRAPHY, GEOGRAPHY) RETURN GEOGRAPHY",Version of ST_COLLECT that merges the two input geographies into one,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_CONTAINS,,Y,N,N,2,2,"ST_CONTAINS(GEOGRAPHY, GEOGRAPHY) RETURN BOOLEAN",True if the first object fully contains the second,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_CONTAINS,,Y,N,N,2,2,"ST_CONTAINS(GEOMETRY, GEOMETRY) RETURN BOOLEAN",True if the first object fully contains the second,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_COVEREDBY,,Y,N,N,2,2,"ST_COVEREDBY(GEOGRAPHY, GEOGRAPHY) RETURN BOOLEAN",True if the second object covers the first,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_COVEREDBY,,Y,N,N,2,2,"ST_COVEREDBY(GEOMETRY, GEOMETRY) RETURN BOOLEAN",True if the second object covers the first,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_COVERS,,Y,N,N,2,2,"ST_COVERS(GEOGRAPHY, GEOGRAPHY) RETURN BOOLEAN",True if the first object covers the second,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_COVERS,,Y,N,N,2,2,"ST_COVERS(GEOMETRY, GEOMETRY) RETURN BOOLEAN",True if the first object covers the second,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_DIFFERENCE,,Y,N,N,2,2,"ST_DIFFERENCE(GEOGRAPHY, GEOGRAPHY) RETURN GEOGRAPHY",Geometry representing the set difference a minus b,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_DIMENSION,,Y,N,N,1,1,ST_DIMENSION(GEOGRAPHY) RETURN NUMBER,The dimension of the input geography,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_DIMENSION,,Y,N,N,1,1,ST_DIMENSION(GEOMETRY) RETURN NUMBER,The dimension of the input geometry,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_DISJOINT,,Y,N,N,2,2,"ST_DISJOINT(GEOGRAPHY, GEOGRAPHY) RETURN BOOLEAN",True if the two objects not intersect,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_DISJOINT,,Y,N,N,2,2,"ST_DISJOINT(GEOMETRY, GEOMETRY) RETURN BOOLEAN",True if the two objects not intersect,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_DISTANCE,,Y,N,N,2,2,"ST_DISTANCE(GEOGRAPHY, GEOGRAPHY) RETURN FLOAT",Distance between two geography objects in meters,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_DISTANCE,,Y,N,N,2,2,"ST_DISTANCE(GEOMETRY, GEOMETRY) RETURN FLOAT",Distance between two geometries in the same units as the input coordinates,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_DWITHIN,,Y,N,N,3,3,"ST_DWITHIN(GEOGRAPHY, GEOGRAPHY, FLOAT) RETURN BOOLEAN",True if the minimum distance between two objects is smaller than or equal to the specified distance in meters,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ENDPOINT,,Y,N,N,1,1,ST_ENDPOINT(GEOGRAPHY) RETURN GEOGRAPHY,"The last point in the geography, only supports LineStrings",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ENDPOINT,,Y,N,N,1,1,ST_ENDPOINT(GEOMETRY) RETURN GEOMETRY,"The last point in the geometry, only supports LineStrings",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ENVELOPE,,Y,N,N,1,1,ST_ENVELOPE(GEOGRAPHY) RETURN GEOGRAPHY,the double-precision (float8) minimum bounding box for the supplied geometry,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ENVELOPE,,Y,N,N,1,1,ST_ENVELOPE(GEOMETRY) RETURN GEOMETRY,the shape of the minimum bounding box of the supplied geometry,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMEWKB,,Y,N,N,1,1,ST_GEOGFROMEWKB(VARCHAR) RETURN GEOGRAPHY,Alias of ST_GEOGRAPHYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMEWKB,,Y,N,N,2,2,"ST_GEOGFROMEWKB(VARCHAR, BOOLEAN) RETURN GEOGRAPHY",Alias of ST_GEOGRAPHYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMEWKB,,Y,N,N,1,1,ST_GEOGFROMEWKB(BINARY) RETURN GEOGRAPHY,Alias of ST_GEOGRAPHYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMEWKB,,Y,N,N,2,2,"ST_GEOGFROMEWKB(BINARY, BOOLEAN) RETURN GEOGRAPHY",Alias of ST_GEOGRAPHYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMEWKT,,Y,N,N,1,1,ST_GEOGFROMEWKT(VARCHAR) RETURN GEOGRAPHY,Alias of ST_GEOGRAPHYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMEWKT,,Y,N,N,2,2,"ST_GEOGFROMEWKT(VARCHAR, BOOLEAN) RETURN GEOGRAPHY",Alias of ST_GEOGRAPHYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMGEOHASH,,Y,N,N,2,2,"ST_GEOGFROMGEOHASH(VARCHAR, NUMBER) RETURN GEOGRAPHY",The geography represented by the geohash,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMGEOHASH,,Y,N,N,1,1,ST_GEOGFROMGEOHASH(VARCHAR) RETURN GEOGRAPHY,The geography represented by the geohash,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMTEXT,,Y,N,N,1,1,ST_GEOGFROMTEXT(VARCHAR) RETURN GEOGRAPHY,Alias of ST_GEOGRAPHYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMTEXT,,Y,N,N,2,2,"ST_GEOGFROMTEXT(VARCHAR, BOOLEAN) RETURN GEOGRAPHY",Alias of ST_GEOGRAPHYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMWKB,,Y,N,N,1,1,ST_GEOGFROMWKB(VARCHAR) RETURN GEOGRAPHY,Alias of ST_GEOGRAPHYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMWKB,,Y,N,N,2,2,"ST_GEOGFROMWKB(VARCHAR, BOOLEAN) RETURN GEOGRAPHY",Alias of ST_GEOGRAPHYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMWKB,,Y,N,N,1,1,ST_GEOGFROMWKB(BINARY) RETURN GEOGRAPHY,Alias of ST_GEOGRAPHYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMWKB,,Y,N,N,2,2,"ST_GEOGFROMWKB(BINARY, BOOLEAN) RETURN GEOGRAPHY",Alias of ST_GEOGRAPHYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMWKT,,Y,N,N,1,1,ST_GEOGFROMWKT(VARCHAR) RETURN GEOGRAPHY,Alias of ST_GEOGRAPHYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGFROMWKT,,Y,N,N,2,2,"ST_GEOGFROMWKT(VARCHAR, BOOLEAN) RETURN GEOGRAPHY",Alias of ST_GEOGRAPHYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGPOINTFROMGEOHASH,,Y,N,N,1,1,ST_GEOGPOINTFROMGEOHASH(VARCHAR) RETURN GEOGRAPHY,The point represented by the geohash,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMEWKB,,Y,N,N,1,1,ST_GEOGRAPHYFROMEWKB(VARCHAR) RETURN GEOGRAPHY,Alias of ST_GEOGRAPHYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMEWKB,,Y,N,N,2,2,"ST_GEOGRAPHYFROMEWKB(VARCHAR, BOOLEAN) RETURN GEOGRAPHY",Alias of ST_GEOGRAPHYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMEWKB,,Y,N,N,1,1,ST_GEOGRAPHYFROMEWKB(BINARY) RETURN GEOGRAPHY,Alias of ST_GEOGRAPHYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMEWKB,,Y,N,N,2,2,"ST_GEOGRAPHYFROMEWKB(BINARY, BOOLEAN) RETURN GEOGRAPHY",Alias of ST_GEOGRAPHYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMEWKT,,Y,N,N,1,1,ST_GEOGRAPHYFROMEWKT(VARCHAR) RETURN GEOGRAPHY,Alias of ST_GEOGRAPHYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMEWKT,,Y,N,N,2,2,"ST_GEOGRAPHYFROMEWKT(VARCHAR, BOOLEAN) RETURN GEOGRAPHY",Alias of ST_GEOGRAPHYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMTEXT,,Y,N,N,1,1,ST_GEOGRAPHYFROMTEXT(VARCHAR) RETURN GEOGRAPHY,Parse WKT or EWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMTEXT,,Y,N,N,2,2,"ST_GEOGRAPHYFROMTEXT(VARCHAR, BOOLEAN) RETURN GEOGRAPHY",Parse WKT or EWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMWKB,,Y,N,N,1,1,ST_GEOGRAPHYFROMWKB(VARCHAR) RETURN GEOGRAPHY,Parse WKB or EWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMWKB,,Y,N,N,2,2,"ST_GEOGRAPHYFROMWKB(VARCHAR, BOOLEAN) RETURN GEOGRAPHY",Parse WKB or EWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMWKB,,Y,N,N,1,1,ST_GEOGRAPHYFROMWKB(BINARY) RETURN GEOGRAPHY,Parse WKB or EWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMWKB,,Y,N,N,2,2,"ST_GEOGRAPHYFROMWKB(BINARY, BOOLEAN) RETURN GEOGRAPHY",Parse WKB or EWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMWKT,,Y,N,N,1,1,ST_GEOGRAPHYFROMWKT(VARCHAR) RETURN GEOGRAPHY,Alias of ST_GEOGRAPHYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOGRAPHYFROMWKT,,Y,N,N,2,2,"ST_GEOGRAPHYFROMWKT(VARCHAR, BOOLEAN) RETURN GEOGRAPHY",Alias of ST_GEOGRAPHYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOHASH,,Y,N,N,2,2,"ST_GEOHASH(GEOGRAPHY, NUMBER) RETURN VARCHAR",The geohash of a geography,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOHASH,,Y,N,N,1,1,ST_GEOHASH(GEOGRAPHY) RETURN VARCHAR,The geohash of a geography,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMEWKB,,Y,N,N,1,1,ST_GEOMETRYFROMEWKB(VARCHAR) RETURN GEOMETRY,Parse EWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMEWKB,,Y,N,N,2,2,"ST_GEOMETRYFROMEWKB(VARCHAR, NUMBER) RETURN GEOMETRY",Parse EWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMEWKB,,Y,N,N,1,1,ST_GEOMETRYFROMEWKB(BINARY) RETURN GEOMETRY,Parse EWKB from binary,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMEWKB,,Y,N,N,2,2,"ST_GEOMETRYFROMEWKB(BINARY, NUMBER) RETURN GEOMETRY",Parse EWKB from binary,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMEWKB,,Y,N,N,3,3,"ST_GEOMETRYFROMEWKB(VARCHAR, NUMBER, BOOLEAN) RETURN GEOMETRY",Parse EWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMEWKB,,Y,N,N,2,2,"ST_GEOMETRYFROMEWKB(VARCHAR, BOOLEAN) RETURN GEOMETRY",Parse EWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMEWKB,,Y,N,N,3,3,"ST_GEOMETRYFROMEWKB(BINARY, NUMBER, BOOLEAN) RETURN GEOMETRY",Parse EWKB from binary,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMEWKB,,Y,N,N,2,2,"ST_GEOMETRYFROMEWKB(BINARY, BOOLEAN) RETURN GEOMETRY",Parse EWKB from binary,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMEWKT,,Y,N,N,1,1,ST_GEOMETRYFROMEWKT(VARCHAR) RETURN GEOMETRY,Parse EWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMEWKT,,Y,N,N,2,2,"ST_GEOMETRYFROMEWKT(VARCHAR, NUMBER) RETURN GEOMETRY",Parse EWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMEWKT,,Y,N,N,3,3,"ST_GEOMETRYFROMEWKT(VARCHAR, NUMBER, BOOLEAN) RETURN GEOMETRY",Parse EWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMEWKT,,Y,N,N,2,2,"ST_GEOMETRYFROMEWKT(VARCHAR, BOOLEAN) RETURN GEOMETRY",Parse EWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMTEXT,,Y,N,N,2,2,"ST_GEOMETRYFROMTEXT(VARCHAR, NUMBER) RETURN GEOMETRY",Parse WKT or EWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMTEXT,,Y,N,N,1,1,ST_GEOMETRYFROMTEXT(VARCHAR) RETURN GEOMETRY,Parse WKT or EWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMTEXT,,Y,N,N,4,4,"ST_GEOMETRYFROMTEXT(VARCHAR, NUMBER, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Parse WKT or EWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMTEXT,,Y,N,N,3,3,"ST_GEOMETRYFROMTEXT(VARCHAR, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Parse WKT or EWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMTEXT,,Y,N,N,3,3,"ST_GEOMETRYFROMTEXT(VARCHAR, NUMBER, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMTEXT,,Y,N,N,2,2,"ST_GEOMETRYFROMTEXT(VARCHAR, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKB,,Y,N,N,2,2,"ST_GEOMETRYFROMWKB(BINARY, NUMBER) RETURN GEOMETRY",Parse WKB or EWKB from binary,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKB,,Y,N,N,1,1,ST_GEOMETRYFROMWKB(BINARY) RETURN GEOMETRY,Parse WKB or EWKB from binary,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKB,,Y,N,N,2,2,"ST_GEOMETRYFROMWKB(VARCHAR, NUMBER) RETURN GEOMETRY",Parse WKB or EWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKB,,Y,N,N,1,1,ST_GEOMETRYFROMWKB(VARCHAR) RETURN GEOMETRY,Parse WKB or EWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKB,,Y,N,N,4,4,"ST_GEOMETRYFROMWKB(BINARY, NUMBER, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Parse WKB or EWKB from binary,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKB,,Y,N,N,3,3,"ST_GEOMETRYFROMWKB(BINARY, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Parse WKB or EWKB from binary,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKB,,Y,N,N,4,4,"ST_GEOMETRYFROMWKB(VARCHAR, NUMBER, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Parse WKB or EWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKB,,Y,N,N,3,3,"ST_GEOMETRYFROMWKB(VARCHAR, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Parse WKB or EWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKB,,Y,N,N,3,3,"ST_GEOMETRYFROMWKB(VARCHAR, NUMBER, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKB,,Y,N,N,2,2,"ST_GEOMETRYFROMWKB(VARCHAR, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKB,,Y,N,N,3,3,"ST_GEOMETRYFROMWKB(BINARY, NUMBER, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKB,,Y,N,N,2,2,"ST_GEOMETRYFROMWKB(BINARY, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKT,,Y,N,N,1,1,ST_GEOMETRYFROMWKT(VARCHAR) RETURN GEOMETRY,Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKT,,Y,N,N,2,2,"ST_GEOMETRYFROMWKT(VARCHAR, NUMBER) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKT,,Y,N,N,3,3,"ST_GEOMETRYFROMWKT(VARCHAR, NUMBER, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMETRYFROMWKT,,Y,N,N,2,2,"ST_GEOMETRYFROMWKT(VARCHAR, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMEWKB,,Y,N,N,1,1,ST_GEOMFROMEWKB(VARCHAR) RETURN GEOMETRY,Alias of ST_GEOMETRYFROMEWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMEWKB,,Y,N,N,2,2,"ST_GEOMFROMEWKB(VARCHAR, NUMBER) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMEWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMEWKB,,Y,N,N,1,1,ST_GEOMFROMEWKB(BINARY) RETURN GEOMETRY,Alias of ST_GEOMETRYFROMEWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMEWKB,,Y,N,N,2,2,"ST_GEOMFROMEWKB(BINARY, NUMBER) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMEWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMEWKB,,Y,N,N,3,3,"ST_GEOMFROMEWKB(VARCHAR, NUMBER, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMEWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMEWKB,,Y,N,N,2,2,"ST_GEOMFROMEWKB(VARCHAR, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMEWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMEWKB,,Y,N,N,3,3,"ST_GEOMFROMEWKB(BINARY, NUMBER, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMEWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMEWKB,,Y,N,N,2,2,"ST_GEOMFROMEWKB(BINARY, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMEWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMEWKT,,Y,N,N,1,1,ST_GEOMFROMEWKT(VARCHAR) RETURN GEOMETRY,Alias of ST_GEOMETRYFROMEWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMEWKT,,Y,N,N,2,2,"ST_GEOMFROMEWKT(VARCHAR, NUMBER) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMEWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMEWKT,,Y,N,N,3,3,"ST_GEOMFROMEWKT(VARCHAR, NUMBER, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMEWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMEWKT,,Y,N,N,2,2,"ST_GEOMFROMEWKT(VARCHAR, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMEWKT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMTEXT,,Y,N,N,1,1,ST_GEOMFROMTEXT(VARCHAR) RETURN GEOMETRY,Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMTEXT,,Y,N,N,2,2,"ST_GEOMFROMTEXT(VARCHAR, NUMBER) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMTEXT,,Y,N,N,3,3,"ST_GEOMFROMTEXT(VARCHAR, NUMBER, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMTEXT,,Y,N,N,2,2,"ST_GEOMFROMTEXT(VARCHAR, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMWKB,,Y,N,N,1,1,ST_GEOMFROMWKB(VARCHAR) RETURN GEOMETRY,Alias of ST_GEOMETRYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMWKB,,Y,N,N,2,2,"ST_GEOMFROMWKB(VARCHAR, NUMBER) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMWKB,,Y,N,N,1,1,ST_GEOMFROMWKB(BINARY) RETURN GEOMETRY,Alias of ST_GEOMETRYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMWKB,,Y,N,N,2,2,"ST_GEOMFROMWKB(BINARY, NUMBER) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMWKB,,Y,N,N,3,3,"ST_GEOMFROMWKB(VARCHAR, NUMBER, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMWKB,,Y,N,N,2,2,"ST_GEOMFROMWKB(VARCHAR, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMWKB,,Y,N,N,3,3,"ST_GEOMFROMWKB(BINARY, NUMBER, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMWKB,,Y,N,N,2,2,"ST_GEOMFROMWKB(BINARY, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMWKB,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMWKT,,Y,N,N,1,1,ST_GEOMFROMWKT(VARCHAR) RETURN GEOMETRY,Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMWKT,,Y,N,N,2,2,"ST_GEOMFROMWKT(VARCHAR, NUMBER) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMWKT,,Y,N,N,3,3,"ST_GEOMFROMWKT(VARCHAR, NUMBER, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMFROMWKT,,Y,N,N,2,2,"ST_GEOMFROMWKT(VARCHAR, BOOLEAN) RETURN GEOMETRY",Alias of ST_GEOMETRYFROMTEXT,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_GEOMPOINT,,Y,N,N,2,2,"ST_GEOMPOINT(FLOAT, FLOAT) RETURN GEOMETRY",Creates a point with the given x and y,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_HAUSDORFFDISTANCE,,Y,N,N,2,2,"ST_HAUSDORFFDISTANCE(GEOGRAPHY, GEOGRAPHY) RETURN FLOAT",the Hausdorff distance between two geometries,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_INTERSECTION,,Y,N,N,2,2,"ST_INTERSECTION(GEOGRAPHY, GEOGRAPHY) RETURN GEOGRAPHY",Geometry representing the intersection of a and b,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_INTERSECTION_AGG_GEOGRAPHY_INTERNAL,,Y,Y,N,1,1,ST_INTERSECTION_AGG_GEOGRAPHY_INTERNAL(BINARY) RETURN BINARY,output,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_INTERSECTS,,Y,N,N,2,2,"ST_INTERSECTS(GEOGRAPHY, GEOGRAPHY) RETURN BOOLEAN",True if the two objects intersect,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_INTERSECTS,,Y,N,N,2,2,"ST_INTERSECTS(GEOMETRY, GEOMETRY) RETURN BOOLEAN",True if the two objects intersect,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ISREPAIRED,,Y,N,N,1,1,ST_ISREPAIRED(GEOMETRY) RETURN BOOLEAN,Return true if geometry was repaired on construction,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ISVALID,,Y,N,N,1,1,ST_ISVALID(GEOGRAPHY) RETURN BOOLEAN,True if g has an internal representation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_ISVALID,,Y,N,N,1,1,ST_ISVALID(GEOMETRY) RETURN BOOLEAN,Return true if geometry is valid,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_LENGTH,,Y,N,N,1,1,ST_LENGTH(GEOGRAPHY) RETURN FLOAT,Length or perimeter of the object in meters,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_LENGTH,,Y,N,N,1,1,ST_LENGTH(GEOMETRY) RETURN FLOAT,Length of the geometry in the same units as the input coordinates,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_MAKEGEOMPOINT,,Y,N,N,2,2,"ST_MAKEGEOMPOINT(FLOAT, FLOAT) RETURN GEOMETRY",Creates a point with the given x and y,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_MAKELINE,,Y,N,N,2,2,"ST_MAKELINE(GEOGRAPHY, GEOGRAPHY) RETURN GEOGRAPHY",Create a Line out of the points in the input geographies,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_MAKELINE,,Y,N,N,2,2,"ST_MAKELINE(GEOMETRY, GEOMETRY) RETURN GEOMETRY",Create a LineString out of the points in the input geographies,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_MAKEPOINT,,Y,N,N,2,2,"ST_MAKEPOINT(FLOAT, FLOAT) RETURN GEOGRAPHY",Creates a point with the given longitude and latitude,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_MAKEPOLYGON,,Y,N,N,1,1,ST_MAKEPOLYGON(GEOGRAPHY) RETURN GEOGRAPHY,The Polygon consisting of the LineString as outer shell,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_MAKEPOLYGON,,Y,N,N,1,1,ST_MAKEPOLYGON(GEOMETRY) RETURN GEOMETRY,The Polygon consisting of the LineString as outer shell,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_MAKEPOLYGONORIENTED,,Y,N,N,1,1,ST_MAKEPOLYGONORIENTED(GEOGRAPHY) RETURN GEOGRAPHY,"The Polygon consisting of the LineString as outer shell, with unmodified orientation",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_NPOINTS,,Y,N,N,1,1,ST_NPOINTS(GEOGRAPHY) RETURN NUMBER,The number of points in the object's definition,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_NPOINTS,,Y,N,N,1,1,ST_NPOINTS(GEOMETRY) RETURN NUMBER,The number of points in the geometry,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_NUMPOINTS,,Y,N,N,1,1,ST_NUMPOINTS(GEOGRAPHY) RETURN NUMBER,Alias for ST_NPOINTS,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_NUMPOINTS,,Y,N,N,1,1,ST_NUMPOINTS(GEOMETRY) RETURN NUMBER,Alias for ST_NPOINTS,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_PERIMETER,,Y,N,N,1,1,ST_PERIMETER(GEOGRAPHY) RETURN FLOAT,Perimeter of the object in meters,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_PERIMETER,,Y,N,N,1,1,ST_PERIMETER(GEOMETRY) RETURN FLOAT,Perimeter of the geometry in the same units as the input coordinates,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_POINT,,Y,N,N,2,2,"ST_POINT(FLOAT, FLOAT) RETURN GEOGRAPHY",Creates a point with the given longitude and latitude,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_POINTN,,Y,N,N,2,2,"ST_POINTN(GEOGRAPHY, NUMBER) RETURN GEOGRAPHY","The nth point in the geography, only supports LineStrings",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_POINTN,,Y,N,N,2,2,"ST_POINTN(GEOMETRY, NUMBER) RETURN GEOMETRY","The nth point in the geometry, only supports LineStrings",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_POLYGON,,Y,N,N,1,1,ST_POLYGON(GEOGRAPHY) RETURN GEOGRAPHY,Alias for ST_MAKEPOLYGON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_POLYGON,,Y,N,N,1,1,ST_POLYGON(GEOMETRY) RETURN GEOMETRY,Alias for ST_MAKEPOLYGON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_SETSRID,,Y,N,N,2,2,"ST_SETSRID(GEOMETRY, NUMBER) RETURN GEOMETRY",Returns a geometry same as input geometry but with SRID set to the given value,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_SIMPLIFY,,Y,N,N,3,3,"ST_SIMPLIFY(GEOGRAPHY, FLOAT, BOOLEAN) RETURN GEOGRAPHY",Simplified version of the given geometry,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_SIMPLIFY,,Y,N,N,2,2,"ST_SIMPLIFY(GEOGRAPHY, FLOAT) RETURN GEOGRAPHY",Simplified version of the given geometry,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_SIMPLIFY,,Y,N,N,2,2,"ST_SIMPLIFY(GEOMETRY, FLOAT) RETURN GEOMETRY","Returns the geometry generated by the simplify operation upon the given input geometry using the given distance, or NULL if the resulting geometry is invalid",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_SRID,,Y,N,N,1,1,ST_SRID(GEOGRAPHY) RETURN NUMBER,Returns the SRID of a geography if present. Otherwise 4326,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_SRID,,Y,N,N,1,1,ST_SRID(GEOMETRY) RETURN NUMBER,Returns the SRID of a geometry if present. Otherwise 0,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_STARTPOINT,,Y,N,N,1,1,ST_STARTPOINT(GEOGRAPHY) RETURN GEOGRAPHY,"The first point in the geography, only supports LineStrings",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_STARTPOINT,,Y,N,N,1,1,ST_STARTPOINT(GEOMETRY) RETURN GEOMETRY,"The first point in the geometry, only supports LineStrings",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_SYMDIFFERENCE,,Y,N,N,2,2,"ST_SYMDIFFERENCE(GEOGRAPHY, GEOGRAPHY) RETURN GEOGRAPHY",Geometry representing the set symmetric difference a minus b,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_TRANSFORM,,Y,N,N,3,3,"ST_TRANSFORM(GEOMETRY, NUMBER, NUMBER) RETURN GEOMETRY",Returns the geometry transformed from one SRID to another SRID.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_TRANSFORM,,Y,N,N,2,2,"ST_TRANSFORM(GEOMETRY, NUMBER) RETURN GEOMETRY",Returns the geometry transformed to another SRID.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_UNION,,Y,N,N,2,2,"ST_UNION(GEOGRAPHY, GEOGRAPHY) RETURN GEOGRAPHY",Geometry representing the union of a and b,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_UNION_AGG_GEOGRAPHY_INTERNAL,,Y,Y,N,1,1,ST_UNION_AGG_GEOGRAPHY_INTERNAL(BINARY) RETURN BINARY,output,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_WITHIN,,Y,N,N,2,2,"ST_WITHIN(GEOGRAPHY, GEOGRAPHY) RETURN BOOLEAN",True if the second object fully contains the first,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_WITHIN,,Y,N,N,2,2,"ST_WITHIN(GEOMETRY, GEOMETRY) RETURN BOOLEAN",True if the second object fully contains the first,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_X,,Y,N,N,1,1,ST_X(GEOGRAPHY) RETURN FLOAT,The longitude of a point,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_X,,Y,N,N,1,1,ST_X(GEOMETRY) RETURN FLOAT,The X coordinate of a point,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_XMAX,,Y,N,N,1,1,ST_XMAX(GEOGRAPHY) RETURN FLOAT,The maximum longitude,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_XMAX,,Y,N,N,1,1,ST_XMAX(GEOMETRY) RETURN FLOAT,The maximum X coordinate,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_XMIN,,Y,N,N,1,1,ST_XMIN(GEOGRAPHY) RETURN FLOAT,The minimum longitude,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_XMIN,,Y,N,N,1,1,ST_XMIN(GEOMETRY) RETURN FLOAT,The minimum X coordinate,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_Y,,Y,N,N,1,1,ST_Y(GEOGRAPHY) RETURN FLOAT,The latitude of a point,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_Y,,Y,N,N,1,1,ST_Y(GEOMETRY) RETURN FLOAT,The Y coordinate of a point,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_YMAX,,Y,N,N,1,1,ST_YMAX(GEOGRAPHY) RETURN FLOAT,The maximum latitude,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_YMAX,,Y,N,N,1,1,ST_YMAX(GEOMETRY) RETURN FLOAT,The maximum Y coordinate,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_YMIN,,Y,N,N,1,1,ST_YMIN(GEOGRAPHY) RETURN FLOAT,The minimum latitude,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ST_YMIN,,Y,N,N,1,1,ST_YMIN(GEOMETRY) RETURN FLOAT,The minimum Y coordinate,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SUBSTR,,Y,N,N,2,3,"SUBSTR(VARCHAR, NUMBER [, NUMBER]) RETURN VARCHAR, SUBSTR(BINARY, NUMBER [, NUMBER]) RETURN BINARY",Returns string fragment of the input string,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,SUBSTRING,,Y,N,N,2,3,"SUBSTRING(VARCHAR, NUMBER [, NUMBER]) RETURN VARCHAR, SUBSTRING(BINARY, NUMBER [, NUMBER]) RETURN BINARY",Returns string fragment of the input string,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,SUM,,Y,Y,Y,1,1,"SUM(NUMBER) RETURN NUMBER, SUM(FLOAT) RETURN FLOAT",Returns a sum of a column,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,SUM_INTERNAL,,Y,Y,N,2,2,"SUM_INTERNAL(NUMBER, NUMBER) RETURN NUMBER, SUM_INTERNAL(FLOAT, NUMBER) RETURN FLOAT",Returns a sum of a column,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSDATE,,Y,N,N,0,0,SYSDATE() RETURN TIMESTAMP_NTZ,Returns the current timestamp in the UTC time zone,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$ABORT_SESSION,,Y,N,N,1,1,SYSTEM$ABORT_SESSION(NUMBER) RETURN VARCHAR,Abort the specified open session,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$ABORT_TRANSACTION,,Y,N,N,1,1,SYSTEM$ABORT_TRANSACTION(NUMBER) RETURN VARCHAR,Abort the specified transaction if it is running. If the transaction is already is committed/rolled back then the state of the transaction is not altered.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$ADD_REFERENCE,,Y,N,N,2,2,"SYSTEM$ADD_REFERENCE(VARCHAR, VARCHAR) RETURN VARCHAR",Returns whether the persisted reference is successfully associated,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$APP_VALIDATE_PERMISSION_REQUEST,,Y,N,N,1,1,SYSTEM$APP_VALIDATE_PERMISSION_REQUEST(VARCHAR) RETURN VARCHAR,response message,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$BEHAVIOR_CHANGE_BUNDLE_STATUS,,Y,N,N,1,1,SYSTEM$BEHAVIOR_CHANGE_BUNDLE_STATUS(VARCHAR) RETURN VARCHAR,returned value,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$CANCEL_ALL_QUERIES,,Y,N,N,1,1,SYSTEM$CANCEL_ALL_QUERIES( [NUMBER]) RETURN VARCHAR,cancel all the queries running in the specified session,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$CANCEL_JOB,,Y,N,N,1,1,SYSTEM$CANCEL_JOB(VARCHAR) RETURN VARCHAR,status,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$CANCEL_QUERY,,Y,N,N,1,1,SYSTEM$CANCEL_QUERY(VARCHAR) RETURN VARCHAR,cancel the specified running query,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$CLUSTERING_DEPTH,,Y,N,N,1,-1,"SYSTEM$CLUSTERING_DEPTH(VARCHAR [, VARCHAR] [, VARCHAR]) RETURN FLOAT",Average depth of the table,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$CLUSTERING_INFORMATION,,Y,N,N,1,-1,"SYSTEM$CLUSTERING_INFORMATION(VARCHAR [, VARCHAR] [, VARCHAR]) RETURN VARCHAR, SYSTEM$CLUSTERING_INFORMATION(VARCHAR [, NUMBER]) RETURN VARCHAR",returns clustering information as json,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$CLUSTERING_RATIO,,Y,N,N,1,-1,"SYSTEM$CLUSTERING_RATIO(VARCHAR [, VARCHAR] [, VARCHAR]) RETURN FLOAT",Clustering ratio for the specified table,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$CONVERT_GLOBAL_SECONDARY_SHARE_TO_RG_REPLICA,,Y,N,N,3,3,"SYSTEM$CONVERT_GLOBAL_SECONDARY_SHARE_TO_RG_REPLICA(VARCHAR, VARCHAR, VARCHAR) RETURN VARCHAR",Returns success/fail message of the operation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$CONVERT_PIPES_SQS_TO_SNS,,Y,N,N,2,2,"SYSTEM$CONVERT_PIPES_SQS_TO_SNS(VARCHAR, VARCHAR) RETURN VARCHAR",returns true if all SQS pipes' metadata based on this bucket are successfully converted to new SNS topic-based pipes.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$CONVERT_PRIMARY_DATABASE_FOR_REPLICATION_GROUP,,Y,N,N,1,1,SYSTEM$CONVERT_PRIMARY_DATABASE_FOR_REPLICATION_GROUP(VARCHAR) RETURN VARCHAR,Returns success/fail message of the operation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$CONVERT_PRIMARY_SHARE_FOR_REPLICATION_GROUP,,Y,N,N,1,1,SYSTEM$CONVERT_PRIMARY_SHARE_FOR_REPLICATION_GROUP(VARCHAR) RETURN VARCHAR,Returns success/fail message of the operation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$CONVERT_SECONDARY_DATABASE_FOR_REPLICATION_GROUP,,Y,N,N,1,1,SYSTEM$CONVERT_SECONDARY_DATABASE_FOR_REPLICATION_GROUP(VARCHAR) RETURN VARCHAR,Returns success/fail message of the operation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$CONVERT_SECONDARY_SHARE_FOR_REPLICATION_GROUP,,Y,N,N,1,1,SYSTEM$CONVERT_SECONDARY_SHARE_FOR_REPLICATION_GROUP(VARCHAR) RETURN VARCHAR,Returns success/fail message of the operation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$DISABLE_DATABASE_REPLICATION,,Y,N,N,1,1,SYSTEM$DISABLE_DATABASE_REPLICATION(VARCHAR) RETURN VARCHAR,Returns success/fail message of the operation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$ESTIMATE_QUERY_ACCELERATION,,Y,N,N,1,1,SYSTEM$ESTIMATE_QUERY_ACCELERATION(VARCHAR) RETURN VARCHAR,estimate query acceleration result,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$ESTIMATE_SEARCH_OPTIMIZATION_COSTS,,Y,N,N,1,2,"SYSTEM$ESTIMATE_SEARCH_OPTIMIZATION_COSTS(VARCHAR [, VARCHAR]) RETURN VARCHAR",result: the cost report result for search optimization on the given table,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$EXPLAIN_JSON_TO_TEXT,,Y,N,N,1,1,SYSTEM$EXPLAIN_JSON_TO_TEXT(VARCHAR) RETURN VARCHAR,text format explain plan from json,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$EXPLAIN_PLAN_JSON,,Y,N,N,1,1,SYSTEM$EXPLAIN_PLAN_JSON(VARCHAR) RETURN VARCHAR,json of the explain plan result,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$EXTERNAL_TABLE_PIPE_STATUS,,Y,N,N,1,1,SYSTEM$EXTERNAL_TABLE_PIPE_STATUS(VARCHAR) RETURN VARCHAR,returns pipe status as json,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GENERATE_SAML_CSR,,Y,N,N,1,2,SYSTEM$GENERATE_SAML_CSR() RETURN VARCHAR,returns the result of the operation.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_ACCOUNT_LOCATOR_URL,,Y,N,N,0,0,SYSTEM$GET_ACCOUNT_LOCATOR_URL() RETURN VARCHAR,Returns default locator url for the current account ,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_ALL_REFERENCES,,Y,N,N,1,1,SYSTEM$GET_ALL_REFERENCES(VARCHAR) RETURN VARCHAR,Returns all persisted references under the definition,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_AWS_SNS_IAM_POLICY,,Y,N,N,1,1,SYSTEM$GET_AWS_SNS_IAM_POLICY(VARCHAR) RETURN VARCHAR,returns IAM policy for the SNS topic,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_DEPENDENT_ICEBERG_TABLES,,Y,N,N,1,1,SYSTEM$GET_DEPENDENT_ICEBERG_TABLES(VARCHAR) RETURN VARCHAR,returns the list of Dependent Iceberg table fully qualified names,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_DIRECTORY_TABLE_STATUS,,Y,N,N,0,1,SYSTEM$GET_DIRECTORY_TABLE_STATUS( [VARCHAR]) RETURN VARCHAR,returns the associated directory table status,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_ICEBERG_TABLE_INFORMATION,,Y,N,N,1,2,"SYSTEM$GET_ICEBERG_TABLE_INFORMATION(VARCHAR [, NUMBER]) RETURN VARCHAR, SYSTEM$GET_ICEBERG_TABLE_INFORMATION(NUMBER [, NUMBER]) RETURN VARCHAR",returns the latest Iceberg metadata information,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_JOB_LOGS,,Y,N,N,2,3,"SYSTEM$GET_JOB_LOGS(VARCHAR, VARCHAR [, NUMBER]) RETURN VARCHAR",return status of operation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_JOB_LOGS_S3,,Y,N,N,2,2,"SYSTEM$GET_JOB_LOGS_S3(VARCHAR, VARCHAR) RETURN VARCHAR",return status of operation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_JOB_STATUS,,Y,N,N,1,2,"SYSTEM$GET_JOB_STATUS(VARCHAR [, NUMBER]) RETURN VARCHAR",return service resource set status,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_PREDECESSOR_RETURN_VALUE,,Y,N,N,0,1,SYSTEM$GET_PREDECESSOR_RETURN_VALUE( [VARCHAR]) RETURN VARCHAR,Return data,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_REFERENCED_OBJECT_ID_HASH,,Y,N,N,1,2,"SYSTEM$GET_REFERENCED_OBJECT_ID_HASH(VARCHAR [, VARCHAR]) RETURN VARCHAR",Returns the hashed associated object id with give reference definition name and alias (optional),,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_SERVICE_LOGS,,Y,N,N,3,4,"SYSTEM$GET_SERVICE_LOGS(VARCHAR, NUMBER, VARCHAR [, NUMBER]) RETURN VARCHAR",return status of operation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_SERVICE_LOGS_S3,,Y,N,N,3,3,"SYSTEM$GET_SERVICE_LOGS_S3(VARCHAR, VARCHAR, VARCHAR) RETURN VARCHAR",return status of operation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_SERVICE_STATUS,,Y,N,N,1,2,"SYSTEM$GET_SERVICE_STATUS(ANY [, NUMBER]) RETURN VARCHAR",return service resource set status,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_SHARE_REFRESH_MISSING_OBJECTS,,Y,N,N,1,1,SYSTEM$GET_SHARE_REFRESH_MISSING_OBJECTS(VARCHAR) RETURN VARCHAR,returns the missing underlying objects for the most recent share refresh task for a share,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_TAG,,Y,N,Y,3,3,SYSTEM$GET_TAG() RETURN VARCHAR,Returns the associated tag value,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_TAG_ALLOWED_VALUES,,Y,N,Y,1,1,SYSTEM$GET_TAG_ALLOWED_VALUES() RETURN VARCHAR,Returns the allowed values for a tag,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_TAG_ON_CURRENT_COLUMN,,Y,N,Y,1,1,SYSTEM$GET_TAG_ON_CURRENT_COLUMN() RETURN VARCHAR,Returns the associated tag value,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_TAG_ON_CURRENT_TABLE,,Y,N,Y,1,1,SYSTEM$GET_TAG_ON_CURRENT_TABLE() RETURN VARCHAR,Returns the associated tag value on the current table,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GET_TASK_GRAPH_CONFIG,,Y,N,N,0,1,SYSTEM$GET_TASK_GRAPH_CONFIG( [VARCHAR]) RETURN VARCHAR,Result,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$GLOBAL_ACCOUNT_SET_PARAMETER,,Y,N,N,3,3,"SYSTEM$GLOBAL_ACCOUNT_SET_PARAMETER(VARCHAR, VARCHAR, VARCHAR) RETURN VARCHAR",param set result from the account,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$HOLD_PRIVILEGE_ON_ACCOUNT,,Y,N,N,1,1,SYSTEM$HOLD_PRIVILEGE_ON_ACCOUNT(VARCHAR) RETURN BOOLEAN,Return true if any activated role contains the given privilege,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$ICEBERG_TABLE_AUTO_REFRESH_STATUS,,Y,N,N,1,1,SYSTEM$ICEBERG_TABLE_AUTO_REFRESH_STATUS(VARCHAR) RETURN VARCHAR,returns pipe status as json,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$LAST_CHANGE_COMMIT_TIME,,Y,N,N,1,1,SYSTEM$LAST_CHANGE_COMMIT_TIME(VARCHAR) RETURN NUMBER,returns the largest commit time as a long.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$MD5_NUMBER,,Y,N,N,1,1,"SYSTEM$MD5_NUMBER(VARCHAR) RETURN NUMBER, SYSTEM$MD5_NUMBER(BINARY) RETURN NUMBER",Integral MD5 digest,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$MIGRATE_SAML_IDP_REGISTRATION,,Y,N,N,1,2,"SYSTEM$MIGRATE_SAML_IDP_REGISTRATION(VARCHAR [, VARCHAR]) RETURN VARCHAR",Returns the result of the operation.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$PIPE_FORCE_RESUME,,Y,N,N,1,2,"SYSTEM$PIPE_FORCE_RESUME(VARCHAR [, VARCHAR]) RETURN VARCHAR",returns result of operation,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$PIPE_REBINDING_WITH_NOTIFICATION_CHANNEL,,Y,N,N,1,1,SYSTEM$PIPE_REBINDING_WITH_NOTIFICATION_CHANNEL(VARCHAR) RETURN VARCHAR,returns true if the pipe successfully rebinds with its assigned notification channel,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$PIPE_STATUS,,Y,N,N,1,1,SYSTEM$PIPE_STATUS(VARCHAR) RETURN VARCHAR,returns pipe status as json,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$QUERY_REFERENCE,,Y,N,N,1,2,"SYSTEM$QUERY_REFERENCE(VARCHAR [, BOOLEAN]) RETURN VARCHAR",Returns the query reference identifier,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$REFERENCE,,Y,N,N,2,-1,"SYSTEM$REFERENCE(VARCHAR, VARCHAR [, BOOLEAN] [, VARCHAR]) RETURN VARCHAR, SYSTEM$REFERENCE(VARCHAR, VARCHAR [, VARCHAR] [, VARCHAR]) RETURN VARCHAR",Returns the reference identifier,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$REMOVE_ALL_DELEGATED_AUTHORIZATIONS,,Y,N,N,2,2,SYSTEM$REMOVE_ALL_DELEGATED_AUTHORIZATIONS(VARCHAR) RETURN VARCHAR,The Username.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$REMOVE_ALL_REFERENCES,,Y,N,N,1,1,SYSTEM$REMOVE_ALL_REFERENCES(VARCHAR) RETURN VARCHAR,Returns whether all the Persisted references are successfully dropped under the ref name,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$REMOVE_REFERENCE,,Y,N,N,1,2,"SYSTEM$REMOVE_REFERENCE(VARCHAR [, VARCHAR]) RETURN VARCHAR",Returns whether the Persisted reference is successfully dropped,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$RUN_QUERY_WITH_SESSION_TOKEN,,Y,N,N,2,3,"SYSTEM$RUN_QUERY_WITH_SESSION_TOKEN(VARCHAR, VARCHAR [, VARCHAR]) RETURN VARCHAR",return query response,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$SET_REFERENCE,,Y,N,N,2,2,"SYSTEM$SET_REFERENCE(VARCHAR, VARCHAR) RETURN VARCHAR",Returns whether the persisted reference is successfully associated,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$SET_RETURN_VALUE,,Y,N,N,1,1,SYSTEM$SET_RETURN_VALUE(VARCHAR) RETURN VARCHAR,"Returns ""OK"" if succeeded",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$SHOW_ACTIVE_BEHAVIOR_CHANGE_BUNDLES,,Y,N,N,0,0,SYSTEM$SHOW_ACTIVE_BEHAVIOR_CHANGE_BUNDLES() RETURN VARCHAR,returned value,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$SNOWPIPE_STREAMING_UPDATE_CHANNEL_OFFSET_TOKEN,,Y,N,N,3,3,"SYSTEM$SNOWPIPE_STREAMING_UPDATE_CHANNEL_OFFSET_TOKEN(VARCHAR, VARCHAR, VARCHAR) RETURN VARCHAR",returns status of update,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$SNOWSERVICES_RESOLVE_INGRESS,,Y,N,N,1,1,SYSTEM$SNOWSERVICES_RESOLVE_INGRESS(VARCHAR) RETURN VARCHAR,json info for routing to snowservice ingress,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$STAGE_PIPE_STATUS,,Y,N,N,1,1,SYSTEM$STAGE_PIPE_STATUS(VARCHAR) RETURN VARCHAR,returns pipe status as json,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$STREAMLIT_RERUN,,Y,N,N,1,1,SYSTEM$STREAMLIT_RERUN(VARCHAR) RETURN BOOLEAN,Rerun dispatch successful,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$TASK_DEPENDENTS_ENABLE,,Y,N,N,1,1,SYSTEM$TASK_DEPENDENTS_ENABLE(VARCHAR) RETURN VARCHAR,"Returns ""OK"" if succeeded",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$TASK_RUNTIME_INFO,,Y,N,N,1,1,SYSTEM$TASK_RUNTIME_INFO(VARCHAR) RETURN VARCHAR,result,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$UI_REPLICATION_INFORMATION,,Y,N,N,0,0,SYSTEM$UI_REPLICATION_INFORMATION() RETURN VARCHAR,returns information about replication databases for the UI,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS,,Y,N,N,1,1,SYSTEM$USER_TASK_CANCEL_ONGOING_EXECUTIONS(VARCHAR) RETURN VARCHAR,"Returns ""OK"" if succeeded",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$VERIFY_EXTERNAL_OAUTH_TOKEN,,Y,N,N,1,1,SYSTEM$VERIFY_EXTERNAL_OAUTH_TOKEN() RETURN VARCHAR,The OAuth Access Token.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$WAIT,,Y,N,N,1,2,"SYSTEM$WAIT(NUMBER [, VARCHAR]) RETURN VARCHAR",Wait for a finite amount of time,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTEM$get_image_repository_metadata,,Y,N,N,2,2,"SYSTEM$get_image_repository_metadata(VARCHAR, VARCHAR) RETURN VARCHAR","return JSON RepositoryMetadata, if caller has access",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,SYSTIMESTAMP,,Y,N,N,0,0,SYSTIMESTAMP() RETURN TIMESTAMP_LTZ,Returns the current timestamp,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TAN,,Y,N,N,1,1,TAN(FLOAT) RETURN FLOAT,Compute the tangent of the input expression (as radians).,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TANH,,Y,N,N,1,1,TANH(FLOAT) RETURN FLOAT,Compute the hyperbolic tangent of the input expression (as radians).,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIME,,Y,N,N,1,1,TIME(TIMESTAMP_LTZ) RETURN TIME,Converts the timestamp argument to a time,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIME,,Y,N,N,1,1,TIME(TIMESTAMP_NTZ) RETURN TIME,Converts the timestamp argument to a time,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIME,,Y,N,N,1,1,TIME(TIMESTAMP_TZ) RETURN TIME,Converts the timestamp argument to a time,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIME,,Y,N,N,1,1,TIME(VARCHAR) RETURN TIME,Converts the timestamp argument to a time,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIME,,Y,N,N,1,1,TIME(VARIANT) RETURN TIME,Converts the timestamp argument to a time,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMEADD,,Y,N,N,3,3,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMEDIFF,,Y,N,N,3,3,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMEFROMPARTS,,Y,N,Y,3,4,"TIMEFROMPARTS(NUMBER, NUMBER, NUMBER [, NUMBER]) RETURN TIME",Construct a time from individual components,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMESTAMPADD,,Y,N,N,3,3,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMESTAMPDIFF,,Y,N,N,3,3,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMESTAMPFROMPARTS,,Y,N,Y,2,8,"TIMESTAMPFROMPARTS(NUMBER, NUMBER, NUMBER, NUMBER, NUMBER, NUMBER [, NUMBER] [, VARCHAR]) RETURN TIMESTAMP_LTZ, TIMESTAMPFROMPARTS(DATE, TIME) RETURN TIMESTAMP_LTZ",Construct a timestamp from individual components,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMESTAMPLTZFROMPARTS,,Y,N,Y,6,7,"TIMESTAMPLTZFROMPARTS(NUMBER, NUMBER, NUMBER, NUMBER, NUMBER, NUMBER [, NUMBER]) RETURN TIMESTAMP_LTZ",Construct a timestamp from individual components,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMESTAMPNTZFROMPARTS,,Y,N,Y,2,7,"TIMESTAMPNTZFROMPARTS(NUMBER, NUMBER, NUMBER, NUMBER, NUMBER, NUMBER [, NUMBER]) RETURN TIMESTAMP_NTZ, TIMESTAMPNTZFROMPARTS(DATE, TIME) RETURN TIMESTAMP_LTZ",Construct a timestamp from individual components,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMESTAMPTZFROMPARTS,,Y,N,Y,6,8,"TIMESTAMPTZFROMPARTS(NUMBER, NUMBER, NUMBER, NUMBER, NUMBER, NUMBER [, NUMBER] [, VARCHAR]) RETURN TIMESTAMP_TZ",Construct a timestamp from individual components,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMESTAMP_FROM_PARTS,,Y,N,Y,2,8,"TIMESTAMP_FROM_PARTS(NUMBER, NUMBER, NUMBER, NUMBER, NUMBER, NUMBER [, NUMBER] [, VARCHAR]) RETURN TIMESTAMP_LTZ, TIMESTAMP_FROM_PARTS(DATE, TIME) RETURN TIMESTAMP_LTZ",Construct a timestamp from individual components,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMESTAMP_LTZ_FROM_PARTS,,Y,N,Y,6,7,"TIMESTAMP_LTZ_FROM_PARTS(NUMBER, NUMBER, NUMBER, NUMBER, NUMBER, NUMBER [, NUMBER]) RETURN TIMESTAMP_LTZ",Construct a timestamp from individual components,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMESTAMP_NTZ_FROM_PARTS,,Y,N,Y,2,7,"TIMESTAMP_NTZ_FROM_PARTS(NUMBER, NUMBER, NUMBER, NUMBER, NUMBER, NUMBER [, NUMBER]) RETURN TIMESTAMP_NTZ, TIMESTAMP_NTZ_FROM_PARTS(DATE, TIME) RETURN TIMESTAMP_LTZ",Construct a timestamp from individual components,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIMESTAMP_TZ_FROM_PARTS,,Y,N,Y,6,8,"TIMESTAMP_TZ_FROM_PARTS(NUMBER, NUMBER, NUMBER, NUMBER, NUMBER, NUMBER [, NUMBER] [, VARCHAR]) RETURN TIMESTAMP_TZ",Construct a timestamp from individual components,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIME_FROM_PARTS,,Y,N,Y,3,4,"TIME_FROM_PARTS(NUMBER, NUMBER, NUMBER [, NUMBER]) RETURN TIME",Construct a time from individual components,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TIME_SLICE,,Y,N,N,3,4,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TMP_SEARCH_FIX_900259,,Y,N,N,2,3,"TMP_SEARCH_FIX_900259(ROW(ANY), VARCHAR [, VARCHAR]) RETURN BOOLEAN",Indicates whether the row in question satisfies the query in at least one of the specified columns and variant paths.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_ARRAY,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_BINARY,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_BOOLEAN,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_CHAR,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_DATE,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_DECIMAL,,Y,N,N,1,4,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_DOUBLE,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOGRAPHY,,Y,N,N,1,1,TO_GEOGRAPHY(GEOGRAPHY) RETURN GEOGRAPHY,No-op; prevents us from re-packaging GEOGRAPHY during input,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOGRAPHY,,Y,N,N,2,2,"TO_GEOGRAPHY(GEOGRAPHY, BOOLEAN) RETURN GEOGRAPHY",No-op; prevents us from re-packaging GEOGRAPHY during input,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOGRAPHY,,Y,N,N,1,1,TO_GEOGRAPHY(VARIANT) RETURN GEOGRAPHY,Parses a variant as a GEOGRAPHY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOGRAPHY,,Y,N,N,2,2,"TO_GEOGRAPHY(VARIANT, BOOLEAN) RETURN GEOGRAPHY",Parses a variant as a GEOGRAPHY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOGRAPHY,,Y,N,N,1,1,TO_GEOGRAPHY(VARCHAR) RETURN GEOGRAPHY,"Parses a string as a GEOGRAPHY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOGRAPHY,,Y,N,N,2,2,"TO_GEOGRAPHY(VARCHAR, BOOLEAN) RETURN GEOGRAPHY","Parses a string as a GEOGRAPHY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOGRAPHY,,Y,N,N,1,1,TO_GEOGRAPHY(BINARY) RETURN GEOGRAPHY,Parses binary input in WKB format into a GEOGRAPHY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOGRAPHY,,Y,N,N,2,2,"TO_GEOGRAPHY(BINARY, BOOLEAN) RETURN GEOGRAPHY",Parses binary input in WKB format into a GEOGRAPHY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,1,1,TO_GEOMETRY(GEOMETRY) RETURN GEOMETRY,No-op; prevents us from re-packaging GEOMETRY during input,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,2,2,"TO_GEOMETRY(VARIANT, NUMBER) RETURN GEOMETRY",Parses a variant as a GEOMETRY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,1,1,TO_GEOMETRY(VARIANT) RETURN GEOMETRY,Parses a variant as a GEOMETRY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,2,2,"TO_GEOMETRY(VARCHAR, NUMBER) RETURN GEOMETRY","Parses a string as a GEOMETRY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,1,1,TO_GEOMETRY(VARCHAR) RETURN GEOMETRY,"Parses a string as a GEOMETRY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,2,2,"TO_GEOMETRY(BINARY, NUMBER) RETURN GEOMETRY",Parses binary input in WKB format into a GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,1,1,TO_GEOMETRY(BINARY) RETURN GEOMETRY,Parses binary input in WKB format into a GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,4,4,"TO_GEOMETRY(VARIANT, NUMBER, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Parses a variant as a GEOMETRY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,3,3,"TO_GEOMETRY(VARIANT, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Parses a variant as a GEOMETRY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,3,3,"TO_GEOMETRY(VARIANT, NUMBER, BOOLEAN) RETURN GEOMETRY",,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,2,2,"TO_GEOMETRY(VARIANT, BOOLEAN) RETURN GEOMETRY",,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,4,4,"TO_GEOMETRY(VARCHAR, NUMBER, BOOLEAN, BOOLEAN) RETURN GEOMETRY","Parses a string as a GEOMETRY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,3,3,"TO_GEOMETRY(VARCHAR, BOOLEAN, BOOLEAN) RETURN GEOMETRY","Parses a string as a GEOMETRY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,3,3,"TO_GEOMETRY(VARCHAR, NUMBER, BOOLEAN) RETURN GEOMETRY","Parses a string as a GEOMETRY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,2,2,"TO_GEOMETRY(VARCHAR, BOOLEAN) RETURN GEOMETRY","Parses a string as a GEOMETRY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,4,4,"TO_GEOMETRY(BINARY, NUMBER, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Parses binary input in WKB format into a GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,3,3,"TO_GEOMETRY(BINARY, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Parses binary input in WKB format into a GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,3,3,"TO_GEOMETRY(BINARY, NUMBER, BOOLEAN) RETURN GEOMETRY",Parses binary input in WKB format into a GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_GEOMETRY,,Y,N,N,2,2,"TO_GEOMETRY(BINARY, BOOLEAN) RETURN GEOMETRY",Parses binary input in WKB format into a GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_JSON,,Y,N,N,1,1,TO_JSON(VARIANT) RETURN VARCHAR,Convert variant data to string as JSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_NUMBER,,Y,N,N,1,4,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_NUMERIC,,Y,N,N,1,4,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_OBJECT,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_TIME,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_TIMESTAMP,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_TIMESTAMP_LTZ,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_TIMESTAMP_NTZ,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_TIMESTAMP_TZ,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_VARCHAR,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_VARIANT,,Y,N,N,1,1,,,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,TO_XML,,Y,N,N,1,1,TO_XML(VARIANT) RETURN VARCHAR,Convert variant data to string as XML,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRANSLATE,,Y,N,N,3,3,"TRANSLATE(VARCHAR, VARCHAR, VARCHAR) RETURN VARCHAR",replaces all occurences of each character of the source alphabet in the subject with the corresponding character in the target alphabet,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRIM,,Y,N,N,1,2,"TRIM(VARCHAR [, VARCHAR]) RETURN VARCHAR",return string trimmed from both sides,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRUNC,,Y,N,N,1,2,"TRUNC(NUMBER [, NUMBER]) RETURN NUMBER, TRUNC(FLOAT [, FLOAT]) RETURN FLOAT, TRUNC(DATE, VARCHAR) RETURN DATE, TRUNC(TIME, VARCHAR) RETURN TIME, TRUNC(TIMESTAMP_LTZ, VARCHAR) RETURN TIMESTAMP_LTZ",truncate the fractional or date part,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRUNCATE,,Y,N,N,1,2,"TRUNCATE(NUMBER [, NUMBER]) RETURN NUMBER, TRUNCATE(FLOAT [, FLOAT]) RETURN FLOAT, TRUNCATE(DATE, VARCHAR) RETURN DATE, TRUNCATE(TIME, VARCHAR) RETURN TIME, TRUNCATE(TIMESTAMP_LTZ, VARCHAR) RETURN TIMESTAMP_LTZ",truncate the fractional or date part,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_BASE64_DECODE_BINARY,,Y,N,N,1,2,"TRY_BASE64_DECODE_BINARY(VARCHAR [, VARCHAR]) RETURN BINARY",return decoded binary,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_BASE64_DECODE_STRING,,Y,N,N,1,2,"TRY_BASE64_DECODE_STRING(VARCHAR [, VARCHAR]) RETURN VARCHAR",return decoded string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_CAST,,Y,N,Y,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_DECRYPT,,Y,N,N,2,4,"TRY_DECRYPT(BINARY, VARCHAR [, BINARY] [, VARCHAR]) RETURN BINARY, TRY_DECRYPT(BINARY, VARCHAR [, VARCHAR] [, VARCHAR]) RETURN BINARY",decrypted binary string (return),,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_DECRYPT_RAW,,Y,N,N,2,6,"TRY_DECRYPT_RAW(BINARY, BINARY [, BINARY] [, BINARY] [, VARCHAR] [, BINARY]) RETURN BINARY",decrypted binary string (return),,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_HEX_DECODE_BINARY,,Y,N,N,1,1,TRY_HEX_DECODE_BINARY(VARCHAR) RETURN BINARY,return decoded binary,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_HEX_DECODE_STRING,,Y,N,N,1,1,TRY_HEX_DECODE_STRING(VARCHAR) RETURN VARCHAR,return decoded string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_PARSE_IP,,Y,N,N,2,2,"TRY_PARSE_IP(VARCHAR, VARCHAR) RETURN OBJECT",Returns an object with all the components of the IP,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_PARSE_JSON,,Y,N,N,1,1,TRY_PARSE_JSON(VARCHAR) RETURN VARIANT,Parses string as a JSON document,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_BINARY,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_BOOLEAN,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_DATE,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_DECIMAL,,Y,N,N,1,4,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_DOUBLE,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOGRAPHY,,Y,N,N,1,1,TRY_TO_GEOGRAPHY(GEOGRAPHY) RETURN GEOGRAPHY,No-op; prevents us from re-packaging GEOGRAPHY during input,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOGRAPHY,,Y,N,N,2,2,"TRY_TO_GEOGRAPHY(GEOGRAPHY, BOOLEAN) RETURN GEOGRAPHY",No-op; prevents us from re-packaging GEOGRAPHY during input,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOGRAPHY,,Y,N,N,1,1,TRY_TO_GEOGRAPHY(VARIANT) RETURN GEOGRAPHY,Tries to parse a variant as a GEOGRAPHY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOGRAPHY,,Y,N,N,2,2,"TRY_TO_GEOGRAPHY(VARIANT, BOOLEAN) RETURN GEOGRAPHY",Tries to parse a variant as a GEOGRAPHY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOGRAPHY,,Y,N,N,1,1,TRY_TO_GEOGRAPHY(VARCHAR) RETURN GEOGRAPHY,"Tries to parse a string as a GEOGRAPHY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOGRAPHY,,Y,N,N,2,2,"TRY_TO_GEOGRAPHY(VARCHAR, BOOLEAN) RETURN GEOGRAPHY","Tries to parse a string as a GEOGRAPHY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOGRAPHY,,Y,N,N,1,1,TRY_TO_GEOGRAPHY(BINARY) RETURN GEOGRAPHY,Tries to parse binary input in WKB format into a GEOGRAPHY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOGRAPHY,,Y,N,N,2,2,"TRY_TO_GEOGRAPHY(BINARY, BOOLEAN) RETURN GEOGRAPHY",Tries to parse binary input in WKB format into a GEOGRAPHY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,1,1,TRY_TO_GEOMETRY(GEOMETRY) RETURN GEOMETRY,No-op; prevents us from re-packaging GEOMETRY during input,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,2,2,"TRY_TO_GEOMETRY(VARIANT, NUMBER) RETURN GEOMETRY",Tries to parse a variant as a GEOMETRY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,1,1,TRY_TO_GEOMETRY(VARIANT) RETURN GEOMETRY,Tries to parse a variant as a GEOMETRY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,2,2,"TRY_TO_GEOMETRY(VARCHAR, NUMBER) RETURN GEOMETRY","Tries to parse a string as a GEOMETRY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,1,1,TRY_TO_GEOMETRY(VARCHAR) RETURN GEOMETRY,"Tries to parse a string as a GEOMETRY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,2,2,"TRY_TO_GEOMETRY(BINARY, NUMBER) RETURN GEOMETRY",Tries to parse binary input in WKB format into a GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,1,1,TRY_TO_GEOMETRY(BINARY) RETURN GEOMETRY,Tries to parse binary input in WKB format into a GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,4,4,"TRY_TO_GEOMETRY(VARIANT, NUMBER, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Tries to parse a variant as a GEOMETRY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,3,3,"TRY_TO_GEOMETRY(VARIANT, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Tries to parse a variant as a GEOMETRY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,3,3,"TRY_TO_GEOMETRY(VARIANT, NUMBER, BOOLEAN) RETURN GEOMETRY",Tries to parse a variant as a GEOMETRY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,2,2,"TRY_TO_GEOMETRY(VARIANT, BOOLEAN) RETURN GEOMETRY",Tries to parse a variant as a GEOMETRY object; supported format is GeoJSON,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,4,4,"TRY_TO_GEOMETRY(VARCHAR, NUMBER, BOOLEAN, BOOLEAN) RETURN GEOMETRY","Tries to parse a string as a GEOMETRY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,3,3,"TRY_TO_GEOMETRY(VARCHAR, BOOLEAN, BOOLEAN) RETURN GEOMETRY","Tries to parse a string as a GEOMETRY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,3,3,"TRY_TO_GEOMETRY(VARCHAR, NUMBER, BOOLEAN) RETURN GEOMETRY","Tries to parse a string as a GEOMETRY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,2,2,"TRY_TO_GEOMETRY(VARCHAR, BOOLEAN) RETURN GEOMETRY","Tries to parse a string as a GEOMETRY object; supported formats are GeoJSON, WKT, and WKB",,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,4,4,"TRY_TO_GEOMETRY(BINARY, NUMBER, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Tries to parse binary input in WKB format into a GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,3,3,"TRY_TO_GEOMETRY(BINARY, BOOLEAN, BOOLEAN) RETURN GEOMETRY",Tries to parse binary input in WKB format into a GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,3,3,"TRY_TO_GEOMETRY(BINARY, NUMBER, BOOLEAN) RETURN GEOMETRY",Tries to parse binary input in WKB format into a GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_GEOMETRY,,Y,N,N,2,2,"TRY_TO_GEOMETRY(BINARY, BOOLEAN) RETURN GEOMETRY",Tries to parse binary input in WKB format into a GEOMETRY object,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_NUMBER,,Y,N,N,1,4,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_NUMERIC,,Y,N,N,1,4,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_TIME,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_TIMESTAMP,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_TIMESTAMP_LTZ,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_TIMESTAMP_NTZ,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_TO_TIMESTAMP_TZ,,Y,N,N,1,2,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TRY_VALIDATE_UTF8,,Y,N,N,1,1,TRY_VALIDATE_UTF8(VARCHAR) RETURN VARCHAR,return the input string if valid UTF8 otherwise null,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,TYPEOF,,Y,N,N,1,1,TYPEOF(VARIANT) RETURN VARCHAR,Returns SQL type word of a variant value,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,UNICODE,,Y,N,N,1,1,UNICODE(VARCHAR) RETURN NUMBER,Returns the Unicode code point of the first character of the string,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,UNIFORM,,Y,N,N,3,3,"UNIFORM(NUMBER, NUMBER, NUMBER) RETURN NUMBER, UNIFORM(FLOAT, FLOAT, NUMBER) RETURN FLOAT",Returns a uniform random distribution,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,UPPER,,Y,N,N,1,1,UPPER(VARCHAR) RETURN VARCHAR,return string with all characters in uppercase,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,UUID_STRING,,Y,N,N,0,2,"UUID_STRING() RETURN VARCHAR, UUID_STRING(VARCHAR, VARCHAR) RETURN VARCHAR",Returns a pseudo-randomly generated (version 4) UUID.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,VALIDATE_STAGE_LOCATION_AGAINST_INTEGRATION,,Y,N,N,2,3,"VALIDATE_STAGE_LOCATION_AGAINST_INTEGRATION(VARCHAR, VARCHAR [, VARCHAR]) RETURN VARCHAR",returns whether a stage location is allowed or blocked by the integration,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,VARIANCE,,Y,Y,Y,1,1,"VARIANCE(NUMBER) RETURN FLOAT, VARIANCE(FLOAT) RETURN FLOAT",Returns the sample variance of the values in a group. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,VARIANCE_POP,,Y,Y,Y,1,1,"VARIANCE_POP(NUMBER) RETURN FLOAT, VARIANCE_POP(FLOAT) RETURN FLOAT",Returns the population variance of the values in a group. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,VARIANCE_SAMP,,Y,Y,Y,1,1,"VARIANCE_SAMP(NUMBER) RETURN FLOAT, VARIANCE_SAMP(FLOAT) RETURN FLOAT",Returns the sample variance of the values in a group. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,VAR_POP,,Y,Y,Y,1,1,"VAR_POP(NUMBER) RETURN FLOAT, VAR_POP(FLOAT) RETURN FLOAT",Returns the population variance of the values in a group. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,VAR_SAMP,,Y,Y,Y,1,1,"VAR_SAMP(NUMBER) RETURN FLOAT, VAR_SAMP(FLOAT) RETURN FLOAT",Returns the sample variance of the values in a group. Null values are ignored.,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,VECTOR_COSINE_DISTANCE,,Y,N,N,2,2,"VECTOR_COSINE_DISTANCE(VECTOR(INT, 0), VECTOR(INT, 0)) RETURN FLOAT",Cosine distance between vectors,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,VECTOR_INNER_PRODUCT,,Y,N,N,2,2,"VECTOR_INNER_PRODUCT(VECTOR(INT, 0), VECTOR(INT, 0)) RETURN FLOAT",Inner product between vectors,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,VECTOR_L2_DISTANCE,,Y,N,N,2,2,"VECTOR_L2_DISTANCE(VECTOR(INT, 0), VECTOR(INT, 0)) RETURN FLOAT",L2 distance between vectors,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,WEEK,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,WEEKISO,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,WEEKOFYEAR,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,WIDTH_BUCKET,,Y,N,N,4,4,"WIDTH_BUCKET(NUMBER, NUMBER, NUMBER, NUMBER) RETURN NUMBER, WIDTH_BUCKET(FLOAT, FLOAT, FLOAT, NUMBER) RETURN NUMBER",returns the bucket a value falls into in an equiwidth histogram,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,XMLGET,,Y,N,N,2,3,"XMLGET(VARIANT, VARCHAR, NUMBER) RETURN OBJECT, XMLGET(OBJECT, VARCHAR, NUMBER) RETURN OBJECT, XMLGET(VARIANT, VARCHAR) RETURN OBJECT, XMLGET(OBJECT, VARCHAR) RETURN OBJECT",Get XML element object by XML tag name,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,YEAR,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,YEAROFWEEK,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,YEAROFWEEKISO,,Y,N,N,1,1,,,,N,N,,N,SQL,N
2012-08-01T00:00:00-07:00,ZEROIFNULL,,Y,N,N,1,1,"ZEROIFNULL(NUMBER) RETURN NUMBER, ZEROIFNULL(FLOAT) RETURN FLOAT",Converts to zero if the input is NULL,,N,Y,,N,SQL,N
2012-08-01T00:00:00-07:00,ZIPF,,Y,N,N,3,3,"ZIPF(FLOAT, NUMBER, NUMBER) RETURN NUMBER",Returns a Zipf distribution,,N,N,,N,SQL,N
