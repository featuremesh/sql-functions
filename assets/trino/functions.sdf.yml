# NOTE: This file was generated from trino.csv, with the following manual modifications:
#
# - Ordering: the ordering of overloads is *significant*! Overload resolution
#   tries candidates in the order they are specified in this file, so more
#   specific signatures must come before more general ones.
# - Incorrect signatures: some functions signatures with variadic arguments are
#   incorrect in trino.csv, and have been corrected here.
# - Duplicate signatures: some functions signatures appear multiple times in
#   trino.csv, and have been deduplicated here.
# - Missing signatures: some functions signatures (e.g. `coalesce`) are
#   straightup missing from trino.csv, and have been added here.

---
function:
  name: abs
  parameters:
  - datatype: tinyint
  optional-parameters: []
  returns:
    datatype: tinyint
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#abs
  description: >
    Returns the absolute value of x.
  examples:
  - input: >-
      select abs(-1) as value;
    output: "1.0"
---
function:
  name: abs
  parameters:
  - datatype: smallint
  optional-parameters: []
  returns:
    datatype: smallint
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#abs
  description: >
    Returns the absolute value of x.
---
function:
  name: abs
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#abs
  description: >
    Returns the absolute value of x.
---
function:
  name: abs
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#abs
  description: >
    Returns the absolute value of x.
---
function:
  name: abs
  parameters:
  - datatype: decimal(p, s)
  optional-parameters: []
  returns:
    datatype: decimal(p, s)
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#abs
  description: >
    Returns the absolute value of x.
---
function:
  name: abs
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#abs
  description: >
    Returns the absolute value of x.
---
function:
  name: acos
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#acos
  description: >
    Returns the arc cosine of x.
  examples:
  - input: >-
      select acos(0.5) as value;
    output: "1.0471975511965976"
---
function:
  name: all_match
  parameters:
  - datatype: array<$1>
  - datatype: function($1, boolean)
  optional-parameters: []
  returns:
    datatype: boolean
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#all_match
  description: >
    Returns whether all elements of an array match the given predicate. Returns true
    if all the elements
    match the predicate (a special case is when the array is empty); false if one
    or more elements don’t
    match; NULL if the predicate function returns NULL for one or more elements and
    true for all
    other elements.
---
function:
  name: any_match
  parameters:
  - datatype: array<$1>
  - datatype: function($1, boolean)
  optional-parameters: []
  returns:
    datatype: boolean
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#any_match
  description: >
    Returns whether any elements of an array match the given predicate. Returns true
    if one or more
    elements match the predicate; false if none of the elements matches (a special
    case is when the
    array is empty); NULL if the predicate function returns NULL for one or more elements
    and false
    for all other elements.
---
function:
  name: approx_distinct
  kind: aggregate
  parameters:
  - datatype: boolean
  optional-parameters: []
  returns:
    datatype: bigint
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_distinct
  description: >
    Returns the approximate number of distinct input values.
    This function provides an approximation of count(DISTINCT x).
    Zero is returned if all input values are null.
---
function:
  name: approx_distinct
  kind: aggregate
  parameters:
  - datatype: boolean
  - datatype: double
  optional-parameters: []
  returns:
    datatype: bigint
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_distinct
  description: >
    Returns the approximate number of distinct input values.
    This function provides an approximation of count(DISTINCT x).
    Zero is returned if all input values are null.
---
function:
  name: approx_distinct
  kind: aggregate
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: bigint
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_distinct
  description: >
    Returns the approximate number of distinct input values.
    This function provides an approximation of count(DISTINCT x).
    Zero is returned if all input values are null.
---
function:
  name: approx_distinct
  kind: aggregate
  parameters:
  - datatype: $1
  - datatype: double
  optional-parameters: []
  returns:
    datatype: bigint
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_distinct
  description: >
    Returns the approximate number of distinct input values.
    This function provides an approximation of count(DISTINCT x).
    Zero is returned if all input values are null.
---
function:
  name: approx_distinct
  kind: aggregate
  parameters:
  - datatype: unknown
  optional-parameters: []
  returns:
    datatype: bigint
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_distinct
  description: >
    Returns the approximate number of distinct input values.
    This function provides an approximation of count(DISTINCT x).
    Zero is returned if all input values are null.
---
function:
  name: approx_distinct
  kind: aggregate
  parameters:
  - datatype: unknown
  - datatype: double
  optional-parameters: []
  returns:
    datatype: bigint
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_distinct
  description: >
    Returns the approximate number of distinct input values.
    This function provides an approximation of count(DISTINCT x).
    Zero is returned if all input values are null.
---
function:
  name: approx_most_frequent
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: map<bigint, bigint>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_most_frequent
  description: >
    Computes the top frequent values up to buckets elements approximately.
    Approximate estimation of the function enables us to pick up the frequent
    values with less memory. Larger capacity improves the accuracy of
    underlying algorithm with sacrificing the memory capacity. The returned
    value is a map containing the top elements with corresponding estimated
    frequency.
---
function:
  name: approx_most_frequent
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: varchar
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: map<varchar, bigint>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_most_frequent
  description: >
    Computes the top frequent values up to buckets elements approximately.
    Approximate estimation of the function enables us to pick up the frequent
    values with less memory. Larger capacity improves the accuracy of
    underlying algorithm with sacrificing the memory capacity. The returned
    value is a map containing the top elements with corresponding estimated
    frequency.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: array<double>
  optional-parameters: []
  returns:
    datatype: array<bigint>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: double
  - datatype: array<double>
  optional-parameters: []
  returns:
    datatype: array<bigint>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: array<double>
  optional-parameters: []
  returns:
    datatype: array<double>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: double
  - datatype: array<double>
  optional-parameters: []
  returns:
    datatype: array<double>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: real
  - datatype: array<double>
  optional-parameters: []
  returns:
    datatype: array<real>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: real
  - datatype: double
  - datatype: array<double>
  optional-parameters: []
  returns:
    datatype: array<real>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: double
  optional-parameters: []
  returns:
    datatype: bigint
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: bigint
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: bigint
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: real
  - datatype: double
  optional-parameters: []
  returns:
    datatype: real
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: real
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: real
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_percentile
  kind: aggregate
  parameters:
  - datatype: real
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: real
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#approx_percentile
  description: >
    Returns the approximate percentile for all input values of x at the
    given percentage. The value of percentage must be between zero and
    one and must be constant for all input rows.
---
function:
  name: approx_set
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: hyperloglog
  section: hyperloglog
  cross-link: https://trino.io/docs/current/functions/hyperloglog.html#approx_set
  description: >
    Returns the HyperLogLog sketch of the input data set of x. This
    data sketch underlies approx_distinct() and can be stored and
    used later by calling cardinality().
---
function:
  name: approx_set
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: hyperloglog
  section: hyperloglog
  cross-link: https://trino.io/docs/current/functions/hyperloglog.html#approx_set
  description: >
    Returns the HyperLogLog sketch of the input data set of x. This
    data sketch underlies approx_distinct() and can be stored and
    used later by calling cardinality().
---
function:
  name: approx_set
  kind: aggregate
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: hyperloglog
  section: hyperloglog
  cross-link: https://trino.io/docs/current/functions/hyperloglog.html#approx_set
  description: >
    Returns the HyperLogLog sketch of the input data set of x. This
    data sketch underlies approx_distinct() and can be stored and
    used later by calling cardinality().
---
function:
  name: arbitrary
  kind: aggregate
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: $1
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#arbitrary
  description: >
    Returns an arbitrary non-null value of x, if one exists. Identical to
    any_value().
---
function:
  name: array_agg
  kind: aggregate
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: array<$1>
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#array_agg
  description: >
    Returns an array created from the input x elements.
  examples:
    - input: >
        CREATE TABLE tbl AS VALUES (1), (5), (9); 
        SELECT array_agg(column1) AS value FROM tbl;
      output: "[1, 5, 9]"
---
function:
  name: array_distinct
  parameters:
  - datatype: array<$3>
  optional-parameters: []
  returns:
    datatype: array<$3>
  implemented-by: !datafusion
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#array_distinct
  description: >
    Remove duplicate values from the array x.
  examples:
    - input: SELECT array_distinct([1, 2, 3]) as value;
      output: "[1, 2, 3]"
    - input: SELECT array_distinct([1, 1, 2, 3]) as value;
      output: "[1, 2, 3]"

---
function:
  name: array_except
  parameters:
  - datatype: array<$3>
  - datatype: array<$3>
  optional-parameters: []
  returns:
    datatype: array<$3>
  implemented-by: !datafusion
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#array_except
  description: >
    Returns an array of elements in x but not in y, without duplicates.
  examples:
    - input: SELECT array_except([1, 1, 2, 3], [1]) AS value;
      output: "[2, 3]"
---
function:
  name: array_intersect
  parameters:
  - datatype: array<$3>
  - datatype: array<$3>
  optional-parameters: []
  returns:
    datatype: array<$3>
  implemented-by: !datafusion
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#array_intersect
  description: >
    Returns an array of the elements in the intersection of x and y, without duplicates.
  examples:
    - input: SELECT array_intersect([1, 1, 2, 3], [1]) AS value;
      output: "[1]"
    - input: SELECT array_intersect(['hello', 'world'], ['hello']) AS value;
      output: "[hello]"
---
function:
  name: array_join
  parameters:
  - datatype: array<$1>
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
    udf: array_to_string
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#array_join
  description: >
    Concatenates the elements of the given array using the delimiter. Null elements are omitted in the result.
  examples:
    - input: SELECT array_join(['hello', 'world'], ' beautiful ') AS value;
      output: hello beautiful world
---
function:
  name: array_join
  parameters:
  - datatype: array<$1>
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
    udf: array_to_string
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#array_join
  description: >
    Concatenates the elements of the given array using the delimiter.
    Null elements are omitted in the result.
---
function:
  name: array_max
  parameters:
  - datatype: array<$1>
  optional-parameters: []
  returns:
    datatype: $1
  implemented-by: !rust
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#array_max
  description: >
    Returns the maximum value of input array.
---
function:
  name: array_min
  parameters:
  - datatype: array<$1>
  optional-parameters: []
  returns:
    datatype: $1
  implemented-by: !rust
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#array_min
  description: >
    Returns the minimum value of input array.
---
function:
  name: array_position
  parameters:
  - datatype: array<$1>
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#array_position
  description: >
    Returns the position of the first occurrence of the element in array x (or 0 if not found).
  examples:
    - input: SELECT array_position([1, 1, 2], 1) AS value;
      output: "1"

---
function:
  name: array_remove
  parameters:
  - datatype: array<$3>
  - datatype: $3
  optional-parameters: []
  returns:
    datatype: array<$3>
  implemented-by: !datafusion
    udf: array_remove_all
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#array_remove
  description: >
    Remove all elements that equal element from array x.
  examples:
    - input: SELECT array_remove([1, 1, 2], 1) AS value;
      output: "[2]"
    - input: SELECT array_remove(['hello', 'bad', 'world'], 'bad') AS value;
      output: "[hello, world]"
---
function:
  name: array_sort
  parameters:
  - datatype: array<$3>
  optional-parameters: []
  returns:
    datatype: array<$3>
  implemented-by: !datafusion
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#array_sort
  description: >
    Sorts and returns the array x. The elements of x must be orderable. Null elements will be placed at the end of the returned array.

---
function:
  name: array_sort
  parameters:
  - datatype: array<$1>
  - datatype: function($1, $1, bigint)
  optional-parameters: []
  returns:
    datatype: array<$1>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#array_sort
  description: >
    Sorts and returns the array x. The elements of x must be orderable.
    Null elements will be placed at the end of the returned array.
---
function:
  name: array_union
  parameters:
  - datatype: array<$3>
  - datatype: array<$3>
  optional-parameters: []
  returns:
    datatype: array<$3>
  implemented-by: !datafusion
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#array_union
  description: >
    Returns an array of the elements in the union of x and y, without duplicates.
  examples:
    - input: SELECT array_union([1, 1], [2]) as value;
      output: "[1, 2]"
    
---
function:
  name: arrays_overlap
  parameters:
  - datatype: array<$3>
  - datatype: array<$3>
  optional-parameters: []
  returns:
    datatype: boolean
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#arrays_overlap
  description: >
    Tests if arrays x and y have any non-null elements in common.
    Returns null if there are no non-null elements in common but either array contains
    null.
---
function:
  name: asin
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#asin
  description: >
    Returns the arc sine of x.
  examples:
  - input: >-
      select asin(1) as value;
    output: "1.5707963267948966"
---
function:
  name: at_timezone
  parameters:
  - datatype: timestamp(p)
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: timestamp(p)
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#at_timezone
  description: >
    Returns the timestamp specified in timestamp with the time zone
    converted from the session time zone to the time zone specified in zone
    with precision p. In the following example, the session time zone is set
    to America/New_York, which is three hours ahead of
    America/Los_Angeles.
---
function:
  name: atan
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#atan
  description: >
    Returns the arc tangent of x.
  examples:
  - input: >-
      select atan(0) as value;
    output: "0.0"
---
function:
  name: atan2
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#atan2
  description: >
    Returns the arc tangent of y / x.
  examples:
  - input: >-
      select atan2(1, 0.5) as value;
    output: "1.1071487177940904"
---
function:
  name: avg
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#avg
  description: >
    Returns the average (arithmetic mean) of all input values.
  examples:
  - input: >-
      CREATE TABLE tbl AS VALUES (1), (5), (9); 
       SELECT avg(tbl.column1) AS value FROM tbl;
    output: "5.0"
---
function:
  name: avg
  kind: aggregate
  parameters:
  - datatype: decimal(p, s)
  optional-parameters: []
  returns:
    datatype: decimal(p, s)
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#avg
  description: >
    Returns the average (arithmetic mean) of all input values.
---
function:
  name: avg
  kind: aggregate
  parameters:
  - datatype: interval day to second
  optional-parameters: []
  returns:
    datatype: interval day to second
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#avg
  description: >
    Returns the average (arithmetic mean) of all input values.
---
function:
  name: avg
  kind: aggregate
  parameters:
  - datatype: interval year to month
  optional-parameters: []
  returns:
    datatype: interval year to month
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#avg
  description: >
    Returns the average (arithmetic mean) of all input values.
---
function:
  name: avg
  kind: aggregate
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#avg
  description: >
    Returns the average (arithmetic mean) of all input values.
---
function:
  name: bar
  parameters:
  - datatype: double
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varchar
  section: color
  cross-link: https://trino.io/docs/current/functions/color.html#bar
  description: >
    Renders a single bar in an ANSI bar chart using a default
    low_color of red and a high_color of green.  For example,
    if x of 25% and width of 40 are passed to this function. A
    10-character red bar will be drawn followed by 30 spaces to create
    a bar of 40 characters.
---
function:
  name: bar
  parameters:
  - datatype: double
  - datatype: bigint
  - datatype: color
  - datatype: color
  optional-parameters: []
  returns:
    datatype: varchar
  section: color
  cross-link: https://trino.io/docs/current/functions/color.html#bar
  description: >
    Renders a single bar in an ANSI bar chart using a default
    low_color of red and a high_color of green.  For example,
    if x of 25% and width of 40 are passed to this function. A
    10-character red bar will be drawn followed by 30 spaces to create
    a bar of 40 characters.
---
function:
  name: beta_cdf
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#beta_cdf
  description: >
    Compute the Beta cdf with given a, b parameters.  P(N < v; a, b).
    The a, b parameters must be positive real numbers and value v must be a real value.
    The value v must lie on the interval [0, 1].
---
function:
  name: bing_tile
  parameters:
  - datatype: bigint
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bingtile
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#bing_tile
  description: >
    Creates a Bing tile object from XY coordinates and a zoom level.
    Zoom levels from 1 to 23 are supported.
---
function:
  name: bing_tile
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: bingtile
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#bing_tile
  description: >
    Creates a Bing tile object from XY coordinates and a zoom level.
    Zoom levels from 1 to 23 are supported.
---
function:
  name: bing_tile_at
  parameters:
  - datatype: double
  - datatype: double
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bingtile
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#bing_tile_at
  description: >
    Returns a Bing tile at a given zoom level containing a point at a given latitude
    and longitude. Latitude must be within [-85.05112878, 85.05112878] range.
    Longitude must be within [-180, 180] range. Zoom levels from 1 to 23 are supported.
---
function:
  name: bing_tile_coordinates
  parameters:
  - datatype: bingtile
  optional-parameters: []
  returns:
    datatype: row(x bigint, y bigint)
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#bing_tile_coordinates
  description: >
    Returns the XY coordinates of a given Bing tile.
---
function:
  name: bing_tile_polygon
  parameters:
  - datatype: bingtile
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#bing_tile_polygon
  description: >
    Returns the polygon representation of a given Bing tile.
---
function:
  name: bing_tile_quadkey
  parameters:
  - datatype: bingtile
  optional-parameters: []
  returns:
    datatype: varchar
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#bing_tile_quadkey
  description: >
    Returns the quadkey of a given Bing tile.
---
function:
  name: bing_tile_zoom_level
  parameters:
  - datatype: bingtile
  optional-parameters: []
  returns:
    datatype: tinyint
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#bing_tile_zoom_level
  description: >
    Returns the zoom level of a given Bing tile.
---
function:
  name: bing_tiles_around
  parameters:
  - datatype: double
  - datatype: double
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<bingtile>
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#bing_tiles_around
  description: >
    Returns a collection of Bing tiles that surround the point specified
    by the latitude and longitude arguments at a given zoom level.
---
function:
  name: bing_tiles_around
  parameters:
  - datatype: double
  - datatype: double
  - datatype: bigint
  - datatype: double
  optional-parameters: []
  returns:
    datatype: array<bingtile>
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#bing_tiles_around
  description: >
    Returns a collection of Bing tiles that surround the point specified
    by the latitude and longitude arguments at a given zoom level.
---
function:
  name: bit_count
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bit_count
  description: >
    Count the number of bits set in x (treated as bits-bit signed
    integer) in 2’s complement representation.
---
function:
  name: bitwise_and
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bitwise_and
  description: >
    Returns the bitwise AND of x and y in 2’s complement representation.
---
function:
  name: bitwise_and_agg
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#bitwise_and_agg
  description: >
    Returns the bitwise AND of all input non-NULL values in 2’s complement representation.
    If all records inside the group are NULL, or if the group is empty, the function
    returns NULL.
---
function:
  name: bitwise_left_shift
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bitwise_left_shift
  description: >
    Returns the left shifted value of value.
---
function:
  name: bitwise_left_shift
  parameters:
  - datatype: integer
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: integer
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bitwise_left_shift
  description: >
    Returns the left shifted value of value.
---
function:
  name: bitwise_left_shift
  parameters:
  - datatype: smallint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: smallint
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bitwise_left_shift
  description: >
    Returns the left shifted value of value.
---
function:
  name: bitwise_left_shift
  parameters:
  - datatype: tinyint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: tinyint
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bitwise_left_shift
  description: >
    Returns the left shifted value of value.
---
function:
  name: bitwise_not
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bitwise_not
  description: >
    Returns the bitwise NOT of x in 2’s complement representation
    (NOT x = -x - 1).
---
function:
  name: bitwise_or
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bitwise_or
  description: >
    Returns the bitwise OR of x and y in 2’s complement representation.
---
function:
  name: bitwise_or_agg
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#bitwise_or_agg
  description: >
    Returns the bitwise OR of all input non-NULL values in 2’s complement representation.
    If all records inside the group are NULL, or if the group is empty, the function
    returns NULL.
---
function:
  name: bitwise_right_shift
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bitwise_right_shift
  description: >
    Returns the logical right shifted value of value.
---
function:
  name: bitwise_right_shift
  parameters:
  - datatype: integer
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: integer
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bitwise_right_shift
  description: >
    Returns the logical right shifted value of value.
---
function:
  name: bitwise_right_shift
  parameters:
  - datatype: smallint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: smallint
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bitwise_right_shift
  description: >
    Returns the logical right shifted value of value.
---
function:
  name: bitwise_right_shift
  parameters:
  - datatype: tinyint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: tinyint
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bitwise_right_shift
  description: >
    Returns the logical right shifted value of value.
---
function:
  name: bitwise_right_shift_arithmetic
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: bitwise
  cross-link: 
    https://trino.io/docs/current/functions/bitwise.html#bitwise_right_shift_arithmetic
  description: >
    Returns the arithmetic right shifted value of value.
---
function:
  name: bitwise_right_shift_arithmetic
  parameters:
  - datatype: integer
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: integer
  section: bitwise
  cross-link: 
    https://trino.io/docs/current/functions/bitwise.html#bitwise_right_shift_arithmetic
  description: >
    Returns the arithmetic right shifted value of value.
---
function:
  name: bitwise_right_shift_arithmetic
  parameters:
  - datatype: smallint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: smallint
  section: bitwise
  cross-link: 
    https://trino.io/docs/current/functions/bitwise.html#bitwise_right_shift_arithmetic
  description: >
    Returns the arithmetic right shifted value of value.
---
function:
  name: bitwise_right_shift_arithmetic
  parameters:
  - datatype: tinyint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: tinyint
  section: bitwise
  cross-link: 
    https://trino.io/docs/current/functions/bitwise.html#bitwise_right_shift_arithmetic
  description: >
    Returns the arithmetic right shifted value of value.
---
function:
  name: bitwise_xor
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: bitwise
  cross-link: https://trino.io/docs/current/functions/bitwise.html#bitwise_xor
  description: >
    Returns the bitwise XOR of x and y in 2’s complement representation.
---
function:
  name: bool_and
  kind: aggregate
  parameters:
  - datatype: boolean
  optional-parameters: []
  returns:
    datatype: boolean
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#bool_and
  description: >
    Returns TRUE if every input value is TRUE, otherwise FALSE.
---
function:
  name: bool_or
  kind: aggregate
  parameters:
  - datatype: boolean
  optional-parameters: []
  returns:
    datatype: boolean
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#bool_or
  description: >
    Returns TRUE if any input value is TRUE, otherwise FALSE.
---
function:
  name: cardinality
  parameters:
  - datatype: array<$3>
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#cardinality
  description: >
    Returns the cardinality (size) of the array x.
  examples:
    - input: SELECT cardinality([1, 1, 2]) as value;
      output: "3"
---
function:
  name: cardinality
  parameters:
  - datatype: hyperloglog
  optional-parameters: []
  returns:
    datatype: bigint
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#cardinality
  description: >
    Returns the cardinality (size) of the array x.
---
function:
  name: cardinality
  parameters:
  - datatype: map<$4, $5>
  optional-parameters: []
  returns:
    datatype: bigint
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#cardinality
  description: >
    Returns the cardinality (size) of the array x.
---
function:
  name: cardinality
  parameters:
  - datatype: setdigest
  optional-parameters: []
  returns:
    datatype: bigint
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#cardinality
  description: >
    Returns the cardinality (size) of the array x.
---
function:
  name: cbrt
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#cbrt
  description: >
    Returns the cube root of x.
  examples:
    - input: SELECT cbrt(328509) as value;
      output: "69.0"
---
function:
  name: ceil
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceil
  description: >
    This is an alias for ceiling().
  examples:
    - input: SELECT ceil(1.3) AS value;
      output: "2.0"
---
function:
  name: ceil
  parameters:
  - datatype: decimal(p, s)
  optional-parameters: []
  returns:
    datatype: decimal(rp, 0)
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceil
  description: >
    This is an alias for ceiling().
---
function:
  name: ceil
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceil
  description: >
    This is an alias for ceiling().
  examples:
  - input: >-
      select ceil(1.35) as value;
    output: "2.0"
---
function:
  name: ceil
  parameters:
  - datatype: integer
  optional-parameters: []
  returns:
    datatype: integer
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceil
  description: >
    This is an alias for ceiling().
---
function:
  name: ceil
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceil
  description: >
    This is an alias for ceiling().
---
function:
  name: ceil
  parameters:
  - datatype: smallint
  optional-parameters: []
  returns:
    datatype: smallint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceil
  description: >
    This is an alias for ceiling().
---
function:
  name: ceil
  parameters:
  - datatype: tinyint
  optional-parameters: []
  returns:
    datatype: tinyint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceil
  description: >
    This is an alias for ceiling().
---
function:
  name: ceiling
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceiling
  description: >
    Returns x rounded up to the nearest integer.
---
function:
  name: ceiling
  parameters:
  - datatype: decimal(p, s)
  optional-parameters: []
  returns:
    datatype: decimal(rp, 0)
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceiling
  description: >
    Returns x rounded up to the nearest integer.
---
function:
  name: ceiling
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
    udf: ceil
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceiling
  description: >
    Returns x rounded up to the nearest integer.
---
function:
  name: ceiling
  parameters:
  - datatype: integer
  optional-parameters: []
  returns:
    datatype: integer
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceiling
  description: >
    Returns x rounded up to the nearest integer.
---
function:
  name: ceiling
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  implemented-by: !datafusion
    udf: ceil
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceiling
  description: >
    Returns x rounded up to the nearest integer.
---
function:
  name: ceiling
  parameters:
  - datatype: smallint
  optional-parameters: []
  returns:
    datatype: smallint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceiling
  description: >
    Returns x rounded up to the nearest integer.
---
function:
  name: ceiling
  parameters:
  - datatype: tinyint
  optional-parameters: []
  returns:
    datatype: tinyint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ceiling
  description: >
    Returns x rounded up to the nearest integer.
---
function:
  name: char2hexint
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: teradata
  cross-link: https://trino.io/docs/current/functions/teradata.html#char2hexint
  description: >
    Returns the hexadecimal representation of the UTF-16BE encoding of the string.
---
function:
  name: checksum
  kind: aggregate
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: varbinary
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#checksum
  description: >
    Returns an order-insensitive checksum of the given values.
---
function:
  name: chr
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#chr
# classifier has two variants: one for varchar and one for bigint
  description: >
    Returns the Unicode code point n as a single character string.
  examples:
  - input: >-
      select chr(61) as value;
    output: "="
---
function:
  name: classify
  parameters:
  - datatype: map<bigint, double>
  - datatype: classifier
  optional-parameters: []
  returns:
    datatype: bigint
# ---
# function:
#   name: classify
#   parameters:
#   - datatype: map<bigint, double>
#   - datatype: classifier
#   optional-parameters: []
#   returns:
#     datatype: varchar
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#classify
  description: >
    Returns a label predicted by the given classifier SVM model.
---
function:
  name: coalesce
  variadic: uniform
  parameters:
  - datatype: $1
  returns:
    datatype: $1
  implemented-by: !datafusion
  section: conditional
  cross-link: https://trino.io/docs/current/functions/conditional.html#coalesce-function
  description: 
    Returns the first non-null value in the argument list. Like a CASE expression, arguments are only evaluated if necessary.
  examples:
    - input: >
        CREATE TABLE tbl as VALUES
        ('1', null),
        ('2', '2'),
        (null, '3');

        SELECT 
            COALESCE(column1, column2) as value
        FROM tbl;
      output: ('1', '2', '3')
---
function:
  name: codepoint
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
    udf: ascii
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#codepoint
  description: >
    Returns the Unicode code point of the only character of `string`.
  examples:
    - input: SELECT codepoint('😊') AS value;
      output: "128522"
---
function:
  name: color
  parameters:
  - datatype: double
  - datatype: color
  - datatype: color
  optional-parameters: []
  returns:
    datatype: color
  section: color
  cross-link: https://trino.io/docs/current/functions/color.html#color
  description: >
    Returns a color capturing a decoded RGB value from a 4-character
    string of the format “#000”.  The input string should be varchar
    containing a CSS-style short rgb string or one of black,
    red, green, yellow, blue, magenta, cyan,
    white.
---
function:
  name: color
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: color
  - datatype: color
  optional-parameters: []
  returns:
    datatype: color
  section: color
  cross-link: https://trino.io/docs/current/functions/color.html#color
  description: >
    Returns a color capturing a decoded RGB value from a 4-character
    string of the format “#000”.  The input string should be varchar
    containing a CSS-style short rgb string or one of black,
    red, green, yellow, blue, magenta, cyan,
    white.
---
function:
  name: color
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: color
  section: color
  cross-link: https://trino.io/docs/current/functions/color.html#color
  description: >
    Returns a color capturing a decoded RGB value from a 4-character
    string of the format “#000”.  The input string should be varchar
    containing a CSS-style short rgb string or one of black,
    red, green, yellow, blue, magenta, cyan,
    white.
---
function:
  name: combinations
  parameters:
  - datatype: array<$1>
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<array<$1>>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#combinations
  description: >
    Returns n-element sub-groups of input array. If the input array has no duplicates,
    combinations returns n-element subsets.
---
function:
  name: concat
  parameters:
  - datatype: $3
  - datatype: array<$3>
  optional-parameters: []
  returns:
    datatype: array<$3>
  implemented-by: !datafusion
    udf: array_prepend
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#concat
  description: >
    Returns the concatenation of string1, string2, ..., stringN.
    This function provides the same functionality as the
    SQL-standard concatenation operator (||).
  examples:
  - input: >-
      select concat('hello ', 'world!') as value;
    output: "hello world!"
---
function:
  name: concat
  variadic: uniform
  parameters:
  - datatype: array<$3>
  optional-parameters: []
  returns:
    datatype: array<$3>
  implemented-by: !datafusion
    udf: array_concat
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#concat
  description: >
    Returns the concatenation of string1, string2, ..., stringN.
    This function provides the same functionality as the
    SQL-standard concatenation operator (||).
---
function:
  name: concat
  parameters:
  - datatype: array<$3>
  - datatype: $3
  optional-parameters: []
  returns:
    datatype: array<$3>
  implemented-by: !datafusion
    udf: array_append
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#concat
  description: >
    Returns the concatenation of string1, string2, ..., stringN.
    This function provides the same functionality as the
    SQL-standard concatenation operator (||).
---
function:
  name: concat
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#concat
  description: >
    Returns the concatenation of string1, string2, ..., stringN.
    This function provides the same functionality as the
    SQL-standard concatenation operator (||).
---
function:
  name: concat
  variadic: uniform
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#concat
  description: >
    Returns the concatenation of string1, string2, ..., stringN.
    This function provides the same functionality as the
    SQL-standard concatenation operator (||).
---
function:
  name: concat
  variadic: uniform
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#concat
  description: >
    Returns the concatenation of string1, string2, ..., stringN.
    This function provides the same functionality as the
    SQL-standard concatenation operator (||).
---
function:
  name: concat_ws
  parameters:
  - datatype: varchar
  - datatype: array<varchar>
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#concat_ws
  description: >
    Using the first array `string0` element as separator, returns the concatenation of all subsequent strings string1, string2, ...
    If `string0`` is null, then the return value is null. Any null values provided in the arguments 
    after the separator are skipped.
  examples:
    - input: SELECT concat_ws('😊', 'hey', 'there', 'people') AS value;
      output: "hey😊there😊people"
---
function:
  name: concat_ws
  variadic: uniform
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#concat_ws
  description: >
    Returns the concatenation of string1, string2, ..., stringN
    using string0 as a separator. If string0 is null, then the return
    value is null. Any null values provided in the arguments after the
    separator are skipped.
---
function:
  name: contains
  parameters:
  - datatype: array<$1>
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: boolean
  implemented-by: !datafusion
    udf: array_has
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#contains
  description: >
    Takes an array and an element. Returns true if the array contains the element, false if not.
  examples:
    - input: SELECT contains(['hello', 'world'], 'hello') AS value;
      output: "true"
    - input: SELECT contains(['hello', 'world'], '😊') AS value;
      output: "false"
---
function:
  name: contains
  parameters:
  - datatype: varchar
  - datatype: ipaddress
  optional-parameters: []
  returns:
    datatype: boolean
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#contains
  description: >
    Returns true if the array x contains the element.
---
# NB: DF's array_has_all is similar, but does not require elts of the 2nd arg to occur in order
function:
  name: contains_sequence
  parameters:
  - datatype: array<$1>
  - datatype: array<$1>
  optional-parameters: []
  returns:
    datatype: boolean
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#contains_sequence
  description: >
    Return true if array x contains all of array seq as a subsequence (all values
    in the same consecutive order).
---
function:
  name: convex_hull_agg
  kind: aggregate
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#convex_hull_agg
  description: >
    Returns the minimum convex geometry that encloses all input geometries.
---
function:
  name: corr
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#corr
  description: >
    Returns correlation coefficient of input values.
---
function:
  name: corr
  kind: aggregate
  parameters:
  - datatype: real
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#corr
  description: >
    Returns correlation coefficient of input values.
---
function:
  name: cos
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#cos
  description: >
    Returns the cosine of x.
  examples:
  - input: >-
      select cos(1.0) as value;
    output: "0.5403023058681398"
---
function:
  name: cosh
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#cosh
  description: >
    Returns the hyperbolic cosine of the given value.
  examples:
    - input: SELECT cosh(0) AS value;
      output: "1.0"
---
function:
  name: cosine_similarity
  parameters:
  - datatype: map<varchar, double>
  - datatype: map<varchar, double>
  optional-parameters: []
  returns:
    datatype: double
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#cosine_similarity
  description: >
    Returns the cosine similarity between the sparse vectors x and y.
---
function:
  name: count
  kind: aggregate
  parameters: []
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#count
  description: >
    Returns the number of input rows.
  examples:
  - input: >-
      CREATE TABLE tbl AS VALUES (1), (5), (9); 
       SELECT count(tbl.column1) AS value FROM tbl;
    output: "3"
---
function:
  name: count
  kind: aggregate
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#count
  description: >
    Returns the number of input rows.
---
function:
  name: count_if
  kind: aggregate
  parameters:
  - datatype: boolean
  optional-parameters: []
  returns:
    datatype: bigint
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#count_if
  description: >
    Returns the number of TRUE input values.
    This function is equivalent to count(CASE WHEN x THEN 1 END).
---
function:
  name: covar_pop
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#covar_pop
  description: >
    Returns the population covariance of input values.
---
function:
  name: covar_pop
  kind: aggregate
  parameters:
  - datatype: real
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#covar_pop
  description: >
    Returns the population covariance of input values.
---
function:
  name: covar_samp
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#covar_samp
  description: >
    Returns the sample covariance of input values.
---
function:
  name: covar_samp
  kind: aggregate
  parameters:
  - datatype: real
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#covar_samp
  description: >
    Returns the sample covariance of input values.
---
function:
  name: crc32
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: bigint
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#crc32
  description: >
    Computes the CRC-32 of binary. For general purpose hashing, use
    xxhash64(), as it is much faster and produces a better quality hash.
---
function:
  name: cume_dist
  kind: window
  parameters: []
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#cume_dist
  description: >
    Returns the cumulative distribution of a value in a group of values. 
    The result is the number of rows preceding or peer with the row in the window ordering 
    of the window partition divided by the total number of rows in the window partition. 
    Thus, any tie values in the ordering will evaluate to the same distribution value.
---
function:
  name: current_date
  parameters: []
  optional-parameters: []
  returns:
    datatype: date
  special: true
  volatility: stable
  implemented-by: !datafusion
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#current_date
  description: >
    Returns the current date as of the start of the query.
  examples:
    - input: SELECT current_date() AS value;
      output: "2024-06-20"
---
function:
  name: current_groups
  parameters: []
  optional-parameters: []
  returns:
    datatype: array<varchar>
  volatility: stable
  section: session
  cross-link: https://trino.io/docs/current/functions/session.html#current_groups
  description: >
    Returns the list of groups for the current user running the query.
---
function:
  name: current_timezone
  parameters: []
  optional-parameters: []
  returns:
    datatype: varchar
  volatility: stable
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#current_timezone
  description: >
    Returns the current time zone in the format defined by IANA
    (e.g., America/Los_Angeles) or as fixed offset from UTC (e.g., +08.35)
---
function:
  name: date
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: date
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date
  description: >
    This `date(x)` is an alias for `CAST(x AS date)`.
  examples:
    - input: SELECT date('2024-06-20') AS value;
      output: "2024-06-20"
---
function:
  name: date
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: date
  implemented-by: !datafusion
    udf: to_date
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date
  description: >
    This is an alias for CAST(x AS date).
---
function:
  name: date_add
  parameters:
  - datatype: varchar
  - datatype: bigint
  - datatype: date
  optional-parameters: []
  returns:
    datatype: date
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date_add
  description: >
    Adds an interval value of type unit to timestamp.
    Subtraction can be performed by using a negative value.
---
function:
  name: date_add
  parameters:
  - datatype: varchar
  - datatype: bigint
  - datatype: time(p)
  optional-parameters: []
  returns:
    datatype: time(p)
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date_add
  description: >
    Adds an interval value of type unit to timestamp.
    Subtraction can be performed by using a negative value.
---
function:
  name: date_add
  parameters:
  - datatype: varchar
  - datatype: bigint
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: timestamp(p)
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date_add
  description: >
    Adds an interval value of type unit to timestamp.
    Subtraction can be performed by using a negative value.
---
function:
  name: date_diff
  parameters:
  - datatype: varchar
  - datatype: date
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date_diff
  description: >
    Takes a unit, timestamp1, and timestamp2. Returns timestamp2 - timestamp1 expressed in terms of unit.
  examples:
    - input: SELECT date_diff('second', TIMESTAMP '2020-03-01 00:00:00', TIMESTAMP '2020-03-02 00:00:00') AS value;
      output: "86400"
    - input: SELECT date_diff('hour', TIMESTAMP '2020-03-01 00:00:00 UTC', TIMESTAMP '2020-03-02 00:00:00 UTC') AS value;
      output: "24"
    - input: SELECT date_diff('day', DATE '2020-03-01', DATE '2020-03-02') AS value;
      output: "1"
    - input: SELECT date_diff('second', TIMESTAMP '2020-06-01 12:30:45.000000000', TIMESTAMP '2020-06-02 12:30:45.123456789') AS value;
      output: "86400"
    - input: SELECT date_diff('millisecond', TIMESTAMP '2020-06-01 12:30:45.000000000', TIMESTAMP '2020-06-02 12:30:45.123456789') AS value;
      output: "86400123"


---
function:
  name: date_diff
  parameters:
  - datatype: varchar
  - datatype: time(p)
  - datatype: time(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date_diff
  description: >
    Returns timestamp2 - timestamp1 expressed in terms of unit.
---
function:
  name: date_diff
  parameters:
  - datatype: varchar
  - datatype: timestamp(p)
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date_diff
  description: >
    Returns timestamp2 - timestamp1 expressed in terms of unit.
---
function:
  name: date_format
  parameters:
  - datatype: timestamp(p)
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
    udf: to_char
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date_format
  description: >
    Formats timestamp as a string using format.
  examples:
    - input: SELECT date_format(TIMESTAMP '2022-10-20 05:10:00', '%m-%d-%Y %H') AS value;
      output: 10-20-2022 05
---
# NB: Unlike Trino date_parse, DF to_timestamp appears to insist
#     on the input and the format string to have info up to a second.
function:
  name: date_parse
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: timestamp
  implemented-by: !datafusion
    udf: to_timestamp
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date_parse
  description: >
    Parses string into a timestamp using format.
  # examples:
  #   - input: SELECT date_parse('2022/10/20/05', '%Y/%m/%d/%H');
  #     output: 
---
function:
  name: date_trunc
  parameters:
  - datatype: varchar
  - datatype: time(p)
  optional-parameters: []
  returns:
    datatype: time(p)
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date_trunc
  description: >
    Returns the date x truncated to unit.
  examples:
    - input: SELECT date_trunc('day' , TIMESTAMP '2022-10-20 05:10:00') AS value;
      output: "2022-10-20T00:00:00"
    - input: SELECT date_trunc('month' , TIMESTAMP '2022-10-20 05:10:00') AS value;
      output: "2022-10-01T00:00:00"
    - input: SELECT date_trunc('year', TIMESTAMP '2022-10-20 05:10:00');
      output: "2022-01-01T00:00:00"
---
function:
  name: date_trunc
  parameters:
  - datatype: varchar
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: timestamp(p)
  implemented-by: !datafusion
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date_trunc
  description: >
    Returns x truncated to unit.
---
function:
  name: date_trunc
  parameters:
  - datatype: varchar
  - datatype: date
  optional-parameters: []
  returns:
    datatype: date
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#date_trunc
  description: >
    Returns x truncated to unit.
---
function:
  name: day
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#day
  description: >
    Returns the day of the month from x.
  examples:
    - input: SELECT day(date('2022-10-20')) AS value;
      output: "20"
---
function:
  name: day
  parameters:
  - datatype: interval day to second
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#day
  description: >
    Returns the day of the month from x.
---
function:
  name: day
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#day
  description: >
    Returns the day of the month from x.
---
function:
  name: day_of_month
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#day_of_month
  description: >
    This is an alias for day().
---
function:
  name: day_of_month
  parameters:
  - datatype: interval day to second
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#day_of_month
  description: >
    This is an alias for day().
---
function:
  name: day_of_month
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#day_of_month
  description: >
    This is an alias for day().
---
function:
  name: day_of_week
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#day_of_week
  description: >
    Returns the ISO day of the week from x.
    The value ranges from 1 (Monday) to 7 (Sunday).
---
function:
  name: day_of_week
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#day_of_week
  description: >
    Returns the ISO day of the week from x.
    The value ranges from 1 (Monday) to 7 (Sunday).
---
function:
  name: day_of_year
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#day_of_year
  description: >
    Returns the day of the year from x.
    The value ranges from 1 to 366.
---
function:
  name: day_of_year
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#day_of_year
  description: >
    Returns the day of the year from x.
    The value ranges from 1 to 366.
---
function:
  name: degrees
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#degrees
  description: >
    Converts angle x in radians to degrees.
  examples:
    - input: SELECT degrees(3.14159) AS value;
      output: "179.9998547447946"
---
function:
  name: dense_rank
  kind: window
  parameters: []
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#dense_rank
  description: >
    Returns the rank of a value in a group of values. This is similar to
    rank(), except that tie values do not produce gaps in the sequence.
  examples:
    - input: >
        SELECT name, DENSE_RANK() OVER (ORDER BY score) AS dense_rank_col
        FROM (
            VALUES ('A', 10), ('B', 20), ('C', 20), ('D', 30)
        ) AS t (name, score)
      output: ('A', 1), ('B', 2), ('C', 2), ('D', 3)
---
function:
  name: dow
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#dow
  description: >
    This is an alias for day_of_week().
---
function:
  name: dow
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#dow
  description: >
    This is an alias for day_of_week().
---
function:
  name: doy
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#doy
  description: >
    This is an alias for day_of_year().
---
function:
  name: doy
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#doy
  description: >
    This is an alias for day_of_year().
---
function:
  name: e
  parameters: []
  optional-parameters: []
  returns:
    datatype: double
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#e
  description: >
    Returns the constant Euler’s number.
---
function:
  name: element_at
  parameters:
  - datatype: map<$4, $5>
  - datatype: $4
  optional-parameters: []
  returns:
    datatype: $5
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#element_at
  description: >
    Returns element of array at given index.
    If index > 0, this function provides the same functionality as the SQL-standard
    subscript operator ([]),
    except that the function returns NULL when accessing an index larger than array
    length, whereas
    the subscript operator would fail in such a case.
    If index < 0, element_at accesses elements from the last to the first.
  examples:
    - input: SELECT element_at([3, 5, 7], 2) AS value;
      output: "5"
---
function:
  name: element_at
  parameters:
  - datatype: array<$3>
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: $3
  implemented-by: !datafusion
    udf: array_element
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#element_at
  description: >
    Returns element of array at given index.
    If index > 0, this function provides the same functionality as the SQL-standard
    subscript operator ([]),
    except that the function returns NULL when accessing an index larger than array
    length, whereas
    the subscript operator would fail in such a case.
    If index < 0, element_at accesses elements from the last to the first.
---
function:
  name: empty_approx_set
  parameters: []
  optional-parameters: []
  returns:
    datatype: hyperloglog
  section: hyperloglog
  cross-link: https://trino.io/docs/current/functions/hyperloglog.html#empty_approx_set
  description: >
    Returns an empty HyperLogLog.
---
function:
  name: evaluate_classifier_predictions
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varchar
---
function:
  name: evaluate_classifier_predictions
  kind: aggregate
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
---
function:
  name: every
  kind: aggregate
  parameters:
  - datatype: boolean
  optional-parameters: []
  returns:
    datatype: boolean
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#every
  description: >
    This is an alias for bool_and().
---
function:
  name: exp
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#exp
  description: >
    Returns Euler’s number raised to the power of x.
  examples:
  - input: >-
      select exp(1.0) as value;
    output: "2.718281828459045"
---
function:
  name: features
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<bigint, double>
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#features
  description: >
    Returns the map representing the feature vector.
---
function:
  name: features
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<bigint, double>
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#features
  description: >
    Returns the map representing the feature vector.
---
function:
  name: features
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<bigint, double>
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#features
  description: >
    Returns the map representing the feature vector.
---
function:
  name: features
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<bigint, double>
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#features
  description: >
    Returns the map representing the feature vector.
---
function:
  name: features
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<bigint, double>
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#features
  description: >
    Returns the map representing the feature vector.
---
function:
  name: features
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<bigint, double>
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#features
  description: >
    Returns the map representing the feature vector.
---
function:
  name: features
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<bigint, double>
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#features
  description: >
    Returns the map representing the feature vector.
---
function:
  name: features
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<bigint, double>
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#features
  description: >
    Returns the map representing the feature vector.
---
function:
  name: features
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<bigint, double>
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#features
  description: >
    Returns the map representing the feature vector.
---
function:
  name: features
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<bigint, double>
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#features
  description: >
    Returns the map representing the feature vector.
---
function:
  name: filter
  parameters:
  - datatype: array<$1>
  - datatype: function($1, boolean)
  optional-parameters: []
  returns:
    datatype: array<$1>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#filter
  description: >
    Constructs an array from those elements of array for which function returns true.
---
function:
  name: first_value
  kind: window
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: $1
  implemented-by: !datafusion
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#first_value
  description: >
    Returns the first value of the window.
---
function:
  name: flatten
  parameters:
  - datatype: array<array<$3>>
  optional-parameters: []
  returns:
    datatype: array<$3>
  implemented-by: !datafusion
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#flatten
  description: >
    Flattens an array(array(T)) to an array(T) by concatenating the contained arrays.
  examples:
    - input: >
        SELECT
        flatten(
            ARRAY [ARRAY [1, 2],
            ARRAY [3, 4]])
        AS value;
      output: "[1, 2, 3, 4]"
---
function:
  name: floor
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#floor
  description: >
    Returns x rounded down to the nearest integer.
---
function:
  name: floor
  parameters:
  - datatype: decimal(p, s)
  optional-parameters: []
  returns:
    datatype: decimal(rp, 0)
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#floor
  description: >
    Returns x rounded down to the nearest integer.
---
function:
  name: floor
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#floor
  description: >
    Returns x rounded down to the nearest integer.
  examples:
  - input: >-
      select floor(2.718) as value;
    output: "2.0"
---
function:
  name: floor
  parameters:
  - datatype: integer
  optional-parameters: []
  returns:
    datatype: integer
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#floor
  description: >
    Returns x rounded down to the nearest integer.
---
function:
  name: floor
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#floor
  description: >
    Returns x rounded down to the nearest integer.
---
function:
  name: floor
  parameters:
  - datatype: smallint
  optional-parameters: []
  returns:
    datatype: smallint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#floor
  description: >
    Returns x rounded down to the nearest integer.
---
function:
  name: floor
  parameters:
  - datatype: tinyint
  optional-parameters: []
  returns:
    datatype: tinyint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#floor
  description: >
    Returns x rounded down to the nearest integer.
---
function:
  name: format_datetime
  parameters:
  - datatype: timestamp(p)
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#format_datetime
  description: >
    Formats timestamp as a string using format.
---
function:
  name: format_number
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varchar
  section: conversion
  cross-link: https://trino.io/docs/current/functions/conversion.html#format_number
  description: >
    Returns a formatted string using a unit symbol.
---
function:
  name: format_number
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: varchar
  section: conversion
  cross-link: https://trino.io/docs/current/functions/conversion.html#format_number
  description: >
    Returns a formatted string using a unit symbol.
---
function:
  name: from_base
  parameters:
  - datatype: varchar
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#from_base
  description: >
    Returns the value of string interpreted as a base-radix number.
---
function:
  name: from_base32
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#from_base32
  description: >
    Decodes binary data from the base32 encoded string.
---
function:
  name: from_base32
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#from_base32
  description: >
    Decodes binary data from the base32 encoded string.
---
# NB: DF provides `decode`, which probably uses the same algorithm, but the signature is different,
#     it takes "'base64' or 'hex' as the second argument.
function:
  name: from_base64
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#from_base64
  description: >
    Decodes binary data from the base64 encoded string.
---
function:
  name: from_base64
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#from_base64
  description: >
    Decodes binary data from the base64 encoded string.
---
function:
  name: from_base64url
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#from_base64url
  description: >
    Decodes binary data from the base64 encoded string using the URL safe alphabet.
---
function:
  name: from_base64url
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#from_base64url
  description: >
    Decodes binary data from the base64 encoded string using the URL safe alphabet.
---
function:
  name: from_big_endian_32
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: bigint
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#from_big_endian_32
  description: >
    Decodes the 32-bit two’s complement big-endian binary.
    The input must be exactly 4 bytes.
---
function:
  name: from_big_endian_64
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: bigint
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#from_big_endian_64
  description: >
    Decodes the 64-bit two’s complement big-endian binary.
    The input must be exactly 8 bytes.
---
function:
  name: from_encoded_polyline
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#from_encoded_polyline
  description: >
    Decodes a polyline to a linestring.
---
function:
  name: from_geojson_geometry
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: sphericalgeography
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#from_geojson_geometry
  description: >
    Returns the spherical geography type object from the GeoJSON representation stripping
    non geometry key/values.
    Feature and FeatureCollection are not supported.
---
# NB: DF provides `decode`, which probably uses the same algorithm, but the signature is different,
#     it takes "'base64' or 'hex' as the second argument.
function:
  name: from_hex
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#from_hex
  description: >
    Decodes binary data from the hex encoded string.
---
function:
  name: from_hex
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#from_hex
  description: >
    Decodes binary data from the hex encoded string.
---
function:
  name: from_ieee754_32
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: real
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#from_ieee754_32
  description: >
    Decodes the 32-bit big-endian binary in IEEE 754 single-precision floating-point
    format.
    The input must be exactly 4 bytes.
---
function:
  name: from_ieee754_64
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: double
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#from_ieee754_64
  description: >
    Decodes the 64-bit big-endian binary in IEEE 754 double-precision floating-point
    format.
    The input must be exactly 8 bytes.
---
function:
  name: from_iso8601_date
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: date
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#from_iso8601_date
  description: >
    Parses the ISO 8601 formatted date string into a date. The date can
    be a calendar date, a week date using ISO week numbering, or year and day
    of year combined.
---
function:
  name: from_iso8601_timestamp
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: timestamp
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#from_iso8601_timestamp
  description: >
    Parses the ISO 8601 formatted date string, optionally with time and time
    zone, into a timestamp(3) with time zone. The time defaults to
    00.00.00.000, and the time zone defaults to the session time zone.
---
function:
  name: from_iso8601_timestamp_nanos
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: timestamp(9)
  section: datetime
  cross-link: 
    https://trino.io/docs/current/functions/datetime.html#from_iso8601_timestamp_nanos
  description: >
    Parses the ISO 8601 formatted date and time string. The time zone
    defaults to the session time zone.
---
function:
  name: from_unixtime
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: timestamp
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#from_unixtime
  description: >
    Returns the UNIX timestamp unixtime as a timestamp with time zone. unixtime is
    the
    number of seconds since 1970-01-01 00.00.00 UTC.
  examples:
    - input: SELECT from_unixtime(999919900) AS value;
      output: "2001-09-08T03:31:40"
---
function:
  name: from_unixtime
  parameters:
  - datatype: bigint
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: timestamp
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#from_unixtime
  description: >
    Returns the UNIX timestamp unixtime as a timestamp with time zone. unixtime is
    the
    number of seconds since 1970-01-01 00.00.00 UTC.
---
function:
  name: from_unixtime
  parameters:
  - datatype: bigint
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: timestamp
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#from_unixtime
  description: >
    Returns the UNIX timestamp unixtime as a timestamp with time zone. unixtime is
    the
    number of seconds since 1970-01-01 00.00.00 UTC.
---
function:
  name: from_unixtime_nanos
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: timestamp(9)
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#from_unixtime_nanos
  description: >
    Returns the UNIX timestamp unixtime as a timestamp with time zone. unixtime is
    the
    number of nanoseconds since 1970-01-01 00.00.00.000000000 UTC.
---
function:
  name: from_unixtime_nanos
  parameters:
  - datatype: decimal(p, s)
  optional-parameters: []
  returns:
    datatype: timestamp(9)
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#from_unixtime_nanos
  description: >
    Returns the UNIX timestamp unixtime as a timestamp with time zone. unixtime is
    the
    number of nanoseconds since 1970-01-01 00.00.00.000000000 UTC.
---
function:
  name: from_utf8
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varchar
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#from_utf8
  description: >
    Decodes a UTF-8 encoded string from binary. Invalid UTF-8 sequences
    are replaced with the Unicode replacement character U+FFFD.
---
function:
  name: from_utf8
  parameters:
  - datatype: varbinary
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varchar
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#from_utf8
  description: >
    Decodes a UTF-8 encoded string from binary. Invalid UTF-8 sequences
    are replaced with the Unicode replacement character U+FFFD.
---
function:
  name: from_utf8
  parameters:
  - datatype: varbinary
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#from_utf8
  description: >
    Decodes a UTF-8 encoded string from binary. Invalid UTF-8 sequences
    are replaced with the Unicode replacement character U+FFFD.
---
function:
  name: geometric_mean
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#geometric_mean
  description: >
    Returns the geometric mean of all input values.
---
function:
  name: geometric_mean
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#geometric_mean
  description: >
    Returns the geometric mean of all input values.
---
function:
  name: geometric_mean
  kind: aggregate
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#geometric_mean
  description: >
    Returns the geometric mean of all input values.
---
function:
  name: geometry_from_hadoop_shape
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: 
    https://trino.io/docs/current/functions/geospatial.html#geometry_from_hadoop_shape
  description: >
    Returns a geometry type object from Spatial Framework for Hadoop representation.
---
function:
  name: geometry_invalid_reason
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: varchar
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#geometry_invalid_reason
  description: >
    Returns the reason for why the input geometry is not valid.
    Returns NULL if the input is valid.
---
function:
  name: geometry_nearest_points
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: row(c0 geometry, c1 geometry)
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#geometry_nearest_points
  description: >
    Returns the points on each geometry nearest the other.  If either geometry
    is empty, return NULL.  Otherwise, return a row of two Points that have
    the minimum distance of any two points on the geometries.  The first Point
    will be from the first Geometry argument, the second from the second Geometry
    argument.  If there are multiple pairs with the minimum distance, one pair
    is chosen arbitrarily.
---
function:
  name: geometry_to_bing_tiles
  parameters:
  - datatype: geometry
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<bingtile>
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#geometry_to_bing_tiles
  description: >
    Returns the minimum set of Bing tiles that fully covers a given geometry at
    a given zoom level. Zoom levels from 1 to 23 are supported.
---
function:
  name: geometry_union
  parameters:
  - datatype: array<geometry>
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#geometry_union
  description: >
    Returns a geometry that represents the point set union of the input geometries.
    Performance
    of this function, in conjunction with array_agg() to first aggregate the input
    geometries,
    may be better than geometry_union_agg(), at the expense of higher memory utilization.
---
function:
  name: geometry_union_agg
  kind: aggregate
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#geometry_union_agg
  description: >
    Returns a geometry that represents the point set union of all input geometries.
---
function:
  name: great_circle_distance
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#great_circle_distance
  description: >
    Returns the great-circle distance between two points on Earth’s surface in kilometers.
---
function:
  name: greatest
  variadic: uniform
  parameters:
  - datatype: $3
  optional-parameters: []
  returns:
    datatype: $3
  implemented-by: !rust
  section: comparison
  cross-link: https://trino.io/docs/current/functions/comparison.html#greatest
  description: >
    Returns the largest of the provided values.
  examples:
    - input: SELECT greatest(1, 2, 3) AS value;
      output: "3"
---
function:
  name: grouping
  kind: aggregate
  variadic: any
  parameters: []
  returns:
    datatype: int
  implemented-by: !datafusion
---
function:
  name: hamming_distance
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: bigint
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#hamming_distance
  description: >
    Returns the Hamming distance of string1 and string2,
    i.e. the number of positions at which the corresponding characters are different.
    Note that the two strings must have the same length.
---
function:
  name: hash_counts
  parameters:
  - datatype: setdigest
  optional-parameters: []
  returns:
    datatype: map<bigint, smallint>
  section: setdigest
  cross-link: https://trino.io/docs/current/functions/setdigest.html#hash_counts
  description: >
    Returns a map containing the Murmur3Hash128
    hashed values and the count of their occurences within
    the internal MinHash structure belonging to x.
---
function:
  name: histogram
  kind: aggregate
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: map<$1, bigint>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#histogram
  description: >
    Returns a map containing the count of the number of times each input value occurs.
---
function:
  name: hmac_md5
  parameters:
  - datatype: varbinary
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#hmac_md5
  description: >
    Computes HMAC with MD5 of binary with the given key.
---
function:
  name: hmac_sha1
  parameters:
  - datatype: varbinary
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#hmac_sha1
  description: >
    Computes HMAC with SHA1 of binary with the given key.
---
function:
  name: hmac_sha256
  parameters:
  - datatype: varbinary
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#hmac_sha256
  description: >
    Computes HMAC with SHA256 of binary with the given key.
---
function:
  name: hmac_sha512
  parameters:
  - datatype: varbinary
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#hmac_sha512
  description: >
    Computes HMAC with SHA512 of binary with the given key.
---
function:
  name: hour
  parameters:
  - datatype: interval day to second
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#hour
  description: >
    Returns the hour of the day from x.
    The value ranges from 0 to 23.
---
function:
  name: hour
  parameters:
  - datatype: time(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#hour
  description: >
    Returns the hour of the day from x.
    The value ranges from 0 to 23.
---
function:
  name: hour
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#hour
  description: >
    Returns the hour of the day from x.
    The value ranges from 0 to 23.
---
function:
  name: human_readable_seconds
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: varchar
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#human_readable_seconds
  description: >
    Formats the double value of seconds into a human readable string containing
    weeks, days, hours, minutes, and seconds.
---
function:
  name: index
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
    udf: strpos
  section: teradata
  cross-link: https://trino.io/docs/current/functions/teradata.html#index
  description: >
    Alias for strpos() function.
  examples:
    - input: SELECT INDEX('abcdefg', 'c')
      output: "3"
---
function:
  name: infinity
  parameters: []
  optional-parameters: []
  returns:
    datatype: double
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#infinity
  description: >
    Returns the constant representing positive infinity.
---
function:
  name: intersection_cardinality
  parameters:
  - datatype: setdigest
  - datatype: setdigest
  optional-parameters: []
  returns:
    datatype: bigint
  section: setdigest
  cross-link: https://trino.io/docs/current/functions/setdigest.html#intersection_cardinality
  description: >
    Returns the estimation for the cardinality of the intersection of the two set
    digests.
---
function:
  name: inverse_beta_cdf
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#inverse_beta_cdf
  description: >
    Compute the inverse of the Beta cdf with given a, b parameters for the cumulative
    probability (p). P(N < n). The a, b parameters must be positive real values.
    The probability p must lie on the interval [0, 1].
---
function:
  name: inverse_normal_cdf
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#inverse_normal_cdf
  description: >
    Compute the inverse of the Normal cdf with given mean and standard
    deviation (sd) for the cumulative probability (p). P(N < n). The mean must be
    a real value and the standard deviation must be a real and positive value.
    The probability p must lie on the interval (0, 1).
---
function:
  name: is_finite
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: boolean
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#is_finite
  description: >
    Determine if x is finite.
---
function:
  name: is_infinite
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: boolean
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#is_infinite
  description: >
    Determine if x is infinite.
---
function:
  name: is_json_scalar
  parameters:
  - datatype: json
  optional-parameters: []
  returns:
    datatype: boolean
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#is_json_scalar
  description: >
    Determine if json is a scalar (i.e. a JSON number, a JSON string, true, false
    or null).
---
function:
  name: is_json_scalar
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: boolean
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#is_json_scalar
  description: >
    Determine if json is a scalar (i.e. a JSON number, a JSON string, true, false
    or null).
---
function:
  name: is_nan
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: boolean
  implemented-by: !datafusion
    udf: isnan
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#is_nan
  description: >
    Determine if `x` is not-a-number.
  examples:
    - input: select is_nan(1.1) as value;
      output: "false"
---
function:
  name: is_nan
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: boolean
  implemented-by: !datafusion
    udf: isnan
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#is_nan
  description: >
    Determine if x is not-a-number.
---
function:
  name: jaccard_index
  parameters:
  - datatype: setdigest
  - datatype: setdigest
  optional-parameters: []
  returns:
    datatype: double
  section: setdigest
  cross-link: https://trino.io/docs/current/functions/setdigest.html#jaccard_index
  description: >
    Returns the estimation of Jaccard index for
    the two set digests.
---
function:
  name: json_array_contains
  parameters:
  - datatype: json
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: boolean
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_array_contains
  description: >
    Determine if value exists in json (a string containing a JSON array).
---
function:
  name: json_array_contains
  parameters:
  - datatype: json
  - datatype: boolean
  optional-parameters: []
  returns:
    datatype: boolean
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_array_contains
  description: >
    Determine if value exists in json (a string containing a JSON array).
---
function:
  name: json_array_contains
  parameters:
  - datatype: json
  - datatype: double
  optional-parameters: []
  returns:
    datatype: boolean
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_array_contains
  description: >
    Determine if value exists in json (a string containing a JSON array).
---
function:
  name: json_array_contains
  parameters:
  - datatype: json
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: boolean
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_array_contains
  description: >
    Determine if value exists in json (a string containing a JSON array).
---
function:
  name: json_array_contains
  parameters:
  - datatype: varchar
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: boolean
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_array_contains
  description: >
    Determine if value exists in json (a string containing a JSON array).
---
function:
  name: json_array_contains
  parameters:
  - datatype: varchar
  - datatype: boolean
  optional-parameters: []
  returns:
    datatype: boolean
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_array_contains
  description: >
    Determine if value exists in json (a string containing a JSON array).
---
function:
  name: json_array_contains
  parameters:
  - datatype: varchar
  - datatype: double
  optional-parameters: []
  returns:
    datatype: boolean
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_array_contains
  description: >
    Determine if value exists in json (a string containing a JSON array).
---
function:
  name: json_array_contains
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: boolean
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_array_contains
  description: >
    Determine if value exists in json (a string containing a JSON array).
---
function:
  name: json_array_get
  parameters:
  - datatype: json
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: json
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_array_get
  description: >
    Warning
---
function:
  name: json_array_get
  parameters:
  - datatype: varchar
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: json
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_array_get
  description: >
    Warning
---
function:
  name: json_array_length
  parameters:
  - datatype: json
  optional-parameters: []
  returns:
    datatype: bigint
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_array_length
  description: >
    Returns the array length of json (a string containing a JSON array).
---
function:
  name: json_array_length
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: bigint
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_array_length
  description: >
    Returns the array length of json (a string containing a JSON array).
---
function:
  name: json_extract
  parameters:
  - datatype: json
  - datatype: jsonpath
  optional-parameters: []
  returns:
    datatype: json
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_extract
  description: >
    Evaluates the JSONPath-like expression json_path on json
    (a string containing JSON) and returns the result as a JSON string.
---
function:
  name: json_extract
  parameters:
  - datatype: varchar
  - datatype: jsonpath
  optional-parameters: []
  returns:
    datatype: json
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_extract
  description: >
    Evaluates the JSONPath-like expression json_path on json
    (a string containing JSON) and returns the result as a JSON string.
---
function:
  name: json_extract_scalar
  parameters:
  - datatype: json
  - datatype: jsonpath
  optional-parameters: []
  returns:
    datatype: varchar
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_extract_scalar
  description: >
    Like json_extract(), but returns the result value as a string (as opposed
    to being encoded as JSON). The value referenced by json_path must be a
    scalar (boolean, number or string).
---
function:
  name: json_extract_scalar
  parameters:
  - datatype: varchar
  - datatype: jsonpath
  optional-parameters: []
  returns:
    datatype: varchar
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_extract_scalar
  description: >
    Like json_extract(), but returns the result value as a string (as opposed
    to being encoded as JSON). The value referenced by json_path must be a
    scalar (boolean, number or string).
---
function:
  name: json_format
  parameters:
  - datatype: json
  optional-parameters: []
  returns:
    datatype: varchar
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_format
  description: >
    Returns the JSON text serialized from the input JSON value.
    This is inverse function to json_parse().
---
function:
  name: json_parse
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: json
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_parse
  description: >
    Returns the JSON value deserialized from the input JSON text.
    This is inverse function to json_format().
---
function:
  name: json_size
  parameters:
  - datatype: json
  - datatype: jsonpath
  optional-parameters: []
  returns:
    datatype: bigint
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_size
  description: >
    Like json_extract(), but returns the size of the value.
    For objects or arrays, the size is the number of members,
    and the size of a scalar value is zero.
---
function:
  name: json_size
  parameters:
  - datatype: varchar
  - datatype: jsonpath
  optional-parameters: []
  returns:
    datatype: bigint
  section: json
  cross-link: https://trino.io/docs/current/functions/json.html#json_size
  description: >
    Like json_extract(), but returns the size of the value.
    For objects or arrays, the size is the number of members,
    and the size of a scalar value is zero.
---
function:
  name: kurtosis
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#kurtosis
  description: >
    Returns the excess kurtosis of all input values. Unbiased estimate using
    the following expression.
---
function:
  name: kurtosis
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#kurtosis
  description: >
    Returns the excess kurtosis of all input values. Unbiased estimate using
    the following expression.
---
function:
  name: lag
  kind: window
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: $1
  implemented-by: !datafusion
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#lag
  description: >
    Returns the value at offset rows before the current row in the window partition.
    Offsets start at 0, which is the current row. The
    offset can be any scalar expression.  The default offset is 1. If the
    offset is null, an error is raised. If the offset refers to a row that is not
    within the partition, the default_value is returned, or if it is not specified
    null is returned.
    The lag() function requires that the window ordering be specified.
    Window frame must not be specified.
  examples:
    - input: >
        SELECT name, score, LAG(score) OVER (PARTITION BY name) AS lead_score
        FROM (
            VALUES ('A', 10), ('A', 20), ('D', 20), ('D', 30)
        ) AS t (name, score)
      output: ('A', 10, ), ('A', 20, 10), ('D', 20, ), ('D', 30, 20)
---
function:
  name: lag
  kind: window
  parameters:
  - datatype: $1
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: $1
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#lag
  description: >
    Returns the value at offset rows before the current row in the window partition.
    Offsets start at 0, which is the current row. The
    offset can be any scalar expression.  The default offset is 1. If the
    offset is null, an error is raised. If the offset refers to a row that is not
    within the partition, the default_value is returned, or if it is not specified
    null is returned.
    The lag() function requires that the window ordering be specified.
    Window frame must not be specified.
  examples:
    - input: >
        SELECT name, score, LAG(score) OVER (PARTITION BY name) AS lead_score
        FROM (
            VALUES ('A', 10), ('A', 20), ('D', 20), ('D', 30)
        ) AS t (name, score)
      output: ('A', 10, ), ('A', 20, 10), ('D', 20, ), ('D', 30, 20)
---
function:
  name: lag
  kind: window
  parameters:
  - datatype: $1
  - datatype: bigint
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: $1
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#lag
  description: >
    Returns the value at offset rows before the current row in the window partition.
    Offsets start at 0, which is the current row. The
    offset can be any scalar expression.  The default offset is 1. If the
    offset is null, an error is raised. If the offset refers to a row that is not
    within the partition, the default_value is returned, or if it is not specified
    null is returned.
    The lag() function requires that the window ordering be specified.
    Window frame must not be specified.
  examples:
    - input: >
        SELECT name, score, LAG(score) OVER (PARTITION BY name) AS lead_score
        FROM (
            VALUES ('A', 10), ('A', 20), ('D', 20), ('D', 30)
        ) AS t (name, score)
      output: ('A', 10, ), ('A', 20, 10), ('D', 20, ), ('D', 30, 20)
---
function:
  name: last_day_of_month
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: date
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#last_day_of_month
  description: >
    Returns the last day of the month.
---
function:
  name: last_day_of_month
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: date
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#last_day_of_month
  description: >
    Returns the last day of the month.
---
function:
  name: last_value
  kind: window
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: $1
  implemented-by: !datafusion
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#last_value
  description: >
    Returns the last value of the window.
---
function:
  name: lead
  kind: window
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: $1
  implemented-by: !datafusion
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#lead
  description: >
    Returns the value at offset rows after the current row in the window partition.
    Offsets start at 0, which is the current row. The
    offset can be any scalar expression.  The default offset is 1. If the
    offset is null, an error is raised. If the offset refers to a row that is not
    within the partition, the default_value is returned, or if it is not specified
    null is returned.
    The lead() function requires that the window ordering be specified.
    Window frame must not be specified.
  examples:
    - input: >
        SELECT name, score, LEAD(score) OVER (PARTITION BY name) AS lead_score
        FROM (
            VALUES ('A', 10), ('A', 20), ('D', 20), ('D', 30)
        ) AS t (name, score)
      output: ('A', 10, 20), ('A', 20, ), ('D', 20, 30), ('D', 30, )
---
function:
  name: lead
  kind: window
  parameters:
  - datatype: $1
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: $1
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#lead
  description: >
    Returns the value at offset rows after the current row in the window partition.
    Offsets start at 0, which is the current row. The
    offset can be any scalar expression.  The default offset is 1. If the
    offset is null, an error is raised. If the offset refers to a row that is not
    within the partition, the default_value is returned, or if it is not specified
    null is returned.
    The lead() function requires that the window ordering be specified.
    Window frame must not be specified.
  examples:
    - input: >
        SELECT name, score, LEAD(score) OVER (PARTITION BY name) AS lead_score
        FROM (
            VALUES ('A', 10), ('A', 20), ('D', 20), ('D', 30)
        ) AS t (name, score)
      output: ('A', 10, 20), ('A', 20, ), ('D', 20, 30), ('D', 30, )
---
function:
  name: lead
  kind: window
  parameters:
  - datatype: $1
  - datatype: bigint
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: $1
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#lead
  description: >
    Returns the value at offset rows after the current row in the window partition.
    Offsets start at 0, which is the current row. The
    offset can be any scalar expression.  The default offset is 1. If the
    offset is null, an error is raised. If the offset refers to a row that is not
    within the partition, the default_value is returned, or if it is not specified
    null is returned.
    The lead() function requires that the window ordering be specified.
    Window frame must not be specified.
  examples:
    - input: >
        SELECT name, score, LEAD(score) OVER (PARTITION BY name) AS lead_score
        FROM (
            VALUES ('A', 10), ('A', 20), ('D', 20), ('D', 30)
        ) AS t (name, score)
      output: ('A', 10, 20), ('A', 20, ), ('D', 20, 30), ('D', 30, )
---
function:
  name: learn_classifier
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: map<bigint, double>
  optional-parameters: []
  returns:
    datatype: classifier
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#learn_classifier
  description: >
    Returns an SVM-based classifier model, trained with the given label and feature
    data sets.
---
function:
  name: learn_classifier
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: map<bigint, double>
  optional-parameters: []
  returns:
    datatype: classifier
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#learn_classifier
  description: >
    Returns an SVM-based classifier model, trained with the given label and feature
    data sets.
---
function:
  name: learn_classifier
  kind: aggregate
  parameters:
  - datatype: varchar
  - datatype: map<bigint, double>
  optional-parameters: []
  returns:
    datatype: classifier
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#learn_classifier
  description: >
    Returns an SVM-based classifier model, trained with the given label and feature
    data sets.
---
function:
  name: learn_libsvm_classifier
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: map<bigint, double>
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: classifier
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#learn_libsvm_classifier
  description: >
    Returns an SVM-based classifier model, trained with the given label and feature
    data sets.
    You can control the training process by libsvm parameters.
---
function:
  name: learn_libsvm_classifier
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: map<bigint, double>
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: classifier
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#learn_libsvm_classifier
  description: >
    Returns an SVM-based classifier model, trained with the given label and feature
    data sets.
    You can control the training process by libsvm parameters.
---
function:
  name: learn_libsvm_classifier
  kind: aggregate
  parameters:
  - datatype: varchar
  - datatype: map<bigint, double>
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: classifier
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#learn_libsvm_classifier
  description: >
    Returns an SVM-based classifier model, trained with the given label and feature
    data sets.
    You can control the training process by libsvm parameters.
---
function:
  name: learn_libsvm_regressor
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: map<bigint, double>
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: regressor
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#learn_libsvm_regressor
  description: >
    Returns an SVM-based regressor model, trained with the given target and feature
    data sets.
    You can control the training process by libsvm parameters.
---
function:
  name: learn_libsvm_regressor
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: map<bigint, double>
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: regressor
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#learn_libsvm_regressor
  description: >
    Returns an SVM-based regressor model, trained with the given target and feature
    data sets.
    You can control the training process by libsvm parameters.
---
function:
  name: learn_regressor
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: map<bigint, double>
  optional-parameters: []
  returns:
    datatype: regressor
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#learn_regressor
  description: >
    Returns an SVM-based regressor model, trained with the given target and feature
    data sets.
---
function:
  name: learn_regressor
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: map<bigint, double>
  optional-parameters: []
  returns:
    datatype: regressor
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#learn_regressor
  description: >
    Returns an SVM-based regressor model, trained with the given target and feature
    data sets.
---
function:
  name: least
  variadic: uniform
  parameters:
  - datatype: $3
  optional-parameters: []
  returns:
    datatype: $3
  implemented-by: !rust
  section: comparison
  cross-link: https://trino.io/docs/current/functions/comparison.html#least
  description: >
    Returns the smallest of the provided values.
  examples:
    - input: SELECT LEAST(5,6,7,1,2,3,4) -- list of columns or values
      output: "1"
---
function:
  name: length
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
    udf: character_length
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#length
  description: >
    Returns the length of string in characters.
  examples:
  - input: >-
      select length('Hello World!') as value;
    output: "12"
---
function:
  name: length
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: bigint
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#length
  description: >
    Returns the length of string in characters.
---
function:
  name: levenshtein_distance
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
    udf: levenshtein
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#levenshtein_distance
  description: >
    Returns the Levenshtein edit distance of string1 and string2,
    i.e. the minimum number of single-character edits (insertions,
    deletions or substitutions) needed to change string1 into string2.
---
function:
  name: line_interpolate_point
  parameters:
  - datatype: geometry
  - datatype: double
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#line_interpolate_point
  description: >
    Returns a Point interpolated along a LineString at the fraction given. The fraction
    must be between 0 and 1, inclusive.
---
function:
  name: line_interpolate_points
  parameters:
  - datatype: geometry
  - datatype: double
  optional-parameters: []
  returns:
    datatype: array<geometry>
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#line_interpolate_points
  description: >
    Returns an array of Points interpolated along a LineString. The fraction must
    be
    between 0 and 1, inclusive.
---
function:
  name: line_locate_point
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#line_locate_point
  description: >
    Returns a float between 0 and 1 representing the location of the closest point
    on
    the LineString to the given Point, as a fraction of total 2d line length.
---
function:
  name: listagg
  kind: aggregate
  parameters:
  - datatype: varchar
  - datatype: varchar
  - datatype: boolean
  - datatype: varchar
  - datatype: boolean
  optional-parameters: []
  returns:
    datatype: varchar
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#listagg
  description: >
    Returns the concatenated input values, separated by the separator string.
---
function:
  name: ln
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#ln
  description: >
    Returns the natural logarithm of x.
  examples:
  - input: >-
      select ln(2.1) as value;
    output: "0.7419373447293773"
---
function:
  name: log
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#log
  description: >
    Returns the base b logarithm of x.
  examples:
    - input: SELECT log(2.19, 1) AS value;
      output: "0.0"
---
function:
  name: log10
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#log10
  description: >
    Returns the base 10 logarithm of x.
  examples:
  - input: >-
      select log10(10) as value;
    output: "1.0"
---
function:
  name: log2
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#log2
  description: >
    Returns the base 2 logarithm of x.
  examples:
  - input: >-
      select log2(2) as value;
    output: "1.0"
---
function:
  name: lower
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#lower
  description: >
    Converts string to lowercase.
  examples:
  - input: >-
      select lower('Hello World!') as value;
    output: "hello world!"
---
function:
  name: lpad
  parameters:
  - datatype: varbinary
  - datatype: bigint
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#lpad
  description: >
    Left pads string to size characters with padstring.
    If size is less than the length of string, the result is
    truncated to size characters. size must not be negative
    and padstring must be non-empty.
---
function:
  name: lpad
  parameters:
  - datatype: varchar
  - datatype: bigint
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#lpad
  description: >
    Left pads string to size characters with padstring.
    If size is less than the length of string, the result is
    truncated to size characters. size must not be negative
    and padstring must be non-empty.
  examples:
  - input: >-
      select lpad('😉', 5, '*') as value;
    output: "****😉"
---
function:
  name: ltrim
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#ltrim
  description: >
    Removes leading whitespace from string.
  examples:
  - input: >-
      select ltrim('   😉') as value;
    output: "😉"
---
# DF provides a 2-arg ltrim, but the 2nd arg there is a Utf8 (treated as a set of code points),
# rather than Trino codepoints, which seems to be an array of integers.
function:
  name: ltrim
  parameters:
  - datatype: varchar
  - datatype: codepoints
  optional-parameters: []
  returns:
    datatype: varchar
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#ltrim
  description: >
    Removes leading whitespace from string.
---
function:
  name: luhn_check
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: boolean
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#luhn_check
  description: >
    Tests whether a string of digits is valid according to the
    Luhn algorithm.
---
function:
  name: make_set_digest
  kind: aggregate
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: setdigest
  section: setdigest
  cross-link: https://trino.io/docs/current/functions/setdigest.html#make_set_digest
  description: >
    Composes all input values of x into a setdigest.
---
function:
  name: map
  parameters:
  - datatype: array<$4>
  - datatype: array<$5>
  optional-parameters: []
  returns:
    datatype: map<$4, $5>
  section: map
  cross-link: https://trino.io/docs/current/functions/map.html#map
  description: >
    Returns an empty map.
---
function:
  name: map
  parameters: []
  optional-parameters: []
  returns:
    datatype: map<unknown, unknown>
  section: map
  cross-link: https://trino.io/docs/current/functions/map.html#map
  description: >
    Returns an empty map.
---
function:
  name: map_agg
  kind: aggregate
  parameters:
  - datatype: $4
  - datatype: $5
  optional-parameters: []
  returns:
    datatype: map<$4, $5>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#map_agg
  description: >
    Returns a map created from the input key / value pairs.
---
function:
  name: map_concat
  variadic: uniform
  parameters:
  - datatype: map<$4, $5>
  optional-parameters: []
  returns:
    datatype: map<$4, $5>
  section: map
  cross-link: https://trino.io/docs/current/functions/map.html#map_concat
  description: >
    Returns the union of all the given maps. If a key is found in multiple given maps,
    that key’s value in the resulting map comes from the last one of those maps.
---
function:
  name: map_entries
  parameters:
  - datatype: map<$4, $5>
  optional-parameters: []
  returns:
    datatype: array<row(c0 $4, c1 $5)>
  section: map
  cross-link: https://trino.io/docs/current/functions/map.html#map_entries
  description: >
    Returns an array of all entries in the given map.
---
function:
  name: map_filter
  parameters:
  - datatype: map<$4, $5>
  - datatype: function($4, $5, boolean)
  optional-parameters: []
  returns:
    datatype: map<$4, $5>
  section: map
  cross-link: https://trino.io/docs/current/functions/map.html#map_filter
  description: >
    Constructs a map from those entries of map for which function returns true.
---
function:
  name: map_from_entries
  parameters:
  - datatype: array<row(c0 $4, c1 $5)>
  optional-parameters: []
  returns:
    datatype: map<$4, $5>
  section: map
  cross-link: https://trino.io/docs/current/functions/map.html#map_from_entries
  description: >
    Returns a map created from the given array of entries.
---
function:
  name: map_keys
  parameters:
  - datatype: map<$4, $5>
  optional-parameters: []
  returns:
    datatype: array<$4>
  section: map
  cross-link: https://trino.io/docs/current/functions/map.html#map_keys
  description: >
    Returns all the keys in the map x.
---
function:
  name: map_union
  kind: aggregate
  parameters:
  - datatype: map<$4, $5>
  optional-parameters: []
  returns:
    datatype: map<$4, $5>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#map_union
  description: >
    Returns the union of all the input maps. If a key is found in multiple
    input maps, that key’s value in the resulting map comes from an arbitrary input
    map.
---
function:
  name: map_values
  parameters:
  - datatype: map<$4, $5>
  optional-parameters: []
  returns:
    datatype: array<$5>
  section: map
  cross-link: https://trino.io/docs/current/functions/map.html#map_values
  description: >
    Returns all the values in the map x.
---
function:
  name: map_zip_with
  parameters:
  - datatype: map<$4, $8>
  - datatype: map<$4, $7>
  - datatype: function($4, $8, $7, $6)
  optional-parameters: []
  returns:
    datatype: map<$4, $6>
  section: map
  cross-link: https://trino.io/docs/current/functions/map.html#map_zip_with
  description: >
    Merges the two given maps into a single map by applying function to the pair of
    values with the same key.
    For keys only presented in one map, NULL will be passed as the value for the missing
    key.
---
function:
  name: max
  kind: aggregate
  parameters:
  - datatype: $3
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<$3>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#max
  description: >
    Returns the maximum value of all input values.
---
function:
  name: max
  kind: aggregate
  variadic: uniform
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: $1
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#max
  description: >
    Returns the maximum value of all input values.
  examples:
  - input: >-
      CREATE TABLE tbl AS VALUES (1), (5), (9); 
       SELECT max(tbl.column1) AS value FROM tbl;
    output: "9"
---
function:
  name: max_by
  kind: aggregate
  parameters:
  - datatype: $5
  - datatype: $4
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<$5>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#max_by
  description: >
    Returns the value of x associated with the maximum value of y over all input values.
---
function:
  name: max_by
  kind: aggregate
  parameters:
  - datatype: $5
  - datatype: $4
  optional-parameters: []
  returns:
    datatype: $5
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#max_by
  description: >
    Returns the value of x associated with the maximum value of y over all input values.
---
# DF md5 returns a varchar, but Trino returns a varbinary.
function:
  name: md5
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#md5
  description: >
    Computes the MD5 hash of binary.
---
function:
  name: merge
  kind: aggregate
  parameters:
  - datatype: hyperloglog
  optional-parameters: []
  returns:
    datatype: hyperloglog
  section: hyperloglog
  cross-link: https://trino.io/docs/current/functions/hyperloglog.html#merge
  description: >
    Returns the HyperLogLog of the aggregate union of the individual hll
    HyperLogLog structures.
---
function:
  name: merge
  kind: aggregate
  parameters:
  - datatype: qdigest
  optional-parameters: []
  returns:
    datatype: qdigest
  section: hyperloglog
  cross-link: https://trino.io/docs/current/functions/hyperloglog.html#merge
  description: >
    Returns the HyperLogLog of the aggregate union of the individual hll
    HyperLogLog structures.
---
function:
  name: merge
  kind: aggregate
  parameters:
  - datatype: tdigest
  optional-parameters: []
  returns:
    datatype: tdigest
  section: hyperloglog
  cross-link: https://trino.io/docs/current/functions/hyperloglog.html#merge
  description: >
    Returns the HyperLogLog of the aggregate union of the individual hll
    HyperLogLog structures.
---
function:
  name: merge_set_digest
  kind: aggregate
  parameters:
  - datatype: setdigest
  optional-parameters: []
  returns:
    datatype: setdigest
  section: setdigest
  cross-link: https://trino.io/docs/current/functions/setdigest.html#merge_set_digest
  description: >
    Returns the setdigest of the aggregate union of the individual setdigest
    Set Digest structures.
---
function:
  name: millisecond
  parameters:
  - datatype: interval day to second
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#millisecond
  description: >
    Returns the millisecond of the second from x.
---
function:
  name: millisecond
  parameters:
  - datatype: time(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#millisecond
  description: >
    Returns the millisecond of the second from x.
---
function:
  name: millisecond
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#millisecond
  description: >
    Returns the millisecond of the second from x.
---
function:
  name: min
  kind: aggregate
  parameters:
  - datatype: $3
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<$3>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#min
  description: >
    Returns the minimum value of all input values.
---
function:
  name: min
  kind: aggregate
  variadic: uniform
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: $1
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#min
  description: >
    Returns the minimum value of all input values.
  examples:
  - input: >-
      CREATE TABLE tbl AS VALUES (1), (5), (9); 
       SELECT min(tbl.column1) AS value FROM tbl;
    output: "1"
---
function:
  name: min_by
  kind: aggregate
  parameters:
  - datatype: $5
  - datatype: $4
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<$5>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#min_by
  description: >
    Returns the value of x associated with the minimum value of y over all input values.
---
function:
  name: min_by
  kind: aggregate
  parameters:
  - datatype: $5
  - datatype: $4
  optional-parameters: []
  returns:
    datatype: $5
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#min_by
  description: >
    Returns the value of x associated with the minimum value of y over all input values.
---
function:
  name: minute
  parameters:
  - datatype: interval day to second
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#minute
  description: >
    Returns the minute of the hour from x.
---
function:
  name: minute
  parameters:
  - datatype: time(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#minute
  description: >
    Returns the minute of the hour from x.
---
function:
  name: minute
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#minute
  description: >
    Returns the minute of the hour from x.
---
function:
  name: mod
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#mod
  description: >
    Returns the modulus (remainder) of n divided by m.
---
function:
  name: mod
  parameters:
  - datatype: decimal(a_precision, a_scale)
  - datatype: decimal(b_precision, b_scale)
  optional-parameters: []
  returns:
    datatype: decimal(r_precision, r_scale)
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#mod
  description: >
    Returns the modulus (remainder) of n divided by m.
---
function:
  name: mod
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !rust
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#mod
  description: >
    Returns the modulus (remainder) of n divided by m.
---
function:
  name: mod
  parameters:
  - datatype: integer
  - datatype: integer
  optional-parameters: []
  returns:
    datatype: integer
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#mod
  description: >
    Returns the modulus (remainder) of n divided by m.
---
function:
  name: mod
  parameters:
  - datatype: real
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#mod
  description: >
    Returns the modulus (remainder) of n divided by m.
---
function:
  name: mod
  parameters:
  - datatype: smallint
  - datatype: smallint
  optional-parameters: []
  returns:
    datatype: smallint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#mod
  description: >
    Returns the modulus (remainder) of n divided by m.
---
function:
  name: mod
  parameters:
  - datatype: tinyint
  - datatype: tinyint
  optional-parameters: []
  returns:
    datatype: tinyint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#mod
  description: >
    Returns the modulus (remainder) of n divided by m.
---
function:
  name: month
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#month
  description: >
    Returns the month of the year from x.
  examples:
    - input: SELECT month(cast ('2024-11-01' AS date )) AS value;
      output: "11"
---
function:
  name: month
  parameters:
  - datatype: interval year to month
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#month
  description: >
    Returns the month of the year from x.
---
function:
  name: month
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#month
  description: >
    Returns the month of the year from x.
---
function:
  name: multimap_agg
  kind: aggregate
  parameters:
  - datatype: $4
  - datatype: $5
  optional-parameters: []
  returns:
    datatype: map<$4, array<$5>>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#multimap_agg
  description: >
    Returns a multimap created from the input key / value pairs.
    Each key can be associated with multiple values.
---
function:
  name: multimap_from_entries
  parameters:
  - datatype: array<row(c0 $4, c1 $5)>
  optional-parameters: []
  returns:
    datatype: map<$4, array<$5>>
  section: map
  cross-link: https://trino.io/docs/current/functions/map.html#multimap_from_entries
  description: >
    Returns a multimap created from the given array of entries. Each key can be associated
    with multiple values.
---
function:
  name: murmur3
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#murmur3
  description: >
    Computes the 128-bit MurmurHash3
    hash of binary.
---
function:
  name: nan
  parameters: []
  optional-parameters: []
  returns:
    datatype: double
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#nan
  description: >
    Returns the constant representing not-a-number.
---
function:
  name: ngrams
  parameters:
  - datatype: array<$1>
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<array<$1>>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#ngrams
  description: >
    Returns n-grams (sub-sequences of adjacent n elements) for the array.
    The order of the n-grams in the result is unspecified.
---
function:
  name: none_match
  parameters:
  - datatype: array<$1>
  - datatype: function($1, boolean)
  optional-parameters: []
  returns:
    datatype: boolean
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#none_match
  description: >
    Returns whether no elements of an array match the given predicate. Returns true
    if none of the elements
    matches the predicate (a special case is when the array is empty); false if one
    or more elements match;
    NULL if the predicate function returns NULL for one or more elements and false
    for all other elements.
---
function:
  name: normal_cdf
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#normal_cdf
  description: >
    Compute the Normal cdf with given mean and standard deviation (sd).  P(N < v;
    mean, sd).
    The mean and value v must be real values and the standard deviation must be a
    real
    and positive value.
---
function:
  name: normalize
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#normalize
  description: >
    Transforms string with NFC normalization form.
---
# DF now() carries a time zone, but it is hard-wired as UTC currently
function:
  name: now
  parameters: []
  optional-parameters: []
  returns:
    datatype: timestamp
  volatility: stable
  implemented-by: !datafusion
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#now
  description: >
    This is an alias for current_timestamp.
  examples:
  - input: >-
      select now() as value;
    output: "2023-02-28 00:17:47.154040"
---
function:
  name: nth_value
  kind: window
  parameters:
  - datatype: $1
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: $1
  implemented-by: !datafusion
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#nth_value
  description: >
    Returns the value at the specified offset from the beginning of the window.
    Offsets start at 1. The offset can be any scalar
    expression.  If the offset is null or greater than the number of values in
    the window, null is returned.  It is an error for the offset to be zero or
    negative.
---
function:
  name: ntile
  kind: window
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#ntile
  description: >
    Divides the rows for each window partition into n buckets ranging
    from 1 to at most n. Bucket values will differ by at most 1.
    If the number of rows in the partition does not divide evenly into the
    number of buckets, then the remainder values are distributed one per
    bucket, starting with the first bucket.
  examples:
    - input: >
        SELECT name, NTILE(5) OVER (ORDER BY score) AS ntile_col
        FROM (
            VALUES ('A', 10), ('A', 20), ('A', 30), ('A', 40)
        ) AS t (name, score)
      output: ('A', 1), ('A', 2), ('D', 3), ('D', 4) 
---
function:
  name: nullif
  kind: scalar
  parameters:
  - datatype: $1
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: $1
  implemented-by: !datafusion
  section: conditional
  cross-link: https://trino.io/docs/current/functions/conditional.html#nullif-function
  description: >
    Returns null if value1 equals value2, otherwise returns value1.
  examples:
    - input: SELECT nullif(1, 1) AS value;
      output: "NULL"
    - input: SELECT nullif(2, 1) AS value;
      output: "2"
---
function:
  name: numeric_histogram
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<double, double>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#numeric_histogram
  description: >
    Computes an approximate histogram with up to buckets number of buckets
    for all values with a per-item weight of weight. The algorithm
    is based loosely on.
---
function:
  name: numeric_histogram
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<double, double>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#numeric_histogram
  description: >
    Computes an approximate histogram with up to buckets number of buckets
    for all values with a per-item weight of weight. The algorithm
    is based loosely on.
---
function:
  name: numeric_histogram
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: real
  optional-parameters: []
  returns:
    datatype: map<real, real>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#numeric_histogram
  description: >
    Computes an approximate histogram with up to buckets number of buckets
    for all values with a per-item weight of weight. The algorithm
    is based loosely on.
---
function:
  name: numeric_histogram
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: real
  - datatype: double
  optional-parameters: []
  returns:
    datatype: map<real, real>
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#numeric_histogram
  description: >
    Computes an approximate histogram with up to buckets number of buckets
    for all values with a per-item weight of weight. The algorithm
    is based loosely on.
---
function:
  name: objectid
  parameters: []
  optional-parameters: []
  returns:
    datatype: objectid
  section: mongodb
  cross-link: https://trino.io/docs/current/connector/mongodb.html#objectid
  description: >
    Extracts the TIMESTAMP WITH TIME ZONE from a given ObjectId.
---
function:
  name: objectid
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: objectid
  section: mongodb
  cross-link: https://trino.io/docs/current/connector/mongodb.html#objectid
  description: >
    Extracts the TIMESTAMP WITH TIME ZONE from a given ObjectId.
---
function:
  name: objectid_timestamp
  parameters:
  - datatype: objectid
  optional-parameters: []
  returns:
    datatype: timestamp
  section: mongodb
  cross-link: 
    https://trino.io/docs/current/functions/../connector/mongodb.html#objectid_timestamp
  description: >
    Extracts the TIMESTAMP WITH TIME ZONE from a given ObjectId.
---
function:
  name: parse_data_size
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: decimal(38, 0)
  section: conversion
  cross-link: https://trino.io/docs/current/functions/conversion.html#parse_data_size
  description: >
    Parses string of format value unit into a number, where
    value is the fractional number of unit values.
---
function:
  name: parse_datetime
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: timestamp
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#parse_datetime
  description: >
    Parses string into a timestamp with time zone using format.
---
function:
  name: parse_duration
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: interval day to second
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#parse_duration
  description: >
    Parses string of format value unit into an interval, where
    value is fractional number of unit values.
---
function:
  name: parse_presto_data_size
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: decimal(38, 0)
  section: conversion
  cross-link: https://trino.io/docs/current/functions/conversion.html#parse_data_size
  description: >
    Parses string of format value unit into a number, where
    value is the fractional number of unit values.
---
function:
  name: percent_rank
  kind: window
  parameters: []
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#percent_rank
  description: >
    Returns the percentage ranking of a value in group of values. The result
    is (r - 1) / (n - 1) where r is the rank() of the row and
    n is the total number of rows in the window partition.
  examples:
    - input: >
        SELECT name, PERCENT_RANK() OVER (ORDER BY score) AS percent_rank_col
        FROM (
            VALUES ('A', 10), ('B', 20), ('C', 20), ('D', 30)
        ) AS t (name, score)
      output: ('A', 0.0), ('B', 0.33333333), ('C', 0.33333333), ('D', 1.0)
---
function:
  name: pi
  parameters: []
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#pi
  description: >
    Returns the constant Pi.
  examples:
    - input: SELECT PI()
      output: "3.141592653589793"
---
function:
  name: pow
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
    udf: power
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#pow
  description: >
    This is an alias for power().
---
function:
  name: power
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
    udf: power
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#power
  description: >
    Returns x raised to the power of p.
  examples:
  - input: >-
      select power(2, 8) as value;
    output: "256"
---
function:
  name: qdigest_agg
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: qdigest
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#qdigest_agg
  description: >
    Returns the qdigest which is composed of  all input values of x.
---
function:
  name: qdigest_agg
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: qdigest
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#qdigest_agg
  description: >
    Returns the qdigest which is composed of  all input values of x.
---
function:
  name: qdigest_agg
  kind: aggregate
  parameters:
  - datatype: bigint
  - datatype: bigint
  - datatype: double
  optional-parameters: []
  returns:
    datatype: qdigest
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#qdigest_agg
  description: >
    Returns the qdigest which is composed of  all input values of x.
---
function:
  name: qdigest_agg
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: qdigest
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#qdigest_agg
  description: >
    Returns the qdigest which is composed of  all input values of x.
---
function:
  name: qdigest_agg
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: qdigest
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#qdigest_agg
  description: >
    Returns the qdigest which is composed of  all input values of x.
---
function:
  name: qdigest_agg
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: bigint
  - datatype: double
  optional-parameters: []
  returns:
    datatype: qdigest
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#qdigest_agg
  description: >
    Returns the qdigest which is composed of  all input values of x.
---
function:
  name: qdigest_agg
  kind: aggregate
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: qdigest
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#qdigest_agg
  description: >
    Returns the qdigest which is composed of  all input values of x.
---
function:
  name: qdigest_agg
  kind: aggregate
  parameters:
  - datatype: real
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: qdigest
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#qdigest_agg
  description: >
    Returns the qdigest which is composed of  all input values of x.
---
function:
  name: qdigest_agg
  kind: aggregate
  parameters:
  - datatype: real
  - datatype: bigint
  - datatype: double
  optional-parameters: []
  returns:
    datatype: qdigest
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#qdigest_agg
  description: >
    Returns the qdigest which is composed of  all input values of x.
---
function:
  name: quantile_at_value
  parameters:
  - datatype: qdigest
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: double
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#quantile_at_value
  description: >
    Returns the approximate quantile number between 0 and 1 from the
    quantile digest given an input value. Null is returned if the quantile digest
    is empty or the input value is outside of the range of the quantile digest.
---
function:
  name: quantile_at_value
  parameters:
  - datatype: qdigest
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#quantile_at_value
  description: >
    Returns the approximate quantile number between 0 and 1 from the
    quantile digest given an input value. Null is returned if the quantile digest
    is empty or the input value is outside of the range of the quantile digest.
---
function:
  name: quantile_at_value
  parameters:
  - datatype: qdigest
  - datatype: real
  optional-parameters: []
  returns:
    datatype: double
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#quantile_at_value
  description: >
    Returns the approximate quantile number between 0 and 1 from the
    quantile digest given an input value. Null is returned if the quantile digest
    is empty or the input value is outside of the range of the quantile digest.
---
function:
  name: quarter
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#quarter
  description: >
    Returns the quarter of the year from x.
    The value ranges from 1 to 4.
---
function:
  name: quarter
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#quarter
  description: >
    Returns the quarter of the year from x.
    The value ranges from 1 to 4.
---
function:
  name: radians
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#radians
  description: >
    Converts angle x in degrees to radians.
  examples:
    - input: SELECT radians(360) AS value;
      output: "6.283185307179586"
---
function:
  name: rand
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#rand
  description: >
    This is an alias for random().
  examples:
    - input: SELECT rand() AS value;
      output: "0.20138668902074985"
---
function:
  name: rand
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#rand
  description: >
    This is an alias for random().
---
function:
  name: rand
  parameters: []
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
    udf: random
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#rand
  description: >
    This is an alias for random().
---
function:
  name: rand
  parameters:
  - datatype: integer
  optional-parameters: []
  returns:
    datatype: integer
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#rand
  description: >
    This is an alias for random().
---
function:
  name: rand
  parameters:
  - datatype: integer
  - datatype: integer
  optional-parameters: []
  returns:
    datatype: integer
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#rand
  description: >
    This is an alias for random().
---
function:
  name: rand
  parameters:
  - datatype: smallint
  optional-parameters: []
  returns:
    datatype: smallint
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#rand
  description: >
    This is an alias for random().
---
function:
  name: rand
  parameters:
  - datatype: smallint
  - datatype: smallint
  optional-parameters: []
  returns:
    datatype: smallint
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#rand
  description: >
    This is an alias for random().
---
function:
  name: rand
  parameters:
  - datatype: tinyint
  optional-parameters: []
  returns:
    datatype: tinyint
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#rand
  description: >
    This is an alias for random().
---
function:
  name: rand
  parameters:
  - datatype: tinyint
  - datatype: tinyint
  optional-parameters: []
  returns:
    datatype: tinyint
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#rand
  description: >
    This is an alias for random().
---
function:
  name: random
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#random
  description: >
    Returns a pseudo-random value in the range 0.0 <= x < 1.0.
---
function:
  name: random
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#random
  description: >
    Returns a pseudo-random value in the range 0.0 <= x < 1.0.
---
function:
  name: random
  parameters: []
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
    udf: random
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#random
  description: >
    Returns a pseudo-random value in the range 0.0 <= x < 1.0.
  examples:
  - input: >-
      select random() as value;
    output: "0.8781138533805801"
---
function:
  name: random
  parameters:
  - datatype: integer
  optional-parameters: []
  returns:
    datatype: integer
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#random
  description: >
    Returns a pseudo-random value in the range 0.0 <= x < 1.0.
---
function:
  name: random
  parameters:
  - datatype: integer
  - datatype: integer
  optional-parameters: []
  returns:
    datatype: integer
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#random
  description: >
    Returns a pseudo-random value in the range 0.0 <= x < 1.0.
---
function:
  name: random
  parameters:
  - datatype: smallint
  optional-parameters: []
  returns:
    datatype: smallint
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#random
  description: >
    Returns a pseudo-random value in the range 0.0 <= x < 1.0.
---
function:
  name: random
  parameters:
  - datatype: smallint
  - datatype: smallint
  optional-parameters: []
  returns:
    datatype: smallint
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#random
  description: >
    Returns a pseudo-random value in the range 0.0 <= x < 1.0.
---
function:
  name: random
  parameters:
  - datatype: tinyint
  optional-parameters: []
  returns:
    datatype: tinyint
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#random
  description: >
    Returns a pseudo-random value in the range 0.0 <= x < 1.0.
---
function:
  name: random
  parameters:
  - datatype: tinyint
  - datatype: tinyint
  optional-parameters: []
  returns:
    datatype: tinyint
  volatility: volatile
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#random
  description: >
    Returns a pseudo-random value in the range 0.0 <= x < 1.0.
---
function:
  name: rank
  kind: window
  parameters: []
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#rank
  description: >
    Returns the rank of a value in a group of values. The rank is one plus
    the number of rows preceding the row that are not peer with the row.
    Thus, tie values in the ordering will produce gaps in the sequence.
    The ranking is performed for each window partition.
  examples:
    - input: >
        SELECT name, RANK() OVER (ORDER BY score) AS rank_col
        FROM (
            VALUES ('A', 10), ('B', 20), ('C', 20), ('D', 30)
        ) AS t (name, score)
      output: ('A', 1), ('B', 2), ('C', 2), ('D', 4)
---
function:
  name: reduce
  parameters:
  - datatype: array<$1>
  - datatype: $10
  - datatype: function($10, $1, $10)
  - datatype: function($10, $9)
  optional-parameters: []
  returns:
    datatype: $9
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#reduce
  description: >
    Returns a single value reduced from array. inputFunction will
    be invoked for each element in array in order. In addition to taking
    the element, inputFunction takes the current state, initially
    initialState, and returns the new state. outputFunction will be
    invoked to turn the final state into the result value. It may be the
    identity function (i -> i).
---
function:
  name: reduce_agg
  kind: aggregate
  parameters:
  - datatype: $1
  - datatype: $10
  - datatype: function($10, $1, $10)
  - datatype: function($10, $10, $10)
  optional-parameters: []
  returns:
    datatype: $10
  section: lambda
  cross-link: https://trino.io/docs/current/functions/aggregate.html#reduce_agg
  description: >
    Reduces all input values into a single value. inputFunction will be invoked
    for each non-null input value. In addition to taking the input value, inputFunction
    takes the current state, initially initialState, and returns the new state.
    combineFunction will be invoked to combine two states into a new state.
    The final state is returned.
---
function:
  name: regexp_count
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: regexp
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_count
  description: >
    Returns the number of occurrence of pattern in string.
---
function:
  name: regexp_extract
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !rust
  section: regexp
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_extract
  description: >
    Returns the first substring matched by the regular expression pattern
    in string.
  examples:
    - input: SELECT REGEXP_EXTRACT('email_address@gmail.com', '@(.*?)\.'
      output: gmail
---
function:
  name: regexp_extract
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varchar
  section: regexp
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_extract
  description: >
    Returns the first substring matched by the regular expression pattern
    in string.
---
function:
  name: regexp_extract_all
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  optional-parameters: []
  returns:
    datatype: array<varchar>
  implemented-by: !rust
  section: regexp
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_extract_all
  description: >
    Returns the substrings of a string matched by the regular expression pattern.
---
function:
  name: regexp_extract_all
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<varchar>
  implemented-by: !rust
  section: regexp
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_extract_all
  description: >
    Returns the substrings of a string matched by the regular expression pattern's capturing group.
---
function:
  name: regexp_like
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  optional-parameters: []
  returns:
    datatype: boolean
  implemented-by: !rust
  section: regexp
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_like
  description: >
    Evaluates the regular expression pattern and determines if it is
    contained within string.
  examples:
    - input: SELECT REGEXP_like('email_address@gmail.com', '.*@.*\..*') AS is_valid_email
      output: "TRUE"

---
function:
  name: regexp_position
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: regexp
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_position
  description: >
    Returns the index of the first occurrence (counting from 1) of pattern in string.
    Returns -1 if not found.
---
function:
  name: regexp_position
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: regexp
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_position
  description: >
    Returns the index of the first occurrence (counting from 1) of pattern in string.
    Returns -1 if not found.
---
function:
  name: regexp_position
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: regexp
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_position
  description: >
    Returns the index of the first occurrence (counting from 1) of pattern in string.
    Returns -1 if not found.
---
function:
  name: regexp_replace
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  - datatype: function(array<varchar>, varchar)
  optional-parameters: []
  returns:
    datatype: varchar
  section: regexp
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_replace
  description: >
    Removes every instance of the substring matched by the regular expression
    pattern from string.
  examples:
    - input: SELECT REGEXP_REPLACE('text foo another text', 'foo', 'bar')
      output: text bar another text
---
function:
  name: regexp_replace
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !rust
  section: lambda
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_replace
  description: >
    Removes every instance of the substring matched by the regular expression
    pattern from string.
  examples:
    - input: SELECT REGEXP_REPLACE('text foo another text', 'foo', 'bar')
      output: text bar another text
---
function:
  name: regexp_replace
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !rust
  section: lambda
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_replace
  description: >
    Removes every instance of the substring matched by the regular expression
    pattern from string.
  examples:
    - input: SELECT REGEXP_REPLACE('text foo another text', 'foo', 'bar')
      output: text bar another text
---
function:
  name: regexp_split
  parameters:
  - datatype: varchar
  - datatype: joniregexp
  optional-parameters: []
  returns:
    datatype: array<varchar>
  section: regexp
  cross-link: https://trino.io/docs/current/functions/regexp.html#regexp_split
  description: >
    Splits string using the regular expression pattern and returns an
    array. Trailing empty strings are preserved.
---
function:
  name: regr_intercept
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#regr_intercept
  description: >
    Returns linear regression intercept of input values. y is the dependent
    value. x is the independent value.
---
function:
  name: regr_intercept
  kind: aggregate
  parameters:
  - datatype: real
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#regr_intercept
  description: >
    Returns linear regression intercept of input values. y is the dependent
    value. x is the independent value.
---
function:
  name: regr_slope
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#regr_slope
  description: >
    Returns linear regression slope of input values. y is the dependent
    value. x is the independent value.
---
function:
  name: regr_slope
  kind: aggregate
  parameters:
  - datatype: real
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#regr_slope
  description: >
    Returns linear regression slope of input values. y is the dependent
    value. x is the independent value.
---
function:
  name: regress
  parameters:
  - datatype: map<bigint, double>
  - datatype: regressor
  optional-parameters: []
  returns:
    datatype: double
  section: ml
  cross-link: https://trino.io/docs/current/functions/ml.html#regress
  description: >
    Returns a predicted target value by the given regressor SVM model.
---
function:
  name: render
  parameters:
  - datatype: boolean
  optional-parameters: []
  returns:
    datatype: varchar
  section: color
  cross-link: https://trino.io/docs/current/functions/color.html#render
  description: >
    Renders value x using the specific color using ANSI
    color codes. x can be either a double, bigint, or varchar.
---
function:
  name: render
  parameters:
  - datatype: bigint
  - datatype: color
  optional-parameters: []
  returns:
    datatype: varchar
  section: color
  cross-link: https://trino.io/docs/current/functions/color.html#render
  description: >
    Renders value x using the specific color using ANSI
    color codes. x can be either a double, bigint, or varchar.
---
function:
  name: render
  parameters:
  - datatype: double
  - datatype: color
  optional-parameters: []
  returns:
    datatype: varchar
  section: color
  cross-link: https://trino.io/docs/current/functions/color.html#render
  description: >
    Renders value x using the specific color using ANSI
    color codes. x can be either a double, bigint, or varchar.
---
function:
  name: render
  parameters:
  - datatype: varchar
  - datatype: color
  optional-parameters: []
  returns:
    datatype: varchar
  section: color
  cross-link: https://trino.io/docs/current/functions/color.html#render
  description: >
    Renders value x using the specific color using ANSI
    color codes. x can be either a double, bigint, or varchar.
---
function:
  name: repeat
  parameters:
  - datatype: $1
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<$1>
  implemented-by: !datafusion
    udf: array_repeat
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#repeat
  description: >
    Repeat element for count times.
  examples:
  - input: >-
      select repeat('😉', 4) as value;
    output: "😉😉😉😉"
---
function:
  name: replace
  parameters:
  - datatype: varchar
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#replace
  description: >
    Removes all instances of search from string.
  examples:
  - input: >-
      select replace('Hello There', 'There') as value;
    output: "Hello "
---
function:
  name: replace
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#replace
  description: >
    Removes all instances of search from string.
---
function:
  name: reverse
  parameters:
  - datatype: array<$3>
  optional-parameters: []
  returns:
    datatype: array<$3>
  implemented-by: !datafusion
    udf: array_reverse
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#reverse
  description: >
    Returns string with the characters in reverse order.
  examples:
  - input: >-
      select reverse('Hello There') as value;
    output: "ereht olleH"
---
function:
  name: reverse
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#reverse
  description: >
    Returns string with the characters in reverse order.
---
function:
  name: reverse
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#reverse
  description: >
    Returns string with the characters in reverse order.
---
function:
  name: rgb
  parameters:
  - datatype: bigint
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: color
  section: color
  cross-link: https://trino.io/docs/current/functions/color.html#rgb
  description: >
    Returns a color value capturing the RGB value of three
    component color values supplied as int parameters ranging from 0
    to 255. red, green, blue.
---
function:
  name: round
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
  examples:
  - input: >-
      select round(2.1) as value;
    output: "2.0"
---
function:
  name: round
  parameters:
  - datatype: double
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: round
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: round
  parameters:
  - datatype: real
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: real
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: round
  parameters:
  - datatype: integer
  optional-parameters: []
  returns:
    datatype: integer
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: round
  parameters:
  - datatype: integer
  - datatype: integer
  optional-parameters: []
  returns:
    datatype: integer
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: round
  parameters:
  - datatype: decimal(p, s)
  optional-parameters: []
  returns:
    datatype: decimal(rp, rs)
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: round
  parameters:
  - datatype: decimal(p, s)
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: decimal(rp, s)
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: round
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: round
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: round
  parameters:
  - datatype: smallint
  optional-parameters: []
  returns:
    datatype: smallint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: round
  parameters:
  - datatype: smallint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: smallint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: round
  parameters:
  - datatype: tinyint
  optional-parameters: []
  returns:
    datatype: tinyint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: round
  parameters:
  - datatype: tinyint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: tinyint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#round
  description: >
    Returns x rounded to the nearest integer.
---
function:
  name: row_number
  kind: window
  parameters: []
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
  section: window
  cross-link: https://trino.io/docs/current/functions/window.html#row_number
  description: >
    Returns a unique, sequential number for each row, starting with one,
    according to the ordering of rows within the window partition.
  examples:
    - input: >
        SELECT name, ROW_NUMBER() OVER (ORDER BY score) AS row_number_col
        FROM (
            VALUES ('A', 10), ('B', 20), ('C', 20), ('D', 30)
        ) AS t (name, score)
      output: ('A', 1), ('B', 2), ('C', 3), ('D', 4)
---
function:
  name: rpad
  parameters:
  - datatype: varbinary
  - datatype: bigint
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#rpad
  description: >
    Right pads string to size characters with padstring.
    If size is less than the length of string, the result is
    truncated to size characters. size must not be negative
    and padstring must be non-empty.
---
function:
  name: rpad
  parameters:
  - datatype: varchar
  - datatype: bigint
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#rpad
  description: >
    Right pads string to size characters with padstring.
    If size is less than the length of string, the result is
    truncated to size characters. size must not be negative
    and padstring must be non-empty.
  examples:
  - input: >-
      select rpad('😉', 5, '*') as value;
    output: "😉****"
---
function:
  name: rtrim
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#rtrim
  description: >
    Removes trailing whitespace from string.
  examples:
  - input: >-
      select rtrim('😉   ') as value;
    output: "😉"
---
function:
  name: rtrim
  parameters:
  - datatype: varchar
  - datatype: codepoints
  optional-parameters: []
  returns:
    datatype: varchar
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#rtrim
  description: >
    Removes trailing whitespace from string.
---
function:
  name: second
  parameters:
  - datatype: interval day to second
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#second
  description: >
    Returns the second of the minute from x.
---
function:
  name: second
  parameters:
  - datatype: time(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#second
  description: >
    Returns the second of the minute from x.
---
function:
  name: second
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#second
  description: >
    Returns the second of the minute from x.
---
function:
  name: sequence
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<bigint>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#sequence
  description: >
    Generate a sequence of integers from start to stop, incrementing
    by 1 if start is less than or equal to stop, otherwise -1.
---
function:
  name: sequence
  parameters:
  - datatype: bigint
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<bigint>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#sequence
  description: >
    Generate a sequence of integers from start to stop, incrementing
    by 1 if start is less than or equal to stop, otherwise -1.
---
function:
  name: sequence
  parameters:
  - datatype: date
  - datatype: date
  optional-parameters: []
  returns:
    datatype: array<date>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#sequence
  description: >
    Generate a sequence of integers from start to stop, incrementing
    by 1 if start is less than or equal to stop, otherwise -1.
---
function:
  name: sequence
  parameters:
  - datatype: date
  - datatype: date
  - datatype: interval day to second
  optional-parameters: []
  returns:
    datatype: array<date>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#sequence
  description: >
    Generate a sequence of integers from start to stop, incrementing
    by 1 if start is less than or equal to stop, otherwise -1.
---
function:
  name: sequence
  parameters:
  - datatype: date
  - datatype: date
  - datatype: interval year to month
  optional-parameters: []
  returns:
    datatype: array<date>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#sequence
  description: >
    Generate a sequence of integers from start to stop, incrementing
    by 1 if start is less than or equal to stop, otherwise -1.
---
function:
  name: sequence
  parameters:
  - datatype: timestamp(p)
  - datatype: timestamp(p)
  - datatype: interval day to second
  optional-parameters: []
  returns:
    datatype: array<timestamp(p)>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#sequence
  description: >
    Generate a sequence of integers from start to stop, incrementing
    by 1 if start is less than or equal to stop, otherwise -1.
---
function:
  name: sha1
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#sha1
  description: >
    Computes the SHA1 hash of binary.
---
function:
  name: sha256
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  implemented-by: !datafusion
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#sha256
  description: >
    Computes the SHA256 hash of binary.
  examples:
  - input: >-
      select sha256('Hello World!') as value;
    output: "7f83b1657ff1fc53b92dc18148a1d65dfc2d4b1fa3d677284addd200126d9069"
---
function:
  name: sha512
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  implemented-by: !datafusion
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#sha512
  description: >
    Computes the SHA512 hash of binary.
  examples:
  - input: >-
      select sha512('Hello World!') as value;
    output: "861844d6704e8573fec34d967e20bcfef3d424cf48be04e6dc08f2bd58c729743371015ead891cc3cf1c9d34b49264b510751b1ff9e537937bc46b5d6ff4ecc8"
---
function:
  name: shuffle
  parameters:
  - datatype: array<$3>
  optional-parameters: []
  returns:
    datatype: array<$3>
  volatility: volatile
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#shuffle
  description: >
    Generate a random permutation of the given array x.
---
function:
  name: sign
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#sign
  description: >
    Returns the signum function of x, that is.
---
function:
  name: sign
  parameters:
  - datatype: decimal(p, s)
  optional-parameters: []
  returns:
    datatype: decimal(1, 0)
  implemented-by: !rust
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#sign
  description: >
    Returns the signum function of x, that is.
---
function:
  name: sign
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
    udf: signum
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#sign
  description: >
    Returns the signum function of x, that is.
---
function:
  name: sign
  parameters:
  - datatype: integer
  optional-parameters: []
  returns:
    datatype: integer
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#sign
  description: >
    Returns the signum function of x, that is.
---
function:
  name: sign
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  implemented-by: !datafusion
    udf: signum
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#sign
  description: >
    Returns the signum function of x, that is.
---
function:
  name: sign
  parameters:
  - datatype: smallint
  optional-parameters: []
  returns:
    datatype: smallint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#sign
  description: >
    Returns the signum function of x, that is.
---
function:
  name: sign
  parameters:
  - datatype: tinyint
  optional-parameters: []
  returns:
    datatype: tinyint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#sign
  description: >
    Returns the signum function of x, that is.
---
function:
  name: simplify_geometry
  parameters:
  - datatype: geometry
  - datatype: double
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#simplify_geometry
  description: >
    Returns a “simplified” version of the input geometry using the Douglas-Peucker
    algorithm.
    Will avoid creating derived geometries (polygons in particular) that are invalid.
---
function:
  name: sin
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#sin
  description: >
    Returns the sine of x.
  examples:
  - input: >-
      select sin(2.1) as value;
    output: "-0.8632093666488737"
---
function:
  name: sinh
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#sinh
  description: >
    Returns the hyperbolic sine of x.
  examples:
    - input: SELECT sinh(1) AS value;
      output: "1.1752011936438014"
---
function:
  name: skewness
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#skewness
  description: >
    Returns the Fisher’s moment coefficient of skewness of all input values.
---
function:
  name: skewness
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#skewness
  description: >
    Returns the Fisher’s moment coefficient of skewness of all input values.
---
# DF offers array_slice, but it is array_slice(array, from, to), while Trino has  slice(array, from, length).
function:
  name: slice
  parameters:
  - datatype: array<$3>
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<$3>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#slice
  description: >
    Subsets array x starting from index start (or starting from the end
    if start is negative) with a length of length.
---
function:
  name: soundex
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#soundex
  description: >
    It is typically used to evaluate the similarity of two expressions phonetically,
    that is
    how the string sounds when spoken.
---
function:
  name: spatial_partitioning
  kind: aggregate
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: varchar
---
function:
  name: spatial_partitions
  parameters:
  - datatype: kdbtree
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: array<bigint>
---
function:
  name: spatial_partitions
  parameters:
  - datatype: kdbtree
  - datatype: geometry
  - datatype: double
  optional-parameters: []
  returns:
    datatype: array<bigint>
---
function:
  name: split
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: array<varchar>
  implemented-by: !datafusion
    udf: string_to_array
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#split
  description: >
    Splits string on delimiter and returns an array.
  examples:
    - input: SELECT split('hello+world', '+') as value;
      output: "[hello, world]"
---
function:
  name: split
  parameters:
  - datatype: varchar
  - datatype: varchar
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<varchar>
  implemented-by: !rust
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#split
  description: >
    Splits string on delimiter and returns an array.
---
function:
  name: split_part
  parameters:
  - datatype: varchar
  - datatype: varchar
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#split_part
  description: >
    Splits string on delimiter and returns the field index.
    Field indexes start with 1. If the index is larger than
    the number of fields, then null is returned.
  examples:
    - input: SELECT split_part('hello world', 'world', 1) as value;
      output: hello
---
function:
  name: split_to_map
  parameters:
  - datatype: varchar
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: map<varchar, varchar>
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#split_to_map
  description: >
    Splits string by entryDelimiter and keyValueDelimiter and returns a map.
    entryDelimiter splits string into key-value pairs. keyValueDelimiter splits
    each pair into key and value.
---
function:
  name: split_to_multimap
  parameters:
  - datatype: varchar
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: map<varchar, array<varchar>>
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#split_to_multimap
  description: >
    Splits string by entryDelimiter and keyValueDelimiter and returns a map
    containing an array of values for each unique key. entryDelimiter splits string
    into key-value pairs. keyValueDelimiter splits each pair into key and value. The
    values for each key will be in the same order as they appeared in string.
---
function:
  name: spooky_hash_v2_32
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#spooky_hash_v2_32
  description: >
    Computes the 32-bit SpookyHashV2 hash of binary.
---
function:
  name: spooky_hash_v2_64
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#spooky_hash_v2_64
  description: >
    Computes the 64-bit SpookyHashV2 hash of binary.
---
function:
  name: sqrt
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#sqrt
  description: >
    Returns the square root of x.
  examples:
  - input: >-
      select sqrt(16) as value;
    output: "4.0"
---
function:
  name: ST_Area
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Area
  description: >
    Returns the 2D Euclidean area of a geometry.
---
function:
  name: ST_Area
  parameters:
  - datatype: sphericalgeography
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Area
  description: >
    Returns the 2D Euclidean area of a geometry.
---
function:
  name: ST_AsBinary
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: varbinary
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_AsBinary
  description: >
    Returns the WKB representation of the geometry.
---
function:
  name: ST_AsText
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: varchar
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_AsText
  description: >
    Returns the WKT representation of the geometry. For empty geometries,
    ST_AsText(ST_LineFromText('LINESTRING EMPTY')) will produce 'MULTILINESTRING EMPTY'
    and ST_AsText(ST_Polygon('POLYGON EMPTY')) will produce 'MULTIPOLYGON EMPTY'.
---
function:
  name: ST_Boundary
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Boundary
  description: >
    Returns the closure of the combinatorial boundary of this geometry.
---
function:
  name: ST_Buffer
  parameters:
  - datatype: geometry
  - datatype: double
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Buffer
  description: >
    Returns the geometry that represents all points whose distance from the specified
    geometry
    is less than or equal to the specified distance. If the points of the geometry
    are extremely
    close together (delta < 1e-8), this might return an empty geometry.
---
function:
  name: ST_Centroid
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Centroid
  description: >
    Returns the point value that is the mathematical centroid of a geometry.
---
function:
  name: ST_Contains
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Contains
  description: >
    Returns true if and only if no points of the second geometry lie in the exterior
    of the first geometry, and at least one point of the interior of the first geometry
    lies in the interior of the second geometry.
---
function:
  name: ST_ConvexHull
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_ConvexHull
  description: >
    Returns the minimum convex geometry that encloses all input geometries.
---
function:
  name: ST_CoordDim
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: tinyint
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_CoordDim
  description: >
    Returns the coordinate dimension of the geometry.
---
function:
  name: ST_Crosses
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Crosses
  description: >
    Returns true if the supplied geometries have some, but not all, interior points
    in common.
---
function:
  name: ST_Difference
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Difference
  description: >
    Returns the geometry value that represents the point set difference of the given
    geometries.
---
function:
  name: ST_Dimension
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: tinyint
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Dimension
  description: >
    Returns the inherent dimension of this geometry object, which must be
    less than or equal to the coordinate dimension.
---
function:
  name: ST_Disjoint
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Disjoint
  description: >
    Returns true if the give geometries do not spatially intersect –
    if they do not share any space together.
---
function:
  name: ST_Distance
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Distance
  description: >
    Returns the great-circle distance in meters between two SphericalGeography points.
---
function:
  name: ST_Distance
  parameters:
  - datatype: sphericalgeography
  - datatype: sphericalgeography
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Distance
  description: >
    Returns the great-circle distance in meters between two SphericalGeography points.
---
function:
  name: ST_EndPoint
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_EndPoint
  description: >
    Returns the last point of a LineString geometry as a Point.
    This is a shortcut for ST_PointN(geometry, ST_NumPoints(geometry)).
---
function:
  name: ST_Envelope
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Envelope
  description: >
    Returns the bounding rectangular polygon of a geometry.
---
function:
  name: ST_EnvelopeAsPts
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: array<geometry>
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_EnvelopeAsPts
  description: >
    Returns an array of two points. the lower left and upper right corners of the
    bounding
    rectangular polygon of a geometry. Returns NULL if input geometry is empty.
---
function:
  name: ST_Equals
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Equals
  description: >
    Returns true if the given geometries represent the same geometry.
---
function:
  name: ST_ExteriorRing
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_ExteriorRing
  description: >
    Returns a line string representing the exterior ring of the input polygon.
---
function:
  name: ST_Geometries
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: array<geometry>
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Geometries
  description: >
    Returns an array of geometries in the specified collection. Returns a one-element
    array
    if the input geometry is not a multi-geometry. Returns NULL if input geometry
    is empty.
---
function:
  name: ST_GeometryFromText
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_GeometryFromText
  description: >
    Returns a geometry type object from WKT representation.
---
function:
  name: ST_GeometryN
  parameters:
  - datatype: geometry
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_GeometryN
  description: >
    Returns the geometry element at a given index (indices start at 1).
    If the geometry is a collection of geometries (e.g., GEOMETRYCOLLECTION or MULTI*),
    returns the geometry at a given index.
    If the given index is less than 1 or greater than the total number of elements
    in the collection,
    returns NULL.
    Use ST_NumGeometries() to find out the total number of elements.
    Singular geometries (e.g., POINT, LINESTRING, POLYGON), are treated as collections
    of one element.
    Empty geometries are treated as empty collections.
---
function:
  name: ST_GeometryType
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: varchar
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_GeometryType
  description: >
    Returns the type of the geometry.
---
function:
  name: ST_GeomFromBinary
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_GeomFromBinary
  description: >
    Returns a geometry type object from WKB representation.
---
function:
  name: ST_InteriorRingN
  parameters:
  - datatype: geometry
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_InteriorRingN
  description: >
    Returns the interior ring element at the specified index (indices start at 1).
    If
    the given index is less than 1 or greater than the total number of interior rings
    in the input geometry, returns NULL. The input geometry must be a polygon.
    Use ST_NumInteriorRing() to find out the total number of elements.
---
function:
  name: ST_InteriorRings
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: array<geometry>
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_InteriorRings
  description: >
    Returns an array of all interior rings found in the input geometry, or an empty
    array if the polygon has no interior rings. Returns NULL if the input geometry
    is empty. The input geometry must be a polygon.
---
function:
  name: ST_Intersection
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Intersection
  description: >
    Returns the geometry value that represents the point set intersection of two geometries.
---
function:
  name: ST_Intersects
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Intersects
  description: >
    Returns true if the given geometries spatially intersect in two dimensions
    (share any portion of space) and false if they do not (they are disjoint).
---
function:
  name: ST_IsClosed
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_IsClosed
  description: >
    Returns true if the linestring’s start and end points are coincident.
---
function:
  name: ST_IsEmpty
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_IsEmpty
  description: >
    Returns true if this Geometry is an empty geometrycollection, polygon, point etc.
---
function:
  name: ST_IsRing
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_IsRing
  description: >
    Returns true if and only if the line is closed and simple.
---
function:
  name: ST_IsSimple
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_IsSimple
  description: >
    Returns true if this Geometry has no anomalous geometric points, such as self
    intersection or self tangency.
---
function:
  name: ST_IsValid
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_IsValid
  description: >
    Returns true if and only if the input geometry is well formed.
    Use geometry_invalid_reason() to determine why the geometry is not well formed.
---
function:
  name: ST_Length
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Length
  description: >
    Returns the length of a linestring or multi-linestring using Euclidean measurement
    on a
    two dimensional plane (based on spatial ref) in projected units.
---
function:
  name: ST_Length
  parameters:
  - datatype: sphericalgeography
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Length
  description: >
    Returns the length of a linestring or multi-linestring using Euclidean measurement
    on a
    two dimensional plane (based on spatial ref) in projected units.
---
function:
  name: ST_LineFromText
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_LineFromText
  description: >
    Returns a geometry type linestring object from WKT representation.
---
function:
  name: ST_LineString
  parameters:
  - datatype: array<geometry>
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_LineString
  description: >
    Returns a LineString formed from an array of points. If there are fewer than
    two non-empty points in the input array, an empty LineString will be returned.
    Array elements must not be NULL or the same as the previous element.
    The returned geometry may not be simple, e.g. may self-intersect or may contain
    duplicate vertexes depending on the input.
---
function:
  name: ST_MultiPoint
  parameters:
  - datatype: array<geometry>
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_MultiPoint
  description: >
    Returns a MultiPoint geometry object formed from the specified points. Returns
    NULL if input array is empty.
    Array elements must not be NULL or empty.
    The returned geometry may not be simple and may contain duplicate points if input
    array has duplicates.
---
function:
  name: ST_NumGeometries
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: bigint
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_NumGeometries
  description: >
    Returns the number of geometries in the collection.
    If the geometry is a collection of geometries (e.g., GEOMETRYCOLLECTION or MULTI*),
    returns the number of geometries,
    for single geometries returns 1,
    for empty geometries returns 0.
---
function:
  name: ST_NumInteriorRing
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: bigint
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_NumInteriorRing
  description: >
    Returns the cardinality of the collection of interior rings of a polygon.
---
function:
  name: ST_NumPoints
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: bigint
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_NumPoints
  description: >
    Returns the number of points in a geometry. This is an extension to the SQL/MM
    ST_NumPoints function which only applies to point and linestring.
---
function:
  name: ST_Overlaps
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Overlaps
  description: >
    Returns true if the given geometries share space, are of the same dimension,
    but are not completely contained by each other.
---
function:
  name: ST_Point
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Point
  description: >
    Returns a geometry type point object with the given coordinate values.
---
function:
  name: ST_PointN
  parameters:
  - datatype: geometry
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_PointN
  description: >
    Returns the vertex of a linestring at a given index (indices start at 1).
    If the given index is less than 1 or greater than the total number of elements
    in the collection,
    returns NULL.
    Use ST_NumPoints() to find out the total number of elements.
---
function:
  name: ST_Points
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: array<geometry>
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Points
  description: >
    Returns an array of points in a linestring.
---
function:
  name: ST_Polygon
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Polygon
  description: >
    Returns a geometry type polygon object from WKT representation.
---
function:
  name: ST_Relate
  parameters:
  - datatype: geometry
  - datatype: geometry
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Relate
  description: >
    Returns true if first geometry is spatially related to second geometry.
---
function:
  name: ST_StartPoint
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_StartPoint
  description: >
    Returns the first point of a LineString geometry as a Point.
    This is a shortcut for ST_PointN(geometry, 1).
---
function:
  name: ST_SymDifference
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_SymDifference
  description: >
    Returns the geometry value that represents the point set symmetric difference
    of two geometries.
---
function:
  name: ST_Touches
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Touches
  description: >
    Returns true if the given geometries have at least one point in common,
    but their interiors do not intersect.
---
function:
  name: ST_Union
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Union
  description: >
    Returns a geometry that represents the point set union of the input geometries.
---
function:
  name: ST_Within
  parameters:
  - datatype: geometry
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: boolean
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Within
  description: >
    Returns true if first geometry is completely inside second geometry.
---
function:
  name: ST_X
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_X
  description: >
    Returns the X coordinate of the point.
---
function:
  name: ST_XMax
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_XMax
  description: >
    Returns X maxima of a bounding box of a geometry.
---
function:
  name: ST_XMin
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_XMin
  description: >
    Returns X minima of a bounding box of a geometry.
---
function:
  name: ST_Y
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_Y
  description: >
    Returns the Y coordinate of the point.
---
function:
  name: ST_YMax
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_YMax
  description: >
    Returns Y maxima of a bounding box of a geometry.
---
function:
  name: ST_YMin
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: double
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#ST_YMin
  description: >
    Returns Y minima of a bounding box of a geometry.
---
function:
  name: starts_with
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: boolean
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#starts_with
  description: >
    Tests whether substring is a prefix of string.
  examples:
    - input: SELECT starts_with('hello world', 'world') 
      output: "false"
    - input: SELECT starts_with('hello world', 'hello') ;
      output: "true"
---
function:
  name: stddev
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#stddev
  description: >
    This is an alias for stddev_samp().
---
function:
  name: stddev
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#stddev
  description: >
    This is an alias for stddev_samp().
---
function:
  name: stddev_pop
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#stddev_pop
  description: >
    Returns the population standard deviation of all input values.
  examples:
    - input: >
        CREATE TABLE tbl AS VALUES (1), (5), (9); 
        SELECT stddev_pop(column1) as value from tbl;
      output: "3.265986323710904"
---
function:
  name: stddev_pop
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#stddev_pop
  description: >
    Returns the population standard deviation of all input values.
---
function:
  name: stddev_samp
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#stddev_samp
  description: >
    Returns the sample standard deviation of all input values.
  examples:
    - input: >
        CREATE TABLE tbl AS VALUES (1), (5), (9); 
        SELECT stddev_samp(column1) as value from tbl;
      output: "4.0"
---
function:
  name: stddev_samp
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#stddev_samp
  description: >
    Returns the sample standard deviation of all input values.
---
function:
  name: strpos
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#strpos
  description: >
    Returns the starting position of the first instance of substring in
    string. Positions start with 1. If not found, 0 is returned.
  examples:
  - input: >-
      select strpos('Hello World', 'World') as value;
    output: "7"
---
function:
  name: strpos
  parameters:
  - datatype: varchar
  - datatype: varchar
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#strpos
  description: >
    Returns the starting position of the first instance of substring in
    string. Positions start with 1. If not found, 0 is returned.
---
function:
  name: substr
  parameters:
  - datatype: varchar
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#substr
  description: >
    This is an alias for substring().
  examples:
  - input: >-
      select substr('Hello World', 6) as value;
    output: " World"
---
function:
  name: substr
  parameters:
  - datatype: varchar
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#substr
  description: >
    This is an alias for substring().
---
function:
  name: substr
  parameters:
  - datatype: varbinary
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varbinary
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#substr
  description: >
    This is an alias for substring().
---
function:
  name: substr
  parameters:
  - datatype: varbinary
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varbinary
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#substr
  description: >
    This is an alias for substring().
---
function:
  name: substring
  parameters:
  - datatype: varchar
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
    udf: substr
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#substring
  description: >
    Returns the rest of string from the starting position start.
    Positions start with 1. A negative starting position is interpreted
    as being relative to the end of the string.
  examples:
  - input: >-
      select substring('Hello World', 6) as value;
    output: " World"
---
function:
  name: substring
  parameters:
  - datatype: varchar
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
    udf: substr
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#substring
  description: >
    Returns the rest of string from the starting position start.
    Positions start with 1. A negative starting position is interpreted
    as being relative to the end of the string.
---
function:
  name: sum
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#sum
  description: >
    Returns the sum of all input values.
  examples:
  - input: >-
      CREATE TABLE tbl AS VALUES (1), (5), (9); 
       SELECT sum(tbl.column1) AS value FROM tbl;
    output: "15"
---
function:
  name: sum
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#sum
  description: >
    Returns the sum of all input values.
---
function:
  name: sum
  kind: aggregate
  parameters:
  - datatype: decimal(p, s)
  optional-parameters: []
  returns:
    datatype: decimal(38, s)
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#sum
  description: >
    Returns the sum of all input values.
---
function:
  name: sum
  kind: aggregate
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#sum
  description: >
    Returns the sum of all input values.
---
function:
  name: sum
  kind: aggregate
  parameters:
  - datatype: interval day to second
  optional-parameters: []
  returns:
    datatype: interval day to second
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#sum
  description: >
    Returns the sum of all input values.
---
function:
  name: sum
  kind: aggregate
  parameters:
  - datatype: interval year to month
  optional-parameters: []
  returns:
    datatype: interval year to month
  implemented-by: !datafusion
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#sum
  description: >
    Returns the sum of all input values.
---
function:
  name: tan
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#tan
  description: >
    Returns the tangent of x.
  examples:
  - input: >-
      select tan(0.5) as value;
    output: "0.5463024898437905"
---
function:
  name: tanh
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#tanh
  description: >
    Returns the hyperbolic tangent of x.
  examples:
    - input: SELECT tanh(1.0) AS value;
      output: "0.7615941559557649"
---
function:
  name: tdigest_agg
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: tdigest
  section: t-digest
  cross-link: https://trino.io/docs/current/functions/tdigest.html#tdigest_agg
  description: >
    Composes all input values of x into a tdigest. x can be
    of any numeric type.
---
function:
  name: tdigest_agg
  kind: aggregate
  parameters:
  - datatype: double
  - datatype: double
  optional-parameters: []
  returns:
    datatype: tdigest
  section: t-digest
  cross-link: https://trino.io/docs/current/functions/tdigest.html#tdigest_agg
  description: >
    Composes all input values of x into a tdigest. x can be
    of any numeric type.
---
function:
  name: timestamp_objectid
  parameters:
  - datatype: timestamp(0)
  optional-parameters: []
  returns:
    datatype: objectid
  section: mongodb
  cross-link: 
    https://trino.io/docs/current/functions/../connector/mongodb.html#timestamp_objectid
  description: >
    Creates an ObjectId from a TIMESTAMP WITH TIME ZONE.
---
function:
  name: timezone_hour
  parameters:
  - datatype: time(p)
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#timezone_hour
  description: >
    Returns the hour of the time zone offset from timestamp.
---
function:
  name: timezone_hour
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#timezone_hour
  description: >
    Returns the hour of the time zone offset from timestamp.
---
function:
  name: timezone_minute
  parameters:
  - datatype: time(p)
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#timezone_minute
  description: >
    Returns the minute of the time zone offset from timestamp.
---
function:
  name: timezone_minute
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#timezone_minute
  description: >
    Returns the minute of the time zone offset from timestamp.
---
function:
  name: to_base
  parameters:
  - datatype: bigint
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varchar
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#to_base
  description: >
    Returns the base-radix representation of x.
---
function:
  name: to_base32
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varchar
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#to_base32
  description: >
    Encodes binary into a base32 string representation.
---
# NB: DF provides `encode`, which probably uses the same algorithm, but the signature is different,
#     it takes "'base64' or 'hex' as the second argument.
function:
  name: to_base64
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varchar
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#to_base64
  description: >
    Encodes binary into a base64 string representation.
---
function:
  name: to_base64url
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varchar
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#to_base64url
  description: >
    Encodes binary into a base64 string representation using the URL safe alphabet.
---
function:
  name: to_big_endian_32
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#to_big_endian_32
  description: >
    Encodes integer into a 32-bit two’s complement big-endian format.
---
function:
  name: to_big_endian_64
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#to_big_endian_64
  description: >
    Encodes bigint into a 64-bit two’s complement big-endian format.
---
# DF to_char uses formats with %Y, %m specifiers, while Trino uses 'YYYY', 'MM' etc.
function:
  name: to_char
  parameters:
  - datatype: timestamp(p)
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: teradata
  cross-link: https://trino.io/docs/current/functions/teradata.html#to_char
  description: >
    Formats timestamp as a string using format.
---
# DF to_date uses formats with %Y, %m specifiers, while Trino uses 'YYYY', 'MM' etc.
function:
  name: to_date
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: date
  section: teradata
  cross-link: https://trino.io/docs/current/functions/teradata.html#to_date
  description: >
    Parses string into a DATE using format.
---
function:
  name: to_encoded_polyline
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: varchar
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#to_encoded_polyline
  description: >
    Encodes a linestring or multipoint to a polyline.
---
function:
  name: to_geojson_geometry
  parameters:
  - datatype: sphericalgeography
  optional-parameters: []
  returns:
    datatype: varchar
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#to_geojson_geometry
  description: >
    Returns the GeoJSON encoded defined by the input spherical geography.
---
function:
  name: to_geometry
  parameters:
  - datatype: sphericalgeography
  optional-parameters: []
  returns:
    datatype: geometry
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#to_geometry
  description: >
    Converts a SphericalGeography object to a Geometry object.
---
# NB: DF provides `encode`, which probably uses the same algorithm, but the signature is different,
#     it takes "'base64' or 'hex' as the second argument.
function:
  name: to_hex
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !rust
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#to_hex
  description: >
    Encodes binary into a hex string representation.
  examples:
    - input: SELECT to_hex(cast(1000 as varbinary)) AS value;
      output: e8030000
---
function:
  name: to_ieee754_32
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#to_ieee754_32
  description: >
    Encodes real into a 32-bit big-endian binary according to IEEE 754 single-precision
    floating-point format.
---
function:
  name: to_ieee754_64
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#to_ieee754_64
  description: >
    Encodes double into a 64-bit big-endian binary according to IEEE 754 double-precision
    floating-point format.
---
function:
  name: to_iso8601
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: varchar
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#to_iso8601
  description: >
    Formats x as an ISO 8601 string. x can be date, timestamp, or
    timestamp with time zone.
---
function:
  name: to_iso8601
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: varchar
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#to_iso8601
  description: >
    Formats x as an ISO 8601 string. x can be date, timestamp, or
    timestamp with time zone.
---
function:
  name: to_milliseconds
  parameters:
  - datatype: interval day to second
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#to_milliseconds
  description: >
    Returns the day-to-second interval as milliseconds.
---
function:
  name: to_spherical_geography
  parameters:
  - datatype: geometry
  optional-parameters: []
  returns:
    datatype: sphericalgeography
  section: geospatial
  cross-link: https://trino.io/docs/current/functions/geospatial.html#to_spherical_geography
  description: >
    Converts a Geometry object to a SphericalGeography object on the sphere of the
    Earth’s radius. This
    function is only applicable to POINT, MULTIPOINT, LINESTRING, MULTILINESTRING,
    POLYGON, MULTIPOLYGON geometries defined in 2D space, or GEOMETRYCOLLECTION of
    such
    geometries. For each point of the input geometry, it verifies that point.x is
    within
    [-180.0, 180.0] and point.y is within [-90.0, 90.0], and uses them as (longitude,
    latitude)
    degrees to construct the shape of the SphericalGeography result.
---
# DF to_timestamp uses formats with %Y, %m specifiers, while Trino uses 'YYYY', 'MM' etc.
function:
  name: to_timestamp
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: timestamp
  section: teradata
  cross-link: https://trino.io/docs/current/functions/teradata.html#to_timestamp
  description: >
    Parses string into a TIMESTAMP using format.
---
function:
  name: to_unixtime
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#to_unixtime
  description: >
    Returns timestamp as a UNIX timestamp.
  examples:
    - input: SELECT to_unixtime(now()) AS value;
      output: "1718974807"
---
function:
  name: to_utf8
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varbinary
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#to_utf8
  description: >
    Encodes string into a UTF-8 varbinary representation.
---
function:
  name: transform
  parameters:
  - datatype: array<$1>
  - datatype: function($1, $11)
  optional-parameters: []
  returns:
    datatype: array<$11>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#transform
  description: >
    Returns an array that is the result of applying function to each element of array.
---
function:
  name: transform_keys
  parameters:
  - datatype: map<$13, $5>
  - datatype: function($13, $5, $12)
  optional-parameters: []
  returns:
    datatype: map<$12, $5>
  section: map
  cross-link: https://trino.io/docs/current/functions/map.html#transform_keys
  description: >
    Returns a map that applies function to each entry of map and transforms the keys.
---
function:
  name: transform_values
  parameters:
  - datatype: map<$4, $8>
  - datatype: function($4, $8, $7)
  optional-parameters: []
  returns:
    datatype: map<$4, $7>
  section: map
  cross-link: https://trino.io/docs/current/functions/map.html#transform_values
  description: >
    Returns a map that applies function to each entry of map and transforms the values.
---
function:
  name: translate
  parameters:
  - datatype: varchar
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#translate
  description: >
    Returns the source string translated by replacing characters found in the
    from string with the corresponding characters in the to string.  If the from
    string contains duplicates, only the first is used.  If the source character
    does not exist in the from string, the source character will be copied
    without translation.  If the index of the matching character in the from
    string is beyond the length of the to string, the source character will
    be omitted from the resulting string.
  examples:
  - input: >-
      select translate('Hello World', 'Hell', 'N') as value;
    output: "No Word"
---
function:
  name: trim
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
    udf: btrim
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#trim
  description: >
    Removes any leading and/or trailing characters as specified up to and
    including string from source.
  examples:
  - input: >-
      select trim('  😉  ') as value;
    output: "😉"
---
function:
  name: trim
  parameters:
  - datatype: varchar
  - datatype: codepoints
  optional-parameters: []
  returns:
    datatype: varchar
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#trim
  description: >
    Removes any leading and/or trailing characters as specified up to and
    including string from source.
---
function:
  name: trim_array
  parameters:
  - datatype: array<$3>
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: array<$3>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#trim_array
  description: >
    Remove n elements from the end of array.
---
function:
  name: truncate
  parameters:
  - datatype: decimal(p, s)
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: decimal(p, s)
  implemented-by: !rust
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#truncate
  description: >
    Returns x rounded to integer by dropping digits after decimal point.
  examples:
    - input: SELECT truncate(1.23456, 2) as value;
      output: "1.23"
---
function:
  name: truncate
  parameters:
  - datatype: decimal(p, s)
  optional-parameters: []
  returns:
    datatype: decimal(rp, 0)
  implemented-by: !rust
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#truncate
  description: >
    Returns x rounded to integer by dropping digits after decimal point.
---
function:
  name: truncate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  implemented-by: !datafusion
    udf: trunc
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#truncate
  description: >
    Returns x rounded to integer by dropping digits after decimal point.
---
function:
  name: truncate
  parameters:
  - datatype: real
  optional-parameters: []
  returns:
    datatype: real
  implemented-by: !datafusion
    udf: trunc
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#truncate
  description: >
    Returns x rounded to integer by dropping digits after decimal point.
---
function:
  name: typeof
  parameters:
  - datatype: $1
  optional-parameters: []
  returns:
    datatype: varchar
  section: conversion
  cross-link: https://trino.io/docs/current/functions/conversion.html#typeof
  description: >
    Returns the name of the type of the provided expression.
---
function:
  name: upper
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  implemented-by: !datafusion
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#upper
  description: >
    Converts string to uppercase.
  examples:
  - input: >-
      select upper('Hello World!') as value;
    output: "HELLO WORLD!"
---
function:
  name: url_decode
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: url
  cross-link: https://trino.io/docs/current/functions/url.html#url_decode
  description: >
    Unescapes the URL encoded value.
    This function is the inverse of url_encode().
---
function:
  name: url_encode
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: url
  cross-link: https://trino.io/docs/current/functions/url.html#url_encode
  description: >
    Escapes value by encoding it so that it can be safely included in
    URL query parameter names and values.
---
function:
  name: url_extract_fragment
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: url
  cross-link: https://trino.io/docs/current/functions/url.html#url_extract_fragment
  description: >
    Returns the fragment identifier from url.
---
function:
  name: url_extract_host
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: url
  cross-link: https://trino.io/docs/current/functions/url.html#url_extract_host
  description: >
    Returns the host from url.
---
function:
  name: url_extract_parameter
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: url
  cross-link: https://trino.io/docs/current/functions/url.html#url_extract_parameter
  description: >
    Returns the value of the first query string parameter named name
    from url. Parameter extraction is handled in the typical manner
    as specified by RFC 1866#section-8.2.1.
---
function:
  name: url_extract_path
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: url
  cross-link: https://trino.io/docs/current/functions/url.html#url_extract_path
  description: >
    Returns the path from url.
---
function:
  name: url_extract_port
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: bigint
  section: url
  cross-link: https://trino.io/docs/current/functions/url.html#url_extract_port
  description: >
    Returns the port number from url.
---
function:
  name: url_extract_protocol
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: url
  cross-link: https://trino.io/docs/current/functions/url.html#url_extract_protocol
  description: >
    Returns the protocol from url.
---
function:
  name: url_extract_query
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: url
  cross-link: https://trino.io/docs/current/functions/url.html#url_extract_query
  description: >
    Returns the query string from url.
---
function:
  name: uuid
  parameters: []
  optional-parameters: []
  returns:
    datatype: uuid
  volatility: volatile
  implemented-by: !datafusion
  section: uuid
  cross-link: https://trino.io/docs/current/functions/uuid.html#uuid
  description: >
    Returns a pseudo randomly generated UUID (type 4).
  examples:
    - input: SELECT uuid() as value;
      output: "22552909-5560-4234-a383-5a968a4e2a91"
---
function:
  name: value_at_quantile
  parameters:
  - datatype: qdigest
  - datatype: double
  optional-parameters: []
  returns:
    datatype: bigint
# qdigest has three variants, one for double and one for bigint, one for real.
# ---
# function:
#   name: value_at_quantile
#   parameters:
#   - datatype: qdigest
#   - datatype: double
#   optional-parameters: []
#   returns:
#     datatype: double
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#value_at_quantile
  description: >
    Returns the approximate percentile value from the quantile digest given
    the number quantile between 0 and 1.
---
function:
  name: value_at_quantile
  parameters:
  - datatype: tdigest
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
# ---
# function:
#   name: value_at_quantile
#   parameters:
#   - datatype: qdigest
#   - datatype: double
#   optional-parameters: []
#   returns:
#     datatype: real
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#value_at_quantile
  description: >
    Returns the approximate percentile value from the quantile digest given
    the number quantile between 0 and 1.
---
function:
  name: values_at_quantiles
  parameters:
  - datatype: qdigest
  - datatype: array<double>
  optional-parameters: []
  returns:
    datatype: array<bigint>
# qdigest has two variants, one for double and one for bigint.
# ---
# function:
#   name: values_at_quantiles
#   parameters:
#   - datatype: qdigest
#   - datatype: array<double>
#   optional-parameters: []
#   returns:
#     datatype: array<double>
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#values_at_quantiles
  description: >
    Returns the approximate percentile values as an array given the input
    quantile digest and array of values between 0 and 1 which
    represent the quantiles to return.
---
function:
  name: values_at_quantiles
  parameters:
  - datatype: tdigest
  - datatype: array<double>
  optional-parameters: []
  returns:
    datatype: array<double>
# ---
# function:
#   name: values_at_quantiles
#   parameters:
#   - datatype: qdigest
#   - datatype: array<double>
#   optional-parameters: []
#   returns:
#     datatype: array<real>
  section: qdigest
  cross-link: https://trino.io/docs/current/functions/qdigest.html#values_at_quantiles
  description: >
    Returns the approximate percentile values as an array given the input
    quantile digest and array of values between 0 and 1 which
    represent the quantiles to return.
---
function:
  name: var_pop
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#var_pop
  description: >
    Returns the population variance of all input values.
---
function:
  name: var_pop
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#var_pop
  description: >
    Returns the population variance of all input values.
---
function:
  name: var_samp
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#var_samp
  description: >
    Returns the sample variance of all input values.
---
function:
  name: var_samp
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#var_samp
  description: >
    Returns the sample variance of all input values.
---
function:
  name: variance
  kind: aggregate
  parameters:
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#variance
  description: >
    This is an alias for var_samp().
---
function:
  name: variance
  kind: aggregate
  parameters:
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: aggregate
  cross-link: https://trino.io/docs/current/functions/aggregate.html#variance
  description: >
    This is an alias for var_samp().
---
function:
  name: week
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#week
  description: >
    Returns the ISO week of the year from x.
    The value ranges from 1 to 53.
---
function:
  name: week
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#week
  description: >
    Returns the ISO week of the year from x.
    The value ranges from 1 to 53.
---
function:
  name: week_of_year
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#week_of_year
  description: >
    This is an alias for week().
---
function:
  name: week_of_year
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#week_of_year
  description: >
    This is an alias for week().
---
function:
  name: width_bucket
  parameters:
  - datatype: double
  - datatype: array<double>
  optional-parameters: []
  returns:
    datatype: bigint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#width_bucket
  description: >
    Returns the bin number of x in an equi-width histogram with the
    specified bound1 and bound2 bounds and n number of buckets.
---
function:
  name: width_bucket
  parameters:
  - datatype: double
  - datatype: double
  - datatype: double
  - datatype: bigint
  optional-parameters: []
  returns:
    datatype: bigint
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#width_bucket
  description: >
    Returns the bin number of x in an equi-width histogram with the
    specified bound1 and bound2 bounds and n number of buckets.
---
function:
  name: wilson_interval_lower
  parameters:
  - datatype: bigint
  - datatype: bigint
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#wilson_interval_lower
  description: >
    Returns the lower bound of the Wilson score interval of a Bernoulli trial process
    at a confidence specified by the z-score z.
---
function:
  name: wilson_interval_upper
  parameters:
  - datatype: bigint
  - datatype: bigint
  - datatype: double
  optional-parameters: []
  returns:
    datatype: double
  section: math
  cross-link: https://trino.io/docs/current/functions/math.html#wilson_interval_upper
  description: >
    Returns the upper bound of the Wilson score interval of a Bernoulli trial process
    at a confidence specified by the z-score z.
---
function:
  name: with_timezone
  parameters:
  - datatype: timestamp(p)
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: timestamp(p)
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#with_timezone
  description: >
    Returns the timestamp specified in timestamp with the time zone
    specified in zone with precision p.
---
function:
  name: word_stem
  parameters:
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#word_stem
  description: >
    Returns the stem of word in the English language.
---
function:
  name: word_stem
  parameters:
  - datatype: varchar
  - datatype: varchar
  optional-parameters: []
  returns:
    datatype: varchar
  section: string
  cross-link: https://trino.io/docs/current/functions/string.html#word_stem
  description: >
    Returns the stem of word in the English language.
---
function:
  name: xxhash64
  parameters:
  - datatype: varbinary
  optional-parameters: []
  returns:
    datatype: varbinary
  section: binary
  cross-link: https://trino.io/docs/current/functions/binary.html#xxhash64
  description: >
    Computes the xxHash64 hash of binary.
---
function:
  name: year
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#year
  description: >
    Returns the year from x.
  examples:
    - input: SELECT year(cast('2024-01-01' as date)) as value;
      output: "2024"
---
function:
  name: year
  parameters:
  - datatype: interval year to month
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#year
  description: >
    Returns the year from x.
---
function:
  name: year
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  implemented-by: !rust
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#year
  description: >
    Returns the year from x.
---
function:
  name: year_of_week
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#year_of_week
  description: >
    Returns the year of the ISO week from x.
---
function:
  name: year_of_week
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#year_of_week
  description: >
    Returns the year of the ISO week from x.
---
function:
  name: yow
  parameters:
  - datatype: date
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#yow
  description: >
    This is an alias for year_of_week().
---
function:
  name: yow
  parameters:
  - datatype: timestamp(p)
  optional-parameters: []
  returns:
    datatype: bigint
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#yow
  description: >
    This is an alias for year_of_week().
---
function:
  name: zip
  parameters:
  - datatype: array<$14>
  - datatype: array<$15>
  optional-parameters: []
  returns:
    datatype: array<row(c0 $14, c1 $15)>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#zip
  description: >
    Merges the given arrays, element-wise, into a single array of rows. The M-th element
    of
    the N-th argument will be the N-th field of the M-th output element.
    If the arguments have an uneven length, missing values are filled with NULL.
---
function:
  name: zip
  parameters:
  - datatype: array<$14>
  - datatype: array<$15>
  - datatype: array<$16>
  optional-parameters: []
  returns:
    datatype: array<row(c0 $14, c1 $15, c2 $16)>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#zip
  description: >
    Merges the given arrays, element-wise, into a single array of rows. The M-th element
    of
    the N-th argument will be the N-th field of the M-th output element.
    If the arguments have an uneven length, missing values are filled with NULL.
---
function:
  name: zip
  parameters:
  - datatype: array<$14>
  - datatype: array<$15>
  - datatype: array<$16>
  - datatype: array<$17>
  optional-parameters: []
  returns:
    datatype: array<row(c0 $14, c1 $15, c2 $16, c3 $17)>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#zip
  description: >
    Merges the given arrays, element-wise, into a single array of rows. The M-th element
    of
    the N-th argument will be the N-th field of the M-th output element.
    If the arguments have an uneven length, missing values are filled with NULL.
---
function:
  name: zip
  parameters:
  - datatype: array<$14>
  - datatype: array<$15>
  - datatype: array<$16>
  - datatype: array<$17>
  - datatype: array<$18>
  optional-parameters: []
  returns:
    datatype: array<row(c0 $14, c1 $15, c2 $16, c3 $17, c4 $18)>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#zip
  description: >
    Merges the given arrays, element-wise, into a single array of rows. The M-th element
    of
    the N-th argument will be the N-th field of the M-th output element.
    If the arguments have an uneven length, missing values are filled with NULL.
---
function:
  name: zip_with
  parameters:
  - datatype: array<$1>
  - datatype: array<$11>
  - datatype: function($1, $11, $9)
  optional-parameters: []
  returns:
    datatype: array<$9>
  section: array
  cross-link: https://trino.io/docs/current/functions/array.html#zip_with
  description: >
    Merges the two given arrays, element-wise, into a single array using function.
    If one array is shorter, nulls are appended at the end to match the length of
    the
    longer array, before applying function.
---
function:
  name: if
  kind: scalar
  parameters:
  - datatype: boolean
  - datatype: $1
  - datatype: $1
  returns:
    datatype: $1
  implemented-by: !rust
  section: conditional
  cross-link: https://trino.io/docs/current/functions/conditional.html#if-expression
  description: >
    Evaluates expression parameter and returns second if condition is true,
    otherwise null is returned and true_value is not evaluated.
  examples:
    - input: SELECT IF(2 > 1, 'HIGHER', 'LOWER') AS value;
      output: "HIGHER"
---
function:
  name: try
  kind: scalar
  parameters:
  - datatype: $1
  returns:
    datatype: $1
  section: conditional
  cross-link: https://trino.io/docs/current/functions/conditional.html#try-function
  description: >
    Evaluate an expression and handle certain types of errors by returning
    NULL.
---
function:
  name: current_time
  kind: scalar
  parameters: []
  returns:
    datatype: time
  special: true
  volatility: stable
  implemented-by: !datafusion
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#current_time
  description: >
    Returns the current time with time zone as of the start of the query.
  examples:
    - input: SELECT current_time() AS value;
      output: "13:52:34.245364"
---
function:
  name: current_timestamp
  kind: scalar
  parameters: []
  returns:
    datatype: timestamp
  special: true
  volatility: stable
  implemented-by: !datafusion
    udf: now
# DF now() carries a time zone (as current_timestamp does in Trino), but it is hard-wired as UTC currently
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#current_timestamp
  description: >
    Returns the current timestamp with time zone as of the start of the query,
    with 3 digits of subsecond precision,
  examples:
    - input: SELECT current_timestamp() AS value;
      output: "2024-06-21T13:53:41.809016Z"
---
function:
  name: current_timestamp
  kind: scalar
  parameters:
  - datatype: bigint
    constant: '0'
  returns:
    datatype: timestamp(0)
  volatility: stable
  implemented-by: !rust
    name: current_timestamp_bigint_0
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#current_timestamp
  description: >
    Returns the current timestamp with time zone as of the start of the query,
    with 3 digits of subsecond precision,
---
function:
  name: current_timestamp
  kind: scalar
  parameters:
  - datatype: bigint
    constant: '3'
  returns:
    datatype: timestamp(3)
  volatility: stable
  implemented-by: !rust
    name: current_timestamp_bigint_3
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#current_timestamp
  description: >
    Returns the current timestamp with time zone as of the start of the query,
    with 3 digits of subsecond precision,
---
function:
  name: current_timestamp
  kind: scalar
  parameters:
  - datatype: bigint
    constant: '6'
  returns:
    datatype: timestamp(6)
  volatility: stable
  implemented-by: !rust
    name: current_timestamp_bigint_6
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#current_timestamp
  description: >
    Returns the current timestamp with time zone as of the start of the query,
    with 3 digits of subsecond precision,
---
function:
  name: current_timestamp
  kind: scalar
  parameters:
  - datatype: bigint
    constant: '9'
  returns:
    datatype: timestamp(9)
  volatility: stable
  implemented-by: !rust
    name: current_timestamp_bigint_9
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#current_timestamp
  description: >
    Returns the current timestamp with time zone as of the start of the query,
    with 3 digits of subsecond precision,
---
function:
  name: localtime
  kind: scalar
  parameters: []
  returns:
    datatype: time
  special: true
  volatility: stable
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#localtime
  description: >
    Returns the current time as of the start of the query.
---
function:
  name: localtimestamp
  kind: scalar
  parameters: []
  returns:
    datatype: timestamp
  special: true
  volatility: stable
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#localtimestamp
  description: >
    Returns the current timestamp as of the start of the query, with 3
    digits of subsecond precision.
---
function:
  name: localtimestamp
  kind: scalar
  parameters:
  - datatype: bigint
    constant: '0'
  returns:
    datatype: timestamp(0)
  volatility: stable
  implemented-by: !rust
    name: localtimestamp_bigint_0
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#localtimestamp
  description: >
    Returns the current timestamp as of the start of the query, with 3
    digits of subsecond precision.
---
function:
  name: localtimestamp
  kind: scalar
  parameters:
  - datatype: bigint
    constant: '3'
  returns:
    datatype: timestamp(3)
  volatility: stable
  implemented-by: !rust
    name: localtimestamp_bigint_3
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#localtimestamp
  description: >
    Returns the current timestamp as of the start of the query, with 3
    digits of subsecond precision.
---
function:
  name: localtimestamp
  kind: scalar
  parameters:
  - datatype: bigint
    constant: '6'
  returns:
    datatype: timestamp(6)
  volatility: stable
  implemented-by: !rust
    name: localtimestamp_bigint_6
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#localtimestamp
  description: >
    Returns the current timestamp as of the start of the query, with 3
    digits of subsecond precision.
---
function:
  name: localtimestamp
  kind: scalar
  parameters:
  - datatype: bigint
    constant: '9'
  returns:
    datatype: timestamp(9)
  volatility: stable
  implemented-by: !rust
    name: localtimestamp_bigint_9
  section: datetime
  cross-link: https://trino.io/docs/current/functions/datetime.html#localtimestamp
  description: >
    Returns the current timestamp as of the start of the query, with 3
    digits of subsecond precision.
---
function:
  name: current_user
  kind: scalar
  parameters: []
  returns:
    datatype: varchar
  special: true
  section: session
  cross-link: https://trino.io/docs/current/functions/session.html#current_user
  description: >
    Returns the current user running the query.
---
function:
  name: current_catalog
  kind: scalar
  parameters: []
  returns:
    datatype: varchar
  special: true
  section: session
  cross-link: https://trino.io/docs/current/functions/session.html#current_catalog
  description: >
    Returns a character string that represents the current catalog name.
---
function:
  name: current_schema
  kind: scalar
  parameters: []
  returns:
    datatype: varchar
  special: true
  section: session
  cross-link: https://trino.io/docs/current/functions/session.html#current_schema
  description: >
    Returns a character string that represents the current unqualified schema name.
---
function:
  name: format
  kind: scalar
  parameters:
  - datatype: varchar
  - datatype: $1
  returns:
    datatype: varchar
  section: conversion
  cross-link: https://trino.io/docs/current/functions/conversion.html#format
  description: >
    Returns a formatted string using the specified format string
    and arguments.
---
function:
  name: format
  kind: scalar
  parameters:
  - datatype: varchar
  - datatype: $1
  - datatype: $2
  returns:
    datatype: varchar
  section: conversion
  cross-link: https://trino.io/docs/current/functions/conversion.html#format
  description: >
    Returns a formatted string using the specified format string
    and arguments.
---
function:
  name: format
  kind: scalar
  parameters:
  - datatype: varchar
  - datatype: $1
  - datatype: $2
  - datatype: $3
  returns:
    datatype: varchar
  section: conversion
  cross-link: https://trino.io/docs/current/functions/conversion.html#format
  description: >
    Returns a formatted string using the specified format string
    and arguments.
---
function:
  name: format
  kind: scalar
  parameters:
  - datatype: varchar
  - datatype: $1
  - datatype: $2
  - datatype: $3
  - datatype: $4
  returns:
    datatype: varchar
  section: conversion
  cross-link: https://trino.io/docs/current/functions/conversion.html#format
  description: >
    Returns a formatted string using the specified format string
    and arguments.
---
function:
  name: format
  kind: scalar
  parameters:
  - datatype: varchar
  - datatype: $1
  - datatype: $2
  - datatype: $3
  - datatype: $4
  - datatype: $5
  returns:
    datatype: varchar
  section: conversion
  cross-link: https://trino.io/docs/current/functions/conversion.html#format
  description: >
    Returns a formatted string using the specified format string
    and arguments.
